<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky、</title>
  
  
  <link href="/rz168.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/Piouscc/rz168.io.git/"/>
  <updated>2020-12-10T03:43:44.696Z</updated>
  <id>https://github.com/Piouscc/rz168.io.git/</id>
  
  <author>
    <name>Lucky、</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次gitlab迁移到docker容器</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/12/10/gitlab%E8%BF%81%E7%A7%BB%E5%88%B0docker%E5%AE%B9%E5%99%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/12/10/gitlab%E8%BF%81%E7%A7%BB%E5%88%B0docker%E5%AE%B9%E5%99%A8/</id>
    <published>2020-12-10T03:18:14.000Z</published>
    <updated>2020-12-10T03:43:44.696Z</updated>
    
    <content type="html"><![CDATA[<p>记一次gitlab迁移到docker容器</p><a id="more"></a><p>由于早两天已经把线上的gitlab版本<a href>升级13.6.1</a>，刚接到需求，需要把gitlab迁移到docker容器<br>1、修改服务器ssh22端口<br>注意：gitlab容器需要开放22端口，同时远程服务器默认为22端口，则需要提前把服务器上的端口更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">Port 22    <span class="comment">#把这个改成自己想要的，然后重启服务即可</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>2、在原gitlab备份数据，注：这里需要停止写入，即禁止同事提交代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><p>3、执行备份命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>4、提前安装好docker服务，<br>有需要的请看<a href>docker服务安装</a><br>略<br>5、到docker镜像官网搜索对应版本的gitlab镜像<br>进入<a href="https://hub.docker.com/">docker镜像官网</a>搜索gitlab<br>6、摘取gitlab镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:13.6.1-ce.0</span><br></pre></td></tr></table></figure><p>7、启动gitlab容器，目录不存在，则自动创建,9a53eb68aeeb这个为镜像ID（docker images获取）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=gitlab -d --publish 22:22 --publish 1443:443 --publish 9999:80 --restart always --privileged=<span class="literal">true</span> --volume /data/gitlab/config:/etc/gitlab --volume /data/gitlab/logs:/var/<span class="built_in">log</span>/gitlab --volume /data/gitlab/data:/var/opt/gitlab 9a53eb68aeeb</span><br></pre></td></tr></table></figure><p>8、恢复备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;11*.tar &#x2F;data&#x2F;gitlab&#x2F;data&#x2F;backups&#x2F;</span><br><span class="line">进入容器：</span><br><span class="line">docker exec -it gitlab &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;</span><br><span class="line">chown git.git 11*.tar</span><br><span class="line">执行数据恢复：</span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP&#x3D;11*  force&#x3D;yes （其中11*为备份文件名）</span><br></pre></td></tr></table></figure><p>9、复制原gitlab配置文件及gitlab-secrets.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb &#x2F;data&#x2F;gitlab&#x2F;config&#x2F;</span><br><span class="line">cp &#x2F;etc&#x2F;gitlab&#x2F;gitlab-secrets.json &#x2F;data&#x2F;gitlab&#x2F;config&#x2F;</span><br></pre></td></tr></table></figure><p>10、更新gitlab配置及重启gitlab服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入容器：</span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次gitlab迁移到docker容器&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记一次gitlab跨大版本升级</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</id>
    <published>2020-11-30T12:12:58.000Z</published>
    <updated>2020-12-10T03:36:42.939Z</updated>
    
    <content type="html"><![CDATA[<p>记一次gitlab跨大版本升级</p><a id="more"></a><p>1、查看当前系统版本及gitlab版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br><span class="line">[root@VM_3_3_centos ~]<span class="comment"># rpm -qa | grep gitlab</span></span><br><span class="line">gitlab-ce-10.5.6-ce.0.el6.x86_64</span><br></pre></td></tr></table></figure><p>从上面两条命令可以得出现在所用到的系统为Centos 7.8，gitlab 10.5.6，<br>则我们需要下载对应系统的软件包<a href="https://packages.gitlab.com/gitlab" target="_blank" rel="noopener">gitlab软件rpm包下载地址</a><br>2、升级版本顺序<a href="https://docs.gitlab.com/ee/update/README.html#upgrade-paths" target="_blank" rel="noopener">gitlab官网</a><br>按照官网升级路线：<br>8.11.x-&gt; 8.12.0-&gt; 8.17.7-&gt; 9.5.10-&gt; 10.8.7-&gt; 11.11.8-&gt; 12.0.12-&gt; 12.1.17-&gt; 12.10.14-&gt; 13.0.14-&gt; 13.1.11-&gt;13.5.3<br>个人简化路线：<br>10.5.6 ce –&gt; 10.8.7 ce -&gt; 11.11.3 ee –&gt; 12.10.14 ce –&gt; 13.0.14 ce –&gt; 13.6.1 ce<br>3、下载对应软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ee&#x2F;yum&#x2F;el7&#x2F;gitlab-ee-11.11.3-ee.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-12.10.14-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.0.4-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>4、安装gitlab-ce-10.8.7<br>停止相关服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>5、执行升级安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>6、更新数据库操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:check</span><br><span class="line">gitlab-rake db:migrate</span><br></pre></td></tr></table></figure><p>7、启动相关服务，刷新配置并重启gitlab所有服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start unicorn</span><br><span class="line">gitlab-ctl start sidekiq</span><br><span class="line">gitlab-ctl start nginx</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>8、当启动完gitlab所有服务需要等几分钟才能正常访问gitlab_web，不然显示为502<br>图略<br>9、接下来升级步骤和上面的一样，即重复操作第（4、5、6、7步），则这里直接省略<br>10、升级完成版本显示如下图：</p><img src="/rz168.io/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/gitlab01.png" class title="This is an gitlab image"><p>11、由于gitlab版本升级，则需要在本地每个gitlab项目中重新执行git pull<br>如果提示一下这图片，则需要手动删除对应系统目录下的.ssh目录下的known_hosts<br>文件里的gitlab地址密钥，若自己的电脑只有gitlab的密钥，可以直接把known_hosts文件删除，<br>对应删除的原因是因为有些朋友还会连github项目或者其它的都会保存密钥到此文件</p><img src="/rz168.io/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/gitlab02.png" class title="This is an gitlab image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次gitlab跨大版本升级&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>gitlab备份与恢复</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/28/gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/28/gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2020-11-28T06:47:54.000Z</published>
    <updated>2020-11-30T09:52:47.537Z</updated>
    
    <content type="html"><![CDATA[<p>gitlab备份与恢复<br> <a id="more"></a><br>一、备份<br>1、gitlab的备份比较简单，直接使用自带的即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>2、默认备份路径为：/var/opt/gitlab/backups，如果想更换备份路径可以直接修改gitlab配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line">gitlab_rails[&#39;backup_path&#39;] &#x3D; &quot;&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&quot;</span><br></pre></td></tr></table></figure><p>3、每次修改完gitlab配置文件需要重新载入配置,否则配置不会读取更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>二、恢复<br>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复。<br>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。<br>特别注意：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。<br>1、gitlab的恢复也相对于简单，先停用相关连接服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>2、然后进行命令恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1606410105_2020_11_27_10.5.6_gitlab_backup.tar</span><br><span class="line">当只有一个备份文件时，直接执行下面命令即可，恢复期间大概有两个地方需要手动输入yes，当出现多个<span class="keyword">done</span>时，则表示恢复成功</span><br><span class="line">gitlab-rake gitlab:backup:restore</span><br></pre></td></tr></table></figure><p>3、恢复成功后启动上面关闭的服务，以及重新执行配置gitlab，重启gitllab全部服务（建议）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start unicorn</span><br><span class="line">gitlab-ctl start sidekiq</span><br><span class="line">gitlab-ctl start nginx</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>4、然后打开浏览器，输入对应gitlab地址即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gitlab备份与恢复&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-03T08:56:13.000Z</published>
    <updated>2020-11-18T08:50:32.640Z</updated>
    
    <content type="html"><![CDATA[<p>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</p><a id="more"></a><p>1、本文基于上两篇文章进行配置（elasticsearch集群部署和kibana服务安装）<br>2、服务器配置信息及软件版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|192.168.0.12|es01|es 7.9.3|</span><br><span class="line">|192.168.0.13|es02|es 7.9.3|</span><br><span class="line">|192.168.0.17|es03|es 7.9.3|</span><br><span class="line">|192.168.0.17|es03|kibana 7.9.3|</span><br></pre></td></tr></table></figure><p>3、停止现在运行的elk环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/elasticsearch_pid | xargs kill -9 </span><br><span class="line">pkill kibana</span><br></pre></td></tr></table></figure><p>4、开启xpack配置<br>修改作为主节点的elasticsearch配置文件，添加如下命令开启x-pack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>5、生成安全秘钥，执行以下命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-certutil ca -out config/elastic-certificates.p12 -pass <span class="string">""</span></span><br></pre></td></tr></table></figure><p>6、执行上面命令后，在config文件夹多出了文件elastic-certificates.p12，此时需要继续配置es配置文件，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>7、然后启动当前服务器的es</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/su - es -c <span class="string">'/usr/local/elasticsearch-7.9.3/bin/elasticsearch -p /tmp/elasticsearch_pid -d'</span></span><br></pre></td></tr></table></figure><p>8、配置初始账号密码（这里有两种配置方式）<br>1）自动生成密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure><p>2）手动配置指定密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><p>然后会对应生成elastic账号，谨记所设置的密码，因为下面配置会用到<br>9、验证elasticsearch，浏览器输入对应的IP:9200提示下图，则配置成功</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass01.png" class title="This is an jenkins image"><p>10、配置剩下两台集群机器<br>这里需要把主节点生成的elastic-certificates.p12分别复制到相关节点的config下<br>同时各自的elasticsearch.yml文件新增以下配置,再执行启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>11、配置kibana权限<br>修改Kibana配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line">elasticsearch.hosts: ["http://127.0.0.1:9200"]</span><br><span class="line">kibana.index: ".kibana"</span><br><span class="line">i18n.locale: "zh-CN"</span><br><span class="line"><span class="meta">#</span><span class="bash">新增配置</span></span><br><span class="line">elasticsearch.username: "elastic"</span><br><span class="line">elasticsearch.password: "123456"</span><br><span class="line">xpack.security.enabled: true</span><br></pre></td></tr></table></figure><p>12、启动kibana，并访问kibana界面，测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su es -c '/usr/local/kibana-7.9.3/bin/kibana &amp; '</span><br></pre></td></tr></table></figure><p>浏览器键入：192.168.0.12:5601</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass02.png" class title="This is an jenkins image"><p>13、登陆成功界面以及配置用户权限界面</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass03.png" class title="This is an jenkins image"><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass04.png" class title="This is an jenkins image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Kibana服务安装</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/</id>
    <published>2020-11-03T08:55:42.000Z</published>
    <updated>2020-11-18T08:29:36.524Z</updated>
    
    <content type="html"><![CDATA[<p>Kibana服务安装</p><a id="more"></a><p>1、kibana简介<br>Kibana 是一个免费且开放的用户界面，能够让您对 Elasticsearch 数据进行可视化，并让您在 Elastic Stack 中进行导航。您可以进行各种操作，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。</p><p>Kibana是ElasticSearch的一个工具，用来分析ES中的数据并以各种图形界面显示出来<br>可以作为ElasticSearch的一个客户端，在Kibana中可以很轻松的调用ES的RESTful接口<br>2、部署kibana，这里用的方法是通过ansible-playbook，如下<br>有需要的可以自行查看本人的<a href="https://github.com/Piouscc/dev">github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: kibana</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="string">"下载 kibana-7.9版本"</span></span><br><span class="line">      shell: |-</span><br><span class="line">        date ;</span><br><span class="line">        Downloads_dir=/usr/<span class="built_in">local</span>/src</span><br><span class="line">        wget -O <span class="variable">$Downloads_dir</span>/kibana-7.9.3-linux-x86_64.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-7.10.0-linux-x86_64.tar.gz &gt; /dev/null</span><br><span class="line">    - name: <span class="string">"解压kibana"</span></span><br><span class="line">      shell: <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; tar -xf kibana-7.9.3-linux-x86_64.tar.gz &amp;&amp; mv kibana-7.9.3-linux-x86_64 ../kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"复制kibana配置文件"</span></span><br><span class="line">      template: src=kibana.yml dest=/usr/<span class="built_in">local</span>/kibana-7.9.3/config/</span><br><span class="line">    - name: <span class="string">"修改目录用户及组"</span></span><br><span class="line">      shell: chown esuser.www -R /usr/<span class="built_in">local</span>/kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"启动kibana"</span></span><br><span class="line">      shell: su esuser -c <span class="string">'/usr/local/kibana-7.9.3/bin/kibana &amp; '</span></span><br></pre></td></tr></table></figure><p>3、执行安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -v kibana.yml</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki01.png" class title="This is an jenkins image"><p>4、查看kibana服务进程及端口，默认端口为5601</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 config]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:5601            0.0.0.0:*               LISTEN      3797/node           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      963/sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1132/master         </span><br><span class="line">tcp6       0      0 192.168.0.17:9200       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 192.168.0.17:9300       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      963/sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1132/master         </span><br><span class="line">[root@node02 config]<span class="comment"># ps -ef |grep kibana</span></span><br><span class="line">esuser     3797      1 87 15:26 ?        00:01:01 /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../node/bin/node /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../src/cli</span><br><span class="line">root       3868   2072  1 15:27 pts/1    00:00:00 grep --color=auto kibana</span><br><span class="line">[root@node02 config]<span class="comment">#</span></span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki02.png" class title="This is an jenkins image"><p>5、访问kibana web界面</p><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki03.png" class title="This is an jenkins image"><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki04.png" class title="This is an jenkins image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kibana服务安装&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch集群部署</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2020-11-02T08:54:16.000Z</published>
    <updated>2020-12-10T03:10:22.014Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch集群部署</p><a id="more"></a><p>1、服务器信息及软件版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|  服务器IP   | 系统版本  |  hostname  | 对应软件版本  | </span><br><span class="line">|  ----  | ----  | ----  | ----  | </span><br><span class="line">|192.168.0.12|centos 7|es01|es 7.9.3|</span><br><span class="line">|192.168.0.13|centos 7|es02|es 7.9.3|</span><br><span class="line">|192.168.0.17|centos 7|es03|es 7.9.3|</span><br></pre></td></tr></table></figure><p>2、Elasticsearch介绍<br>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p><p>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。<br>实时分析的分布式搜索引擎。<br>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。<br><a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">Elasticsearch官网链接</a><br>3、由于部署三台服务器，一步步操作比较麻烦，则这边使用到批量部署工具ansible，则下面为ansible-playbook配置<br>有需要的可以自行查看本人的<a href="https://github.com/Piouscc/dev">github</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: esnode</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;下载es7.9版本压缩包&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        date ;</span><br><span class="line">        Downloads_dir&#x3D;&#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">        wget -O $Downloads_dir&#x2F;elasticsearch-7.9.3-linux-x86_64.tar.gz https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-7.9.3-linux-x86_64.tar.gz &gt;&#x2F;dev&#x2F;null</span><br><span class="line">    - name: &quot;解压es压缩包&quot;</span><br><span class="line">      shell: cd &#x2F;usr&#x2F;local&#x2F;src &amp;&amp; tar -xf elasticsearch-7.9.3-linux-x86_64.tar.gz &amp;&amp; mv elasticsearch-7.9.3 ..&#x2F;elasticsearch-7.9.3</span><br><span class="line">    - name: &quot;复制es配置文件到es服务器&quot;</span><br><span class="line">      template: src&#x3D;elasticsearch.yml dest&#x3D;&#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3&#x2F;config&#x2F;</span><br><span class="line">    - name: &quot;复制修改配置文件脚本&quot;</span><br><span class="line">      template: src&#x3D;chage.sh dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line">    - name: &quot;修改es配置文件&quot;</span><br><span class="line">      shell: sh -x &#x2F;usr&#x2F;local&#x2F;src&#x2F;chage.sh</span><br><span class="line">    - name: &quot;创建es数据及log目录&quot;</span><br><span class="line">      shell: mkdir -p &#x2F;data&#x2F;elasticsearch&#x2F;&#123;log,data&#125;</span><br><span class="line">    - name: create es user</span><br><span class="line">      user:</span><br><span class="line">        name: esuser</span><br><span class="line">        state: present</span><br><span class="line">    - name: &quot;配置用户及组权限&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        chown esuser.esuser -R &#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3</span><br><span class="line">        chown esuser.esuser -R &#x2F;data&#x2F;elasticsearch</span><br><span class="line">    - name: &quot;修改系统配置&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        echo &quot;vm.max_map_count&#x3D;262144&quot;  &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">        sysctl -p </span><br><span class="line">        echo &quot;* soft memlock unlimited&quot; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf </span><br><span class="line">        echo &quot;* hard memlock unlimited&quot; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf </span><br><span class="line">    - name: &quot;分别启动es&quot;</span><br><span class="line">      shell: &#x2F;usr&#x2F;bin&#x2F;su - esuser -c &#39;&#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3&#x2F;bin&#x2F;elasticsearch -p &#x2F;tmp&#x2F;elasticsearch_pid -d&#39;</span><br></pre></td></tr></table></figure><p>4、执行ansible-playbook安装elasticsearch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -v elasticsearch.yml</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es01.png" class title="This is an elasticsearch image"><p>5、因为安装方式选择了ansible批量的形式，则安装完就会自动启动，则直接查看elasticsearch进程</p><img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es02.png" class title="This is an elasticsearch image"><p>6、查看节点</p><img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es03.png" class title="This is an elasticsearch image"><p>显示上面，则es集群就已经搭建完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch集群部署&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+gitlab自动部署</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-27T09:43:41.000Z</published>
    <updated>2020-11-30T09:43:09.903Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins+gitlab自动部署<br> <a id="more"></a><br>1、持续集成<br>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译、发布、自动化测试）来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。<br>2、安装Jenkins插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitlab hook</span><br><span class="line">GitLab Plugin</span><br><span class="line">SSH plugin</span><br><span class="line">Git plugin</span><br></pre></td></tr></table></figure><p>3、配置Jenkins，创建一个命名为：JOb的任务，选择第一个Freestyle project</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins01.png" class title="This is an jenkins image"><p>4、源码管理，这里我们选择我们gitlab上的地址如：<a href="mailto:git@192.168.0.143">git@192.168.0.143</a>:root/test.git，然后添加凭据</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins02.png" class title="This is an jenkins image"><p>5、添加凭据如下图，这里用的用户为服务器上的www用户及www用户的私钥，当不进行勾子触发时，手动执行项目拉取代码</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins03.png" class title="This is an jenkins image"><p>6、添加完成凭据正确显示下图</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins04.png" class title="This is an jenkins image"><p>7、选择构建触发器并复制对应url地址</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins06.png" class title="This is an jenkins image"><p>8、添加构建步骤，这里可以是执行shell,python,linux命令等，这里就echo 1</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins05.png" class title="This is an jenkins image"><p>9、配置gitlab，由于已经有一个项目，则直接使用<br>点击项目，进入项目管理界面，然后点击设置————&gt;webhooks————&gt;输入上面的url地址：<a href="http://192.168.0.143:8088/project/Job，及凭据ID号" target="_blank" rel="noopener">http://192.168.0.143:8088/project/Job，及凭据ID号</a><br>如下图</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/gitlab01.png" class title="This is an jenkins image"><p>10、然后我们修改项目的一些文件内容，再通过git提交到gitlab</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/linux01.png" class title="This is an jenkins image"><p>11、通过jenkins web界面查看是否自动触发任务</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins09.png" class title="This is an jenkins image"><p>12、查看jenkins任务运行任务的步骤</p><img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins10.png" class title="This is an jenkins image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins+gitlab自动部署&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>gitlab安装及使用</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2020-09-25T05:46:08.000Z</published>
    <updated>2020-12-10T03:11:08.373Z</updated>
    
    <content type="html"><![CDATA[<p>gitlab安装及使用</p><a id="more"></a><p>1、gitlab简介<br>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。<br>类似的仓库管理系统还有github、svn、码云等<br>2、gitlab与svn的对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Git优点：（一台电脑即可以是客户端，也可以是服务器；工作过程中，可以断网）</span><br><span class="line">　　适合分布式开发，强调个体；</span><br><span class="line">　　公共服务器压力和数据量都不会太大；</span><br><span class="line">　　速度快，灵活；</span><br><span class="line">　　可以离线工作。</span><br><span class="line"></span><br><span class="line">SVN优点：（一台的服务器控制很多客户端，使用过程中不能断网）</span><br><span class="line">　　管理方便、逻辑明确；</span><br><span class="line">　　集中式管理更能保证安全性；</span><br><span class="line">　　适合开发人数不多的项目开发</span><br></pre></td></tr></table></figure><p>3、配置要求<br>CPU：4C<br>内存：4G<br>4、安装方式<br>1）<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">容器方式安装</a><br>2)yum安装<br>5、配置gitlab安装源，注意这里的“el7”,指定的是linux系统为centos 7，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab_gitlab-ce]</span><br><span class="line">name=gitlab_gitlab-ce</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/6/<span class="variable">$basearch</span></span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[gitlab_gitlab-ce-source]</span><br><span class="line">name=gitlab_gitlab-ce-source</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/6/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure><p>6、更新本地yum源</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab01.png" class title="This is an jenkins image"><p>7、安装gitlab社区版，安装最新版本如图所示，<br>若要安装指定版本，则执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gitlab-ce-x.x.x</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab02.png" class title="This is an jenkins image"><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab03.png" class title="This is an jenkins image"><p>8、gitlab常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start # 启动所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl stop # 停止所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl restart # 重启所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl status # 查看服务状态；</span><br><span class="line">sudo gitlab-ctl reconfigure # 启动服务；</span><br><span class="line">sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb # 修改默认的配置文件；</span><br><span class="line">gitlab-rake gitlab:check SANITIZE&#x3D;true --trace # 检查gitlab；</span><br><span class="line">sudo gitlab-ctl tail # 查看日志；</span><br></pre></td></tr></table></figure><p>9、由于端口给占用，则下面修改端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">'http://192.168.0.143:8888'</span></span><br><span class="line">unicorn[<span class="string">'port'</span>] = 8888</span><br></pre></td></tr></table></figure><p>10、初始化gitlab(每次修改完配置文件都要进行此命令)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>11、然后浏览器输入<a href="http://192.168.0.143:8888,出现下面图片，默认账号为：root，因为是首次进入需要更改密码（最少8个字符）">http://192.168.0.143:8888,出现下面图片，默认账号为：root，因为是首次进入需要更改密码（最少8个字符）</a></p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab04.png" class title="This is an gitlab image"><p>12、若出现502 GitLab is not responding，如下图所示，则命令行输入gitlab-ctl tail查看是否端口给占用</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab05.png" class title="This is an gitlab image"><p>13、登陆成功看到默认界面显示为英文，不过不用怕，因为我们安装的是13.x是已经支持中文的，直接设置<br>点击用户头像setting————&gt;Preferences，如下图</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab06.png" class title="This is an gitlab image"><p>14、然后退出再重新登陆</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab07.png" class title="This is an gitlab image"><p>15、gitlab数据备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=`date +%Y_%m_%d`</span><br><span class="line"><span class="comment">#生成gitlab备份文件</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line">gitlab_bak_file=</span><br><span class="line">gitlab_bak_dir=/data/gitlab_bak</span><br><span class="line">mkdir -p <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">cp /etc/gitlab/gitlab.rb  </span><br><span class="line">cp /etc/gitlab/gitlab-secrets.json <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">mv /var/opt/gitlab/backups/* <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"></span><br><span class="line">crontab -l</span><br><span class="line">* 4 * * * /opt/gitlab_bak.sh</span><br></pre></td></tr></table></figure><p>二、简单使用<br>1、生成服务器ssh密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[www@master .ssh]$ ssh-keygen </span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:h4knSLSSXOs&#x2F;+cUrkI7&#x2F;mPAyOlbL1qnFwL1HCspNBTo www@master</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    +            |</span><br><span class="line">| . &#x3D; +           |</span><br><span class="line">|  E + .          |</span><br><span class="line">|   * + . o       |</span><br><span class="line">|    B +.S .      |</span><br><span class="line">| . +.&#x3D;oB o       |</span><br><span class="line">|  ooo&#x3D;Oo. o      |</span><br><span class="line">|  o B++*.. .     |</span><br><span class="line">| ..+.&#x3D;&#x3D;.o..      |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[www@master .ssh]$ ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br><span class="line">[www@master .ssh]$</span><br></pre></td></tr></table></figure><p>2、然后把公钥复制到gitlab用户设置里的ssh密钥处</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab08.png" class title="This is an gitlab image"><p>3、创建一个命名为test的项目</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab09.png" class title="This is an gitlab image"><p>4、查看服务器是否安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># rpm -qa | grep git</span></span><br><span class="line">libglvnd-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">crontabs-1.11-6.20121102git.el7.noarch</span><br><span class="line">net-tools-2.0-0.25.20131004git.el7.x86_64</span><br><span class="line">lm_sensors-libs-3.4.0-8.20160601gitf9185e5.el7.x86_64</span><br><span class="line">libglvnd-glx-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">libglvnd-egl-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">linux-firmware-20191203-76.gite8a0f4c.el7.noarch</span><br><span class="line">git-1.8.3.1-23.el7_8.x86_64</span><br></pre></td></tr></table></figure><p>5、复制克隆地址，然后在服务器把项目克隆到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@192.168.0.143:root&#x2F;test.git</span><br></pre></td></tr></table></figure><p>因为刚才我们设置里面提供的是www用户的密钥，则以www用户去克隆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[www@master www]$ git <span class="built_in">clone</span> git@192.168.0.143:root/test.git</span><br><span class="line">正克隆到 <span class="string">'test'</span>...</span><br><span class="line">The authenticity of host <span class="string">'192.168.0.143 (192.168.0.143)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:aIE7r5cEABEogX0LNpMVgCqZif3K+C+jb6AaHgXWDtY.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:c9:cb:ae:bb:28:13:98:5f:6f:fc:c3:ab:16:0c:7b:22.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.0.143<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">warning: 您似乎克隆了一个空版本库。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[www@master www]$ cd test</span></span><br><span class="line"><span class="string">[www@master test]$ ls -a</span></span><br><span class="line"><span class="string">.  ..  .git</span></span><br></pre></td></tr></table></figure><p>6、创建文件夹及文件，提交到gitlab上面<br>由于我们没有设置邮箱及用户名，则提示先让我们设置</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab10.png" class title="This is an gitlab image"><p>7、设置邮箱地址及用户，并提交文件到gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[www@master <span class="built_in">test</span>]$ git config --global user.email <span class="string">"test@qq.com"</span></span><br><span class="line">[www@master <span class="built_in">test</span>]$ git config --global user.name <span class="string">"test"</span></span><br><span class="line">[www@master <span class="built_in">test</span>]$ git commit -m <span class="string">"提交测试文件到gitlab"</span></span><br><span class="line">[master（根提交） d8827eb] 提交测试文件到gitlab</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test_2020-09-29/test.txt</span><br><span class="line">[www@master <span class="built_in">test</span>]$ git push origin master</span><br><span class="line">Counting objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 288 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.0.143:root/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p>8、查看gitlab web界面是否存在我们上面所提交的文件夹及文件</p><img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab11.png" class title="This is an gitlab image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gitlab安装及使用&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记一次Jenkins版本升级</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</id>
    <published>2020-09-23T03:58:19.000Z</published>
    <updated>2020-09-24T09:48:48.191Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins版本升级<br> <a id="more"></a><br>1、背景<br>由于现在所用到jenkins的版本为2.248，出现以下警告发布，则需要把jenkins版本升级来解决，此警告</p><img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins01.png" class title="This is an jenkins image"><p>2、下载最新版本jenkins-2.257</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/2.257/jenkins.war</span><br></pre></td></tr></table></figure><p>3、由于用的服务器为CVM，则先登陆腾讯云创建快照，避免升级出现问题，操作回滚<br>同时也需要备份服务器上的jenkins.war包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/jenkins_bak</span><br><span class="line">cp /usr/lib/jenkins/jenkins.war /opt/jenkins_bak/</span><br></pre></td></tr></table></figure><p>4、停止jenkins服务，并复制最新版jenkins到对应目录,然后启动jenkins服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop jenkins</span><br><span class="line">mv jenkins.war /usr/lib/jenkins/</span><br><span class="line">systemctl start jenkins</span><br></pre></td></tr></table></figure><p>5、web查看jenkins版本，及对应项目是否正常，出现下图等一小会儿刷新浏览器页面即可</p><img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins02.png" class title="This is an jenkins image"><p>6、查看jenkins版本</p><img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins03.png" class title="This is an jenkins image"><p>7、再到插件管理，把对应的插件进行更新即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins版本升级&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/Linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Centos_Harbor环境搭建及使用</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2020-09-22T08:39:54.000Z</published>
    <updated>2020-09-25T02:53:25.136Z</updated>
    
    <content type="html"><![CDATA[<p>Centos_Harbor环境搭建及使用<br> <a id="more"></a><br>1、什么是Harbor<br>Harbor是一个开放源代码注册中心，它通过策略和基于角色的访问控制来保护工件，确保扫描图像并使其免受漏洞侵害，并将图像签名为受信任的。<br>Harbor是CNCF毕业的项目，可提供合规性，性能和互操作性，以帮助您跨Kubernetes和Docker等云原生计算平台持续，安全地管理工件。</p><p>2、安装Harbor的最低和建议软、硬件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPU:最低2C，推荐4C</span><br><span class="line">内存：最低4G,推荐8G</span><br><span class="line">硬盘：最低40G,推荐160G</span><br><span class="line"></span><br><span class="line">docker-version:17.06.0-ce+</span><br></pre></td></tr></table></figure><p>3、下载及解压文件,也可以先下载再把文件上传到服务器，进行解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.1.0/harbor-online-installer-v2.1.0.tgz</span><br><span class="line">tar -xvf harbor-online-installer-v2.1.0.tgz</span><br></pre></td></tr></table></figure><p>4、修改harbor配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line">sed -i <span class="string">'/^#/d;/^$/d;/^  #/d'</span> harbor.yml</span><br><span class="line">修改hostname为192.168.0.143</span><br><span class="line">vi harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: 192.168.0.143</span><br><span class="line">http:</span><br><span class="line">  port: 80</span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">  max_idle_conns: 50</span><br><span class="line">  max_open_conns: 1000</span><br><span class="line">data_volume: /data</span><br><span class="line">clair:</span><br><span class="line">  updaters_interval: 12</span><br><span class="line">trivy:</span><br><span class="line">  ignore_unfixed: <span class="literal">false</span></span><br><span class="line">  skip_update: <span class="literal">false</span></span><br><span class="line">  insecure: <span class="literal">false</span></span><br><span class="line">jobservice:</span><br><span class="line">  max_job_workers: 10</span><br><span class="line">notification:</span><br><span class="line">  webhook_job_max_retry: 10</span><br><span class="line">chart:</span><br><span class="line">  absolute_url: disabled</span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line">  level: info</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    location: /var/<span class="built_in">log</span>/harbor</span><br><span class="line">_version: 2.0.0</span><br></pre></td></tr></table></figure><p>5、启动Harbor服务，实际就是在docker拉取镜像启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br><span class="line">提示如下，则表示安装成功</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating redis         ... <span class="keyword">done</span></span><br><span class="line">Creating registryctl   ... <span class="keyword">done</span></span><br><span class="line">Creating registry      ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-portal ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db     ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-core   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx             ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br></pre></td></tr></table></figure><p>6、查看对应容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@system harbor]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                       NAMES</span><br><span class="line">8441988f22e4        goharbor/harbor-jobservice:v2.1.0    <span class="string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-jobservice</span><br><span class="line">5223df8d89eb        goharbor/nginx-photon:v2.1.0         <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute (healthy)   0.0.0.0:80-&gt;8080/tcp        nginx</span><br><span class="line">13cd522bbf86        goharbor/harbor-core:v2.1.0          <span class="string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-core</span><br><span class="line">848962ff7f6d        goharbor/harbor-db:v2.1.0            <span class="string">"/docker-entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-db</span><br><span class="line">91dcdf76cf12        goharbor/harbor-portal:v2.1.0        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-portal</span><br><span class="line">bb50db31e37b        goharbor/harbor-registryctl:v2.1.0   <span class="string">"/home/harbor/start.…"</span>   About a minute ago   Up About a minute (healthy)                               registryctl</span><br><span class="line">4570444ae911        goharbor/registry-photon:v2.1.0      <span class="string">"/home/harbor/entryp…"</span>   About a minute ago   Up About a minute (healthy)                               registry</span><br><span class="line">0e169241429a        goharbor/redis-photon:v2.1.0         <span class="string">"redis-server /etc/r…"</span>   About a minute ago   Up About a minute (healthy)                               redis</span><br><span class="line">90aa91304cf5        goharbor/harbor-log:v2.1.0           <span class="string">"/bin/sh -c /usr/loc…"</span>   About a minute ago   Up About a minute (healthy)   127.0.0.1:1514-&gt;10514/tcp   harbor-log</span><br><span class="line">[root@system harbor]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>7、访问Harbor web页面,浏览器输入<a href="http://192.168.0.143，默认账号密码为：admin">http://192.168.0.143，默认账号密码为：admin</a> Harbor12345</p><img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor01.png" class title="This is an jenkins image"><img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor02.png" class title="This is an jenkins image"><p>8、测试推送镜像到Harbor仓库<br>1)编译daemon.json文件，加入本地Harbor仓库地址：192.168.0.143</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"bip"</span>: <span class="string">"172.17.0.1/16"</span>,</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">     <span class="string">"https://bxsfpjcb.mirror.aliyuncs.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"192.168.0.143:80"</span>],</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/opt/docker"</span>,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dns-search"</span>: [<span class="string">"default.svc.cluster.local"</span>, <span class="string">"svc.cluster.local"</span>, <span class="string">"localdomain"</span>],</span><br><span class="line">  <span class="string">"dns-opts"</span>: [<span class="string">"ndots:2"</span>, <span class="string">"timeout:2"</span>, <span class="string">"attempts:2"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、重启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure><p>10、下载一个测试镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker pull alpine</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/alpine</span><br><span class="line">df20fa9351a1: Pull complete </span><br><span class="line">Digest: sha256:185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> alpine:latest</span><br><span class="line">docker.io/library/alpine:latest</span><br></pre></td></tr></table></figure><p>11、给镜像打个tag标签,然后查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker tag alpine:latest 192.168.0.143:80/library/alpine:v1.0</span></span><br><span class="line">命令对应解释：</span><br><span class="line">alpine:latest   我们前面下载的镜像</span><br><span class="line">192.168.0.143:80  私有镜像仓库IP及端口</span><br><span class="line">library：私有仓库项目名称</span><br><span class="line">alpine:镜像名称</span><br><span class="line">v1.0:版本号</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># docker images </span></span><br><span class="line">REPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">quay.mirrors.ustc.edu.cn/brancz/kube-rbac-proxy     v0.6.0              805578441b3f        3 months ago        42.3MB</span><br><span class="line">192.168.0.143:80/library/alpine                        latest              a24bb4013296        3 months ago        5.57MB</span><br><span class="line">alpine                                              latest              a24bb4013296        3 months ago        5.57MB</span><br><span class="line">fanux/lvscare                                       latest              5b6ef5a251c5        5 months ago        360MB</span><br><span class="line">k8s.gcr.io/kube-proxy                               v1.18.0             43940c34f24f        6 months ago        117MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager                  v1.18.0             d3e55153f52f        6 months ago        162MB</span><br><span class="line">k8s.gcr.io/kube-scheduler                           v1.18.0             a31f78c7c8ce        6 months ago        95.3MB</span><br><span class="line">k8s.gcr.io/kube-apiserver                           v1.18.0             74060cea7f70        6 months ago        173MB</span><br><span class="line">k8s.gcr.io/pause                                    3.2                 80d28bedfe5d        7 months ago        683kB</span><br><span class="line">k8s.gcr.io/coredns                                  1.6.7               67da37a9a360        7 months ago        43.8MB</span><br><span class="line">k8s.gcr.io/etcd                                     3.4.3-0             303ce5db0e90        11 months ago       288MB</span><br><span class="line">calico/node                                         v3.8.2              11cd78b9e13d        13 months ago       189MB</span><br><span class="line">calico/cni                                          v3.8.2              c71c24a0b1a2        13 months ago       157MB</span><br><span class="line">calico/kube-controllers                             v3.8.2              de959d4e3638        13 months ago       46.8MB</span><br><span class="line">calico/pod2daemon-flexvol                           v3.8.2              96047edc008f        13 months ago       9.37MB</span><br><span class="line">quay.mirrors.ustc.edu.cn/prometheus/node-exporter   v0.18.1             e5a616e4b9cf        15 months ago       22.9MB</span><br></pre></td></tr></table></figure><p>12、登陆本地镜像仓库,输入对应的Harbor账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker login http://192.168.0.143:80</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>13、推送镜像到私有仓库Harbor</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker push 192.168.0.143:80/library/alpine:v1.0 </span></span><br><span class="line">The push refers to repository [192.168.0.143:80/library/alpine]</span><br><span class="line">50644c29ef5a: Pushed </span><br><span class="line">latest: digest: sha256:a15790640a6690aa1730c38cf0a440e2aa44aaca9b0e8931a9f2b0d7cc90fd65 size: 528</span><br></pre></td></tr></table></figure><p>14、Harbor web界面查看，如下图所示</p><img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor03.png" class title="This is an jenkins image"><p>15、配置Harbor开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="comment">#harbor start</span></span><br><span class="line"><span class="built_in">cd</span> /root/harbor &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><p>16、备份与恢复<br>由于上面所说到data_volume: /data，也就说明Harbor镜像存放在/data目录如下可以看到上面所上传的镜像名称alpine：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@system ~]<span class="comment"># ls /data/registry/docker/registry/v2/repositories/library/</span></span><br><span class="line">alpine</span><br><span class="line"></span><br><span class="line">也就说明若要备份可以直接备份此目录/data/registry即可</span><br><span class="line">当需要恢复时，把配置文件data_volume配置到对应目录即可</span><br></pre></td></tr></table></figure><p>17、注意事项<br>公开的项目，推送镜像时，docker必须要登录。</p><p>下载镜像时，无须登录。</p><p>非公开项目，下载和推送，必须docker登录才行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos_Harbor环境搭建及使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
      <category term="Linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus+Grafana搭建部署</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-19T03:29:33.000Z</published>
    <updated>2020-09-21T08:52:29.887Z</updated>
    
    <content type="html"><![CDATA[<p>Prometheus+Grafana搭建部署</p><a id="more"></a><hr><p>1、Prometheus简介<br>Prometheus受启发于Google的Brogmon监控系统（相似的Kubernetes是从Google的Brog系统演变而来），从2012年开始由前Google工程师在Soundcloud以开源软件的形式进行研发，并且于2015年早期对外发布早期版本。<br>2016年5月继Kubernetes之后成为第二个正式加入CNCF基金会的项目，同年6月正式发布1.0版本。2017年底发布了基于全新存储层的2.0版本，能更好地与容器平台、云平台配合。<br>2、由于有集成的，那我这边就直接使用集成开源的kube-prometheus<br>kube-prometheus是coreos的一个开源项目，用于监控kubernetes集群,开源链接如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;prometheus-operator&#x2F;kube-prometheus</span><br></pre></td></tr></table></figure><p>3、安装git，用于克隆kube-prometheus相关项目到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>4、克隆kube-prometheus项目到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coreos/kube-prometheus</span><br></pre></td></tr></table></figure><p>5、由于默认源为国外，则修改国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> setup/prometheus-operator-deployment.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> prometheus-prometheus.yaml </span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> alertmanager-alertmanager.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> kube-state-metrics-deployment.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> node-exporter-daemonset.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> prometheus-adapter-deployment.yaml</span><br></pre></td></tr></table></figure><p>6、修改alertmanager-service.yaml文件，对应添加nodePort: 30093放通外网访问，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi alertmanager-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    alertmanager: main</span><br><span class="line">  name: alertmanager-main</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9093</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30093</span><br><span class="line">  selector:</span><br><span class="line">    alertmanager: main</span><br><span class="line">    app: alertmanager</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure><p>7、修改grafana-service.yaml文件，对应添加nodeport 32000放通外网访问，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi grafana-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 3000</span><br><span class="line">    targetPort: http</span><br><span class="line">    nodePort: 32000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br></pre></td></tr></table></figure><p>8、修改prometheus-service.yaml文件，对应添加nodeport 30090放通外网访问，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi prometheus-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  name: prometheus-k8s</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9090</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure><p>9、安装CRD和prometheus-operator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl apply -f setup/</span></span><br></pre></td></tr></table></figure><p>10、安装prometheus, alertmanager, grafana, kube-state-metrics, node-exporter等资源,注意最后有个.表示当前目录（即：/root/kube-prometheus/manifests）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl apply -f .</span></span><br></pre></td></tr></table></figure><p>11、由于执行安装时间比较久，需要拉取镜像，然后查看对应命名空间的pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl get pod -n monitoring </span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">alertmanager-main-0                    2/2     Running   0          2d17h</span><br><span class="line">alertmanager-main-1                    2/2     Running   0          2d17h</span><br><span class="line">alertmanager-main-2                    2/2     Running   0          2d17h</span><br><span class="line">grafana-86445dccbb-6gtsd               1/1     Running   0          2d17h</span><br><span class="line">kube-state-metrics-6cdc84dbd9-v9nqv    3/3     Running   0          2d17h</span><br><span class="line">node-exporter-7sx5t                    2/2     Running   0          2d17h</span><br><span class="line">node-exporter-9pgzj                    2/2     Running   0          2d17h</span><br><span class="line">node-exporter-wk6t8                    2/2     Running   0          2d17h</span><br><span class="line">prometheus-adapter-66b855f564-m94zn    1/1     Running   0          2d17h</span><br><span class="line">prometheus-k8s-0                       3/3     Running   1          2d17h</span><br><span class="line">prometheus-k8s-1                       3/3     Running   1          2d17h</span><br><span class="line">prometheus-operator-788d4c7c74-fbjn4   2/2     Running   0          2d18h</span><br></pre></td></tr></table></figure><p>若查看状态status有显示ERR字眼，则需要执行下面查看对应错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe prometheus-k8s-0 -n monitoring</span><br></pre></td></tr></table></figure><p>或者直接执行删除，然后再执行上面apply命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f .</span><br></pre></td></tr></table></figure><p>12、查看prometheus、grafana服务端口，正常为上面修改的nodeport</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl get -n monitoring svc</span></span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">alertmanager-main       NodePort    10.109.50.168    &lt;none&gt;        9093:30093/TCP               2d17h</span><br><span class="line">alertmanager-operated   ClusterIP   None             &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP   2d17h</span><br><span class="line">grafana                 NodePort    10.108.51.131    &lt;none&gt;        3000:32000/TCP               2d17h</span><br><span class="line">kube-state-metrics      ClusterIP   None             &lt;none&gt;        8443/TCP,9443/TCP            2d17h</span><br><span class="line">node-exporter           ClusterIP   None             &lt;none&gt;        9100/TCP                     2d17h</span><br><span class="line">prometheus-adapter      ClusterIP   10.98.108.128    &lt;none&gt;        443/TCP                      2d17h</span><br><span class="line">prometheus-k8s          NodePort    10.108.163.187   &lt;none&gt;        9090:30090/TCP               2d17h</span><br><span class="line">prometheus-operated     ClusterIP   None             &lt;none&gt;        9090/TCP                     2d17h</span><br><span class="line">prometheus-operator     ClusterIP   None             &lt;none&gt;        8443/TCP                     2d18h</span><br></pre></td></tr></table></figure><p>13、访问对应prometheus服务，IP+端口模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.12:30090</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_01.png" class title="This is an jenkins image"><p>14、访问对应Alertmanager服务，IP+端口模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.12:30093</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_02.png" class title="This is an jenkins image"><p>15、访问对应grafana服务，IP+端口模式，默认账号，密码为admin,首次登陆需要更改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.12:32000</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_03.png" class title="This is an jenkins image"><p>16、登陆成功后，默认会有个prometheus数据源，若没有手动添加即可</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_04.png" class title="This is an jenkins image"><p>17、使用Grafana可视化展示Prometheus监控数据<br>推荐模板： 也就是在grafana共享中心里面的，也就是别人写的模版上传到这里库里面的，自己也可以写，写完上传上去，<br>别人也可以访问到，下面是模版的id,只要获取这个ID，就能使用这个模版了，只要这个模版，后端提供执行promeQL,只要有数据就能帮你展示出来<br>Grafana.com<br>• 集群资源监控：3119<br>• 资源状态监控 ：6417<br>• Node监控 ：9276<br>18、下面添加监控模板<br>1）集群资源监控：3119，选择web界面+然后点击import，输入3119，点击Load,重新命名为Kubernetes资源管理，再点击Import即可</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119.png" class title="This is an jenkins image"><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_01.png" class title="This is an jenkins image"><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_02.png" class title="This is an jenkins image"><p>上图看到Cluster filesystem usage 没数据，则直接点击，出现Edit然后按照下面对应更改即可</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_03.png" class title="This is an jenkins image"><p>2）其它就不一一添加展示，按照上面方式配置即可，下面展示对应监控图<br>集群资源监控：3119</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_06.png" class title="This is an jenkins image"><p>资源状态监控 ：6417</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_07.png" class title="This is an jenkins image"><p>Node监控 ：9276</p><img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_08.png" class title="This is an jenkins image"><p>19、小结：<br>所以有了这些监控，基本上就能了解k8s的基本资源的使用状态了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prometheus+Grafana搭建部署&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="K8s" scheme="https://github.com/Piouscc/rz168.io.git/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes-dashboard部署</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-16T09:25:32.000Z</published>
    <updated>2020-09-16T13:26:13.265Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes-dashboard部署</p><a id="more"></a><hr><p>1、简介<br>Kubernetes-dashboard是Kubernetes集群的基于Web的通用UI。它允许用户管理集群中运行的应用程序并对其进行故障排除，以及管理集群本身。<br>2、安装,执行下面这条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span></span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br><span class="line">若提示下面错误</span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br><span class="line">编辑/etc/hosts,添加下面内容，再重新执行</span><br><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>3、若发现上面链接失效或其它问题，请访问下面github链接，获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/kubernetes/dashboard</span><br></pre></td></tr></table></figure><p>4、查看创建的服务和pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard get pods</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-6b4884c9d5-dpb94   1/1     Running   0          110m</span><br><span class="line">kubernetes-dashboard-7b544877d5-mxpdr        1/1     Running   0          110m</span><br></pre></td></tr></table></figure><p>5、修改配置，让外网访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard patch svc kubernetes-dashboard -p '&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span></span><br><span class="line">service/kubernetes-dashboard patched</span><br></pre></td></tr></table></figure><p>6、查看外网访问映射对应端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard get svc</span></span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.99.247.200   &lt;none&gt;        8000/TCP        112m</span><br><span class="line">kubernetes-dashboard        NodePort    10.109.33.119   &lt;none&gt;        443:30356/TCP   112m</span><br></pre></td></tr></table></figure><p>7、获取secret中的token</p><img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard_02.png" class title="This is an jenkins image"><p>8、访问dashboard，浏览器输入<a href="https://masterIP:30356，这里建议使用火狐浏览器，">https://masterIP:30356，这里建议使用火狐浏览器，</a><br>同时首次访问时，会阻拦你，所以你需要继续访问，然后选择验证方式时，会有kubeconfig和令牌两种方式</p><img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard.png" class title="This is an jenkins image"><p>9、然后我们选择令牌（第6步获取到的token）,点击登陆，成功后的界面如下：</p><img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard_01.png" class title="This is an jenkins image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes-dashboard部署&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="K8s" scheme="https://github.com/Piouscc/rz168.io.git/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群简单安装</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/16/Kubernetes%E9%9B%86%E7%BE%A4%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/16/Kubernetes%E9%9B%86%E7%BE%A4%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-16T08:25:00.000Z</published>
    <updated>2020-09-16T13:00:41.866Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes集群简单安装</p><a id="more"></a><hr><p>1、Kubernetes 是什么<br>Kubernetes是当今最流行的开源容器管理平台，它就是大名鼎鼎的Google Borg的开源版本。Google在2014年推出了Kubernetes<br>2、由于用于学习测试，则用最简单的方法部署最小集群方案,sealos部署方式，(不建议用于生产)<br>3、服务器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 服务器name | IP |  配置 | </span><br><span class="line">| master | 192.168.0.12  |2C4G  |</span><br><span class="line">| node01 | 192.168.0.13  | 2C4G |</span><br><span class="line">| node02 | 192.168.0.17  | 2C4G |</span><br></pre></td></tr></table></figure><p>4、设置系统初始化，如：硬盘划分、免密登陆、关闭swap、关闭防火墙等等<br>5、下载并安装sealos，由于sealos是个golang的二进制工具，直接下载拷贝到bin目录,然后配置可执行权限即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/latest/sealos &amp;&amp; \</span><br><span class="line">    chmod +x sealos &amp;&amp; mv sealos /usr/bin</span><br></pre></td></tr></table></figure><p>6、下载对应资源包,版本为v1.18</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/7b6af025d4884fdd5cd51a674994359c-1.18.0/kube1.18.0.tar.gz</span><br></pre></td></tr></table></figure><p>7、部署集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">此方法是部署3master,1node:</span><br><span class="line">sealos init --passwd 123456 \</span><br><span class="line">--master 192.168.0.2  --master 192.168.0.3  --master 192.168.0.4  \</span><br><span class="line">--node 192.168.0.5 \</span><br><span class="line">--pkg-url /root/kube1.18.0.tar.gz \</span><br><span class="line">--version v1.18.0</span><br><span class="line">下面这个方法则是部署一master,两个node，这里用的是密码形式，如果需要用到密钥则把--passwd 1 换成--pk /root/.ssh/id_rsa（私钥地址）</span><br><span class="line">sealos init --passwd 1 \</span><br><span class="line">--master 192.168.0.12  \</span><br><span class="line">--node 192.168.0.13 --node 192.168.0.17 \</span><br><span class="line">--pkg-url /root/kube1.18.0.tar.gz \</span><br><span class="line">--version v1.18.0</span><br></pre></td></tr></table></figure><p>8、查看是否可安装正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   5h53m   v1.18.0</span><br><span class="line">node01   Ready    &lt;none&gt;   5h53m   v1.18.0</span><br><span class="line">node02   Ready    &lt;none&gt;   5h53m   v1.18.0</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod --all-namespaces </span></span><br><span class="line">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system            calico-kube-controllers-84445dd79f-dzg66     1/1     Running   0          5h53m</span><br><span class="line">kube-system            calico-node-92s4l                            1/1     Running   0          5h53m</span><br><span class="line">kube-system            calico-node-cv2fw                            1/1     Running   1          5h53m</span><br><span class="line">kube-system            calico-node-mpcf5                            1/1     Running   0          5h53m</span><br><span class="line">kube-system            coredns-66bff467f8-2t6jt                     1/1     Running   0          5h53m</span><br><span class="line">kube-system            coredns-66bff467f8-64mn4                     1/1     Running   0          5h53m</span><br><span class="line">kube-system            etcd-master                                  1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-apiserver-master                        1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-controller-manager-master               1/1     Running   1          5h53m</span><br><span class="line">kube-system            kube-proxy-s2rgm                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-proxy-szq9g                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-proxy-w4dl2                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-scheduler-master                        1/1     Running   1          5h53m</span><br><span class="line">kube-system            kube-sealyun-lvscare-node01                  1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-sealyun-lvscare-node02                  1/1     Running   0          5h53m</span><br></pre></td></tr></table></figure><p>9、安装命令补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><p>10、到这里k8s简单部署方案就已经完成了，如果需要安装Kubernetes-dashboard,请访问下一篇《Kubernetes-dashboard部署》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes集群简单安装&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="K8s" scheme="https://github.com/Piouscc/rz168.io.git/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>docker-swarm集群创建及简单部署服务</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/09/08/docker-swarm%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/09/08/docker-swarm%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-09-08T05:53:29.000Z</published>
    <updated>2020-09-08T06:55:01.988Z</updated>
    
    <content type="html"><![CDATA[<p>Docker-swarm集群创建及简单部署服务<br> <a id="more"></a><br>1、基本概念<br>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。<br>2、原理<br>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成。<br>swarm mananger：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。<br>work node：即图中的 available node，主要负责运行相应的服务来执行任务（task）。</p><img src="/rz168.io/2020/09/08/docker-swarm%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/docker_swarm.png" class title="This is an jenkins image"><p>3、服务器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 配置信息 | hostname | IP |</span><br><span class="line">| 4C8G | vm01 | 192.168.0.32 |</span><br><span class="line">| 4C8G | vm02 | 192.168.0.16 |</span><br></pre></td></tr></table></figure><p>4、初始化集群,注意初始化的前提是需要安装docker服务，提示下面内容，则证明集群初始化成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker swarm init --advertise-addr 192.168.0.32</span></span><br><span class="line">Swarm initialized: current node (ohrz9nw5t5v1y1y7j765x1poj) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-47cqr2h4jksb1ww877fjd5wohi5qoylftw3wc72rtuhp0az8sl-f087ypkdubuiad5ewlstubaaz 192.168.0.32:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p>5、根据上面初始化集群得出的信息，增加工作节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vm02 ~]<span class="comment"># docker swarm join --token SWMTKN-1-47cqr2h4jksb1ww877fjd5wohi5qoylftw3wc72rtuhp0az8sl-f087ypkdubuiad5ewlstubaaz 192.168.0.32:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p>6、在管理节点上查看集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">ohrz9nw5t5v1y1y7j765x1poj *   vm01                Ready               Active              Leader              19.03.12</span><br><span class="line">vuyrpzemdlmxt4jhe8fe1ocvb     vm02                Ready               Active                                  19.03.12</span><br></pre></td></tr></table></figure><p>7、部署3个nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service create --replicas 3 -p 80:80 --name nginx nginx:1.13.7-alpine</span></span><br><span class="line">ok1g9lldpsrtfbozt64xb1j0w</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>8、使用 docker service ls 来查看当前 Swarm 集群运行的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                 PORTS</span><br><span class="line">ok1g9lldpsrt        nginx               replicated          3/3                 nginx:1.13.7-alpine   *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure><p>9、使用 docker service ps 来查看某个服务的详情</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service ps nginx</span></span><br><span class="line">ID                  NAME                IMAGE                 NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">qi4xswuy6td3        nginx.1             nginx:1.13.7-alpine   vm02                Running             Running about a minute ago                       </span><br><span class="line">z9fhx7rsesbt        nginx.2             nginx:1.13.7-alpine   vm01                Running             Running about a minute ago                       </span><br><span class="line">s7dscxvta7cf        nginx.3             nginx:1.13.7-alpine   vm02                Running             Running about a minute ago</span><br></pre></td></tr></table></figure><p>10、当我们的业务处于高峰期时，我们可以使用（docker service scale nginx=x）扩展服务运行的容器数量。<br>当业务平稳时可以适当减少服务容量数量x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service scale nginx=5</span></span><br><span class="line">nginx scaled to 5</span><br><span class="line">overall progress: 5 out of 5 tasks </span><br><span class="line">1/5: running   [==================================================&gt;] </span><br><span class="line">2/5: running   [==================================================&gt;] </span><br><span class="line">3/5: running   [==================================================&gt;] </span><br><span class="line">4/5: running   [==================================================&gt;] </span><br><span class="line">5/5: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>11、删除服务-使用 docker service rm 来从 Swarm 集群移除某个服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment">#  docker service rm nginx</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker-swarm集群创建及简单部署服务&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Jumpserver日常使用</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-21T07:33:10.000Z</published>
    <updated>2020-09-09T10:18:53.882Z</updated>
    
    <content type="html"><![CDATA[<p>Jumpserver日常使用</p><a id="more"></a><p>上一篇已经为大家简单介绍了Jumpserver的安装部署，下面就继续为大家介绍Jumpserver的日常使用<br>1、浏览器上输入Jumpserver对应的IP或域名，这边直接IP访问：<a href="http://192.168.0.32:8080,显示下面图片">http://192.168.0.32:8080,显示下面图片</a></p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_01.png" class title="This is an jenkins image"><p>2、键入账号密码，因为是测试所以使用默认的admin，登陆成功的界面如下</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_02.png" class title="This is an jenkins image"><p>3、配置系统设置，如：基本设置、邮件设置以及安全设置，这里主要配置邮件设置，因为在创建用户的时候，会发邮件给用户去对应设置账号密码</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_03.png" class title="This is an jenkins image"><p>4、创建用户组及用户</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_04.png" class title="This is an jenkins image"><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_05.png" class title="This is an jenkins image"><p>5、创建成功后，如果邮件及邮箱正确会收到如下邮件信息</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_06.png" class title="This is an jenkins image"><p>6、创建管理用户（资产管理————&gt;管理用户）</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_07.png" class title="This is an jenkins image"><p>7、创建系统用户（资产管理————&gt;系统用户），这里为了安全自动生成密钥</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_08.png" class title="This is an jenkins image"><p>8、添加资产即服务器（资产管理————&gt;资产列表）</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_09.png" class title="This is an jenkins image"><p>9、正常添加资产（服务器），会显示类似下面图，显示对应服务器配置</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_10.png" class title="This is an jenkins image"><p>10、同时可以在（作业中心————&gt;任务列表)看到对就操作记录</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_11.png" class title="This is an jenkins image"><p>11、对应用户资产授权（权限管理————&gt;资产授权），对应按需选择，当用户登陆jumpserver_web时可以到对应资产。</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_12.png" class title="This is an jenkins image"><p>12、测试连接（会话管理————&gt;web终端），配置正确正常显示下方图，如果不是则看看授权管理是否配置正确</p><img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_13.png" class title="This is an jenkins image"><p>13、到这里Jumpserver资产配置流程已经完成，日常使用也差不多如此，剩下的慢慢摸索吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jumpserver日常使用&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Jumpserver安装</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-21T06:38:38.000Z</published>
    <updated>2020-08-21T07:08:18.418Z</updated>
    
    <content type="html"><![CDATA[<p>Jumpserver安装<br> <a id="more"></a><br>1、Jumpserver总体介绍<br>JumpServer 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协议, 是符合 4A 的专业运维审计系统。<br>JumpServer 使用 Python / Django 进行开发, 遵循 Web 2.0 规范, 配备了业界领先的 Web Terminal 解决方案, 交互界面美观、用户体验好。<br>JumpServer 采纳分布式架构, 支持多机房跨区域部署, 中心节点提供 API, 各机房部署登录节点, 可横向扩展、无并发访问限制。<br>JumpServer 现已支持管理 SSH、 Telnet、 RDP、 VNC 协议资产。<br>2、引入<br>为了保证服务器安全，加个堡垒机，所有ssh连接都通过堡垒机来完成，堡垒机也需要有身份认证，授权，访问控制，审计等功能。<br>3、优点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开源: 零门槛，线上快速获取和安装；</span><br><span class="line">分布式: 轻松支持大规模并发访问；</span><br><span class="line">无插件: 仅需浏览器，极致的 Web Terminal 使用体验；</span><br><span class="line">多云支持: 一套系统，同时管理不同云上面的资产；</span><br><span class="line">云端存储: 审计录像云端存储，永不丢失；</span><br><span class="line">多租户: 一套系统，多个子公司和部门同时使用。</span><br></pre></td></tr></table></figure><p>4、服务器配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">硬件配置: 2个CPU核心, 4G 内存, 50G 硬盘（最低）</span><br><span class="line">操作系统: Linux 发行版 x86_64</span><br></pre></td></tr></table></figure><p>5、部署，为了方便以及避免烦锁步骤，这里才用docker-compose的方式安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jumpserver/Dockerfile.git</span><br><span class="line"><span class="built_in">cd</span> Dockerfile</span><br><span class="line">cat .env</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>6、更改对应密码以及端口等,根据自己实际更改即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 jump_dockerfile]<span class="comment"># vi  .env </span></span><br><span class="line"><span class="comment"># 版本号可以自己根据项目的版本修改</span></span><br><span class="line">Version=2.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=3367</span><br><span class="line">DB_USER=jumpserver</span><br><span class="line">DB_PASSWORD=jumserver528</span><br><span class="line">DB_NAME=jumpserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis</span></span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">REDIS_PASSWORD=jumserver528</span><br><span class="line"></span><br><span class="line"><span class="comment"># Core</span></span><br><span class="line">SECRET_KEY=B3f2w8P2PfxIAS7s4UdffdYmSbtqX4vXdPUL217kL9XPUOWrmy</span><br><span class="line">BOOTSTRAP_TOKEN=7Q11Vz6RsdsBLAdO</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># SECRET_KEY 保护签名数据的密匙, 首次安装请一定要修改并牢记, 后续升级和迁移不可更改, 否则将导致加密的数据不可解密。</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN 为组件认证使用的密钥, 仅组件注册时使用。组件指 koko、guacamole</span></span><br></pre></td></tr></table></figure><p>7、部署jumpserver,前提需要先安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>8、查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@vm01 jump_dockerfile]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">28de4d1c451b        jumpserver/jms_nginx:2.1.0       <span class="string">"nginx -g 'daemon of…"</span>   3 weeks ago         Up 3 weeks          0.0.0.0:80-&gt;80/tcp      jms_nginx</span><br><span class="line">aaf5d8c881f6        jumpserver/jms_guacamole:2.1.0   <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_guacamole</span><br><span class="line">071c62d5ff2b        jumpserver/jms_koko:2.1.0        <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks          0.0.0.0:2222-&gt;2222/tcp   jms_koko</span><br><span class="line">a5709a44b1d3        jumpserver/jms_core:2.1.0        <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_core</span><br><span class="line">85ad0f1d4ad1        jumpserver/jms_redis:2.1.0       <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_redis</span><br><span class="line">c83069aa41a9        jumpserver/jms_mysql:2.1.0       <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_mysql</span><br></pre></td></tr></table></figure><p>9、进入jumpserver  web界面在浏览器上输入<a href="http://localhost,默认管理员账户" target="_blank" rel="noopener">http://localhost,默认管理员账户</a> admin 密码 admin</p><img src="/rz168.io/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/jumpserver_01.png" class title="This is an jenkins image"><p>10、登陆成功后的界面</p><img src="/rz168.io/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/jumpserver_02.png" class title="This is an jenkins image"><p>11、到此jumpserver的初始安装就完成了，下一篇将进入jumpserver的使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jumpserver安装&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>svn迁移</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/08/11/svn%E8%BF%81%E7%A7%BB/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/08/11/svn%E8%BF%81%E7%A7%BB/</id>
    <published>2020-08-11T10:45:49.000Z</published>
    <updated>2020-08-12T03:05:31.526Z</updated>
    
    <content type="html"><![CDATA[<p>记——&gt;svn迁移</p><a id="more"></a><p>由于把主要项目从svn迁移到git，现在需要把剩一些次要的项目迁移到其它服务器上，则记之<br>迁移流程：<br>    1）临时免密（因为需要传输文件）<br>    2）新服务器需要提前安装svn，建议直接yum<br>1、新服务器安装svn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure><p>2、创建相关目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/svn_dir</span><br></pre></td></tr></table></figure><p>3、原服务器svn导出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/svn_dir/</span><br><span class="line">svnadmin dump sdksvn/ &gt;sdksvn.dump</span><br></pre></td></tr></table></figure><p>4、把导出来的文件传输到新服务器对应目录下（需要提前做好免密登陆）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp sdksvn.dump xxx.xxx.xxx.xxx:/data/svn_dir   <span class="comment">#此处xxx代表IP地址</span></span><br></pre></td></tr></table></figure><p>5、恢复svn数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/svn_dir</span><br><span class="line">svnadmin load /data/svn_dir/sdksvn &lt; sdksvn.dump</span><br></pre></td></tr></table></figure><p>6、这里需要注一个点就是：导出导入的只是数据，并不会把原来的用户及用户密码导进新服务器，<br>需要手动把conf里面的文件复制打包一份到新服务器对应项目下的文件夹</p><p>7、启动svn服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su svn -c <span class="string">"svnserve -d --listen-port 1167 -r /data/svn_dir/sdksvn/"</span>   <span class="comment">#指定端口的方式</span></span><br><span class="line">su svn -c <span class="string">"svnserve -d -r /data/svn_dir/sdksvn/"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记——&amp;gt;svn迁移&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统调优</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/08/11/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/08/11/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/</id>
    <published>2020-08-11T06:18:00.000Z</published>
    <updated>2020-08-11T06:22:19.982Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统调优</p><a id="more"></a><p>在很多情况下，我们拿到的服务器，第一步肯定是调优，安装依赖等等<br>1、内核调优</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.conf.all.forwarding=1</span><br><span class="line">net.ipv4.neigh.default.gc_thresh1=4096</span><br><span class="line">net.ipv4.neigh.default.gc_thresh2=6144</span><br><span class="line">net.ipv4.neigh.default.gc_thresh3=8192</span><br><span class="line">net.ipv4.neigh.default.gc_interval=60</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time=120</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考 https://github.com/prometheus/node_exporter#disabled-by-default</span></span><br><span class="line">kernel.perf_event_paranoid=-1</span><br><span class="line"></span><br><span class="line"><span class="comment">#sysctls for k8s node config</span></span><br><span class="line">net.ipv4.tcp_slow_start_after_idle=0</span><br><span class="line">net.core.rmem_max=16777216</span><br><span class="line">fs.inotify.max_user_watches=524288</span><br><span class="line">kernel.softlockup_all_cpu_backtrace=1</span><br><span class="line"></span><br><span class="line">kernel.softlockup_panic=0</span><br><span class="line"></span><br><span class="line">kernel.watchdog_thresh=30</span><br><span class="line">fs.file-max=2097152</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_queued_events=16384</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">fs.may_detach_mounts=1</span><br><span class="line">net.core.netdev_max_backlog=16384</span><br><span class="line">net.ipv4.tcp_wmem=4096 12582912 16777216</span><br><span class="line">net.core.wmem_max=16777216</span><br><span class="line">net.core.somaxconn=32768</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog=8096</span><br><span class="line">net.ipv4.tcp_rmem=4096 12582912 16777216</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6=1</span><br><span class="line"></span><br><span class="line">kernel.yama.ptrace_scope=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以控制core文件的文件名中是否添加pid作为扩展。</span></span><br><span class="line">kernel.core_uses_pid=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not accept source routing</span></span><br><span class="line">net.ipv4.conf.default.accept_source_route=0</span><br><span class="line">net.ipv4.conf.all.accept_source_route=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Promote secondary addresses when the primary address is removed</span></span><br><span class="line">net.ipv4.conf.default.promote_secondaries=1</span><br><span class="line">net.ipv4.conf.all.promote_secondaries=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hard and soft link protection</span></span><br><span class="line">fs.protected_hardlinks=1</span><br><span class="line">fs.protected_symlinks=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源路由验证</span></span><br><span class="line"><span class="comment"># see details in https://help.aliyun.com/knowledge_detail/39428.html</span></span><br><span class="line">net.ipv4.conf.all.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce=2</span><br><span class="line">net.ipv4.conf.all.arp_announce=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># see details in https://help.aliyun.com/knowledge_detail/41334.html</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets=5000</span><br><span class="line">net.ipv4.tcp_syncookies=1</span><br><span class="line">net.ipv4.tcp_fin_timeout=30</span><br><span class="line">net.ipv4.tcp_synack_retries=2</span><br><span class="line">kernel.sysrq=1</span><br></pre></td></tr></table></figure><p>2、nofile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统调优&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker-network问题</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/07/29/Docker-network%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/07/29/Docker-network%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-29T10:16:24.000Z</published>
    <updated>2020-07-29T10:33:06.599Z</updated>
    
    <content type="html"><![CDATA[<p>记一次Docker-network问题<br> <a id="more"></a><br>由于测试环境是用docker-compose，yml如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">    mariadb:</span><br><span class="line">        image: mariadb</span><br><span class="line">        ports:</span><br><span class="line">          - xxxx:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - ./conf/db/utf8.cnf:/etc/mysql/conf.d/utf8.cnf</span><br><span class="line">            - ./conf/db/sql:/docker-entrypoint-initdb.d</span><br><span class="line">            - ./data/db/:/var/lib/mysql/*</span><br><span class="line">        networks:</span><br><span class="line">         - brenk</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: <span class="string">"123456"</span></span><br><span class="line">        container_name: xxxx_db</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">    brenk:</span><br></pre></td></tr></table></figure><p>每跑一次发现都会生成一个自定义网络，由于Docker 默认支持 30 个不同的自定义 bridge 网络<br>如果超过这个限制，就会提示下面的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</span><br></pre></td></tr></table></figure><p>可以使用命令docker network ls来查看你创建的网络，然后通过命令docker network prune来移除没有使用的网络。<br>但是这样问题很快就会重复出现，所以更倾向用下面这个方法处理这个问题<br>将所有的项目加入到同一个自定义网络当中以节省自定义网络的数量<br>在对应服务器上创建docker自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create db-network --driver bridge</span><br></pre></td></tr></table></figure><p>同时修改一下docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">    mariadb:</span><br><span class="line">        image: mariadb</span><br><span class="line">        ports:</span><br><span class="line">          - xxxx:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - ./conf/db/utf8.cnf:/etc/mysql/conf.d/utf8.cnf</span><br><span class="line">            - ./conf/db/sql:/docker-entrypoint-initdb.d</span><br><span class="line">            - ./data/db/:/var/lib/mysql/*</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: <span class="string">"123456"</span></span><br><span class="line">        container_name: xxxx_db</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line"> default:</span><br><span class="line">  external:</span><br><span class="line">   name: db-network</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次Docker-network问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mongodb副本集群搭建</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/07/27/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/07/27/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2020-07-27T08:38:59.000Z</published>
    <updated>2020-10-19T07:33:49.551Z</updated>
    
    <content type="html"><![CDATA[<p>Mongodb副本集群搭建</p><a id="more"></a><p>Mongodb副本集介绍<br>MongoDB复制是将数据同步在多个服务器的过程。<br>复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。<br>复制还允许您从硬件故障和服务中断中恢复数据。</p><p>服务器信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodb01   192.168.0.32</span><br><span class="line">mongodb02   192.168.0.16</span><br><span class="line">mongodb03   192.168.0.23</span><br></pre></td></tr></table></figure><p>1、分别在三台服务器上安装mongodb，安装教程可访问上一篇文章<br>2、先要配置三台免密互通,配置防火墙放通对应端口，这里为了简单就直接关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id mongodb01</span><br><span class="line">ssh-copy-id mongodb02</span><br><span class="line">ssh-copy-id mongodb03</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop iptables</span><br></pre></td></tr></table></figure><p>3、启动Mongodb服务,三台服务器分别执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongod -f /usr/<span class="built_in">local</span>/mongodb-4.2.8/mongo.conf --replSet=rs0    <span class="comment">#--replSet=rs0 表示副本集名称为rs0</span></span><br></pre></td></tr></table></figure><p>3、配置集群，三台服务器其中一台执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongo</span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">     &#123;  _id : <span class="string">"rs0"</span>,</span><br><span class="line">            members: [</span><br><span class="line">                &#123; _id: 0, host: <span class="string">"192.168.0.32:27017"</span> &#125;,</span><br><span class="line">                &#123; _id: 1, host: <span class="string">"192.168.0.16:27017"</span> &#125;,</span><br><span class="line">                &#123; _id: 2, host: <span class="string">"192.168.0.23:27017"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&gt;rs.status()</span><br><span class="line"></span><br><span class="line">例如现在需要增加多一台副本集，则执行以下命令即可</span><br><span class="line">rs.add(<span class="string">"serverC"</span>)</span><br><span class="line">删除或者重新配置</span><br><span class="line">rs.remove(<span class="string">"serverB"</span>)</span><br></pre></td></tr></table></figure><p>4、查看副本集配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">rs0:SECONDARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"set"</span> : <span class="string">"rs0"</span>,</span><br><span class="line"><span class="string">"date"</span> : ISODate(<span class="string">"2020-07-27T07:20:58.684Z"</span>),</span><br><span class="line"><span class="string">"myState"</span> : 2,</span><br><span class="line"><span class="string">"term"</span> : NumberLong(4),</span><br><span class="line"><span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceId"</span> : 2,</span><br><span class="line"><span class="string">"heartbeatIntervalMillis"</span> : NumberLong(2000),</span><br><span class="line"><span class="string">"majorityVoteCount"</span> : 2,</span><br><span class="line"><span class="string">"writeMajorityCount"</span> : 2,</span><br><span class="line"><span class="string">"optimes"</span> : &#123;</span><br><span class="line"><span class="string">"lastCommittedOpTime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lastCommittedWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line"><span class="string">"readConcernMajorityOpTime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"readConcernMajorityWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line"><span class="string">"appliedOpTime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"durableOpTime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lastAppliedWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line"><span class="string">"lastDurableWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lastStableRecoveryTimestamp"</span> : Timestamp(1595831721, 289),</span><br><span class="line"><span class="string">"lastStableCheckpointTimestamp"</span> : Timestamp(1595831721, 289),</span><br><span class="line"><span class="string">"electionParticipantMetrics"</span> : &#123;</span><br><span class="line"><span class="string">"votedForCandidate"</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">"electionTerm"</span> : NumberLong(4),</span><br><span class="line"><span class="string">"lastVoteDate"</span> : ISODate(<span class="string">"2020-07-27T06:43:08.481Z"</span>),</span><br><span class="line"><span class="string">"electionCandidateMemberId"</span> : 2,</span><br><span class="line"><span class="string">"voteReason"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"lastAppliedOpTimeAtElection"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 46),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"maxAppliedOpTimeInSet"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 46),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(2)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"priorityAtElection"</span> : 1,</span><br><span class="line"><span class="string">"newTermStartDate"</span> : ISODate(<span class="string">"2020-07-23T16:50:47.439Z"</span>),</span><br><span class="line"><span class="string">"newTermAppliedDate"</span> : ISODate(<span class="string">"2020-07-27T06:43:08.487Z"</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"members"</span> : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : 0,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"192.168.0.32:27017"</span>,</span><br><span class="line"><span class="string">"health"</span> : 1,</span><br><span class="line"><span class="string">"state"</span> : 2,</span><br><span class="line"><span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line"><span class="string">"uptime"</span> : 2277,</span><br><span class="line"><span class="string">"optime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceId"</span> : 2,</span><br><span class="line"><span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"configVersion"</span> : 1,</span><br><span class="line"><span class="string">"self"</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : 1,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"192.168.0.16:27017"</span>,</span><br><span class="line"><span class="string">"health"</span> : 1,</span><br><span class="line"><span class="string">"state"</span> : 2,</span><br><span class="line"><span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line"><span class="string">"uptime"</span> : 1667,</span><br><span class="line"><span class="string">"optime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"optimeDurable"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.941Z"</span>),</span><br><span class="line"><span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-27T07:20:58.070Z"</span>),</span><br><span class="line"><span class="string">"pingMs"</span> : NumberLong(0),</span><br><span class="line"><span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"syncSourceId"</span> : 2,</span><br><span class="line"><span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"configVersion"</span> : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : 2,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line"><span class="string">"health"</span> : 1,</span><br><span class="line"><span class="string">"state"</span> : 1,</span><br><span class="line"><span class="string">"stateStr"</span> : <span class="string">"PRIMARY"</span>,</span><br><span class="line"><span class="string">"uptime"</span> : 2276,</span><br><span class="line"><span class="string">"optime"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"optimeDurable"</span> : &#123;</span><br><span class="line"><span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.688Z"</span>),</span><br><span class="line"><span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.489Z"</span>),</span><br><span class="line"><span class="string">"pingMs"</span> : NumberLong(0),</span><br><span class="line"><span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"syncingTo"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"syncSourceHost"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"syncSourceId"</span> : -1,</span><br><span class="line"><span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line"><span class="string">"electionTime"</span> : Timestamp(1595831721, 47),</span><br><span class="line"><span class="string">"electionDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line"><span class="string">"configVersion"</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"ok"</span> : 1,</span><br><span class="line"><span class="string">"<span class="variable">$clusterTime</span>"</span> : &#123;</span><br><span class="line"><span class="string">"clusterTime"</span> : Timestamp(1595831721, 295),</span><br><span class="line"><span class="string">"signature"</span> : &#123;</span><br><span class="line"><span class="string">"hash"</span> : BinData(0,<span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span>),</span><br><span class="line"><span class="string">"keyId"</span> : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"operationTime"</span> : Timestamp(1595831721, 295)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、三台服务器连接到mongodb，查看本身身份,其中只有一个PRIMARY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongo</span><br><span class="line">rs0:PRIMARY&gt;</span><br><span class="line">rs0:SECONDARY&gt;</span><br><span class="line">rs0:SECONDARY&gt;</span><br></pre></td></tr></table></figure><p>6、三台服务器分别执行查看数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">出现以下错误，则需要执行此命令rs.slaveOk()</span><br><span class="line">2020-07-27T14:56:10.190+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;</span><br><span class="line">或者执行以下操作，让副本服务器可读</span><br><span class="line">find / --name .mongorc.js</span><br><span class="line">一般这个文件为空，直接添加这一行，然后保存退出，再重新连接mongodb就可以发现副本可读</span><br><span class="line">rs.slaveOk()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mongodb副本集群搭建&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="DB" scheme="https://github.com/Piouscc/rz168.io.git/tags/DB/"/>
    
  </entry>
  
</feed>
