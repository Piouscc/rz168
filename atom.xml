<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky</title>
  
  
  <link href="/rz168.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/Piouscc/rz168.io.git/"/>
  <updated>2021-07-01T13:30:16.795Z</updated>
  <id>https://github.com/Piouscc/rz168.io.git/</id>
  
  <author>
    <name>Lucky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grpc安装及使用</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/07/01/grpc%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/07/01/grpc%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-01T10:26:51.000Z</published>
    <updated>2021-07-01T13:30:16.795Z</updated>
    
    <content type="html"><![CDATA[<p>grpc安装及使用<br> <a id="more"></a><br> 1、gRPC概述<br> 在 gRPC 中，客户端应用程序可以直接调用不同机器上的服务器应用程序上的方法，就像它是本地对象一样，使您可以更轻松地创建分布式应用程序和服务。与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以通过参数和返回类型远程调用的方法。在服务器端，服务器实现了这个接口并运行一个 gRPC 服务器来处理客户端调用。在客户端，客户端有一个存根（在某些语言中简称为客户端），它提供与服务器相同的方法。<br> gRPC 客户端和服务器可以在各种环境中运行和相互通信 - 从 Google 内部的服务器到您自己的桌面 - 并且可以用任何 gRPC 支持的语言编写。因此，例如，您可以轻松地使用 Java、Go、Python 或 Ruby 中的客户端创建一个 gRPC 服务器。此外，最新的 Google API 将具有其接口的 gRPC 版本，让您可以轻松地将 Google 功能构建到您的应用程序中。<br> <img src="/rz168.io/2021/07/01/grpc%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/grpc.png" class title="This is an grpc image"><br> 2、安装gRPC对系统及依赖的要求<br> <img src="/rz168.io/2021/07/01/grpc%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/grpc01.png" class title="This is an grpc image"><br> 3、安装gcc-7.3.1<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-7</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-7 bash</span><br><span class="line">gcc --version</span><br><span class="line"></span><br><span class="line">gcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><br> 4、下载gRPC源码<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/grpc/grpc.git</span><br><span class="line"><span class="built_in">cd</span> grpc</span><br></pre></td></tr></table></figure><br> 5、更新第三方源码及编译<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br><span class="line">make</span><br></pre></td></tr></table></figure><br> 6、由于本次实验语言以node.js为主，而且以node启动，则先安装npm及node<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v14.17.1/node-v14.17.1-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v14.17.1-linux-x64.tar.xz</span><br><span class="line">ln -s /root/node-v14.17.1-linux-x64/bin/npm /usr/sbin/</span><br><span class="line">ln -s /root/node-v14.17.1-linux-x64/bin/node /usr/sbin/</span><br><span class="line">[root@grpc-test-0002 ~]<span class="comment"># npm --version</span></span><br><span class="line">6.14.13</span><br><span class="line">[root@grpc-test-0002 ~]<span class="comment"># node --version</span></span><br><span class="line">v14.17.1</span><br></pre></td></tr></table></figure><br> 7、安装gRPC语言node.js相关<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> grpc/examples/node/</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br> 8、启动node_server<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dynamic_codegen</span><br><span class="line">[root@grpc-test-0002 dynamic_codegen]<span class="comment"># node greeter_server.js </span></span><br><span class="line">server start......</span><br></pre></td></tr></table></figure><br> 9、查看server端口<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@grpc-test-0002 ~]<span class="comment"># netstat -ntlp |grep 50051</span></span><br><span class="line">tcp        0      0 0.0.0.0:50051           0.0.0.0:*               LISTEN      21444/node</span><br></pre></td></tr></table></figure><br> 10、以上就是gRPC的简单安装部署流程，下面进行nginx反代及配置ssl,这里通过nginx的原因是因为nginx在1.13.10版本之后引入了对<a href="https://www.nginx.com/blog/nginx-1-13-10-grpc/" target="_blank" rel="noopener">gRPC的支持</a><br> 安装nginx省略<br> 11、配置nginx<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> vi grpc.conf</span><br><span class="line"> upstream grpcserver&#123;</span><br><span class="line">        zone grpc_zone 64K;</span><br><span class="line">        server 127.0.0.1:50051;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 http2 ssl;</span><br><span class="line">        ssl_certificate /home/<span class="built_in">test</span>/1_www.grpc.com_bundle.crt;</span><br><span class="line">        ssl_certificate_key /home/<span class="built_in">test</span>/2_www.grpc.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            grpc_pass grpc://grpcserver;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log /var/67_serv/<span class="built_in">log</span>/grpc.log access_post_ltsv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br> 12、更改node.js客户端，配置ssl连接<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> function main() &#123;</span><br><span class="line">  var argv &#x3D; parseArgs(process.argv.slice(2), &#123;</span><br><span class="line">    string: &#39;target&#39;</span><br><span class="line">  &#125;);</span><br><span class="line">  var target;</span><br><span class="line">  if (argv.target) &#123;</span><br><span class="line">    target &#x3D; argv.target;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    target &#x3D; &#39;www.grpc.com:443&#39;;  &#x2F;&#x2F;此作了域名映射</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F;const creds &#x3D; grpc.credentials.createSsl();</span><br><span class="line">&#x2F;&#x2F;const client &#x3D; new protoDescriptor.Entity(target, creds);</span><br><span class="line"></span><br><span class="line">  var client &#x3D; new hello_proto.Greeter(target,grpc.credentials.createSsl());</span><br><span class="line">  var user;</span><br><span class="line">  if (argv._.length &gt; 0) &#123;</span><br><span class="line">    user &#x3D; argv._[0]; </span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    user &#x3D; &#39;world&#39;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  client.sayHello(&#123;name: &#39;you&#39;&#125;, function(err, response) &#123;</span><br><span class="line">    console.log(&#39;Greeting:&#39;, response.message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 13、启动node.js客户端进行连接服务端<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-6bf0 dynamic_codegen]<span class="comment"># node greeter_client.js </span></span><br><span class="line">Greeting: Hello you  //此为客户端连接上了服务端</span><br></pre></td></tr></table></figure><br> 14、查看对应的访问nginx日志<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote_addr:119.8.44.216        domain:www.grpc.com remote_user:-   log_time:2021-07-01T21:20:17+08:00      request:POST /helloworld.Greeter/SayHello HTTP/2.0      status:200      request_time:0.013      upstream_status:200     upstream_addr:10.0.1.217:50051      upstream_response_time:0.012    https:on</span><br></pre></td></tr></table></figure><br> 15、<a href="https://grpc.io/blog/grpc-load-balancing/" target="_blank" rel="noopener">grpc的高可用配置</a><br> 16、理想的gRPC服务架构<br> <img src="/rz168.io/2021/07/01/grpc%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/grpc01.png" class title="This is an grpc image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grpc安装及使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>clickhouse通过MaterializeMySQL引擎做mysql从库</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/06/02/clickhouse%E9%80%9A%E8%BF%87MaterializeMySQL%E5%BC%95%E6%93%8E%E5%81%9Amysql%E4%BB%8E%E5%BA%93/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/06/02/clickhouse%E9%80%9A%E8%BF%87MaterializeMySQL%E5%BC%95%E6%93%8E%E5%81%9Amysql%E4%BB%8E%E5%BA%93/</id>
    <published>2021-06-02T13:02:46.000Z</published>
    <updated>2021-06-22T09:39:41.078Z</updated>
    
    <content type="html"><![CDATA[<p>clickhouse通过MaterializeMySQL引擎做mysql从库</p><a id="more"></a><p>接触clickhouse使用已经有一段时间了，用的差不多都是单机或者分片集群模式，<br>现听说clickhouse可以用作mysql的从库，则测试一下<br>1、服务器及软件版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vm01  2c4G 50G</span><br><span class="line">clikchouse:21.5.6</span><br><span class="line">mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@node01 ~]# docker --version</span><br><span class="line">Docker version 20.10.7, build f0df350</span><br><span class="line">[root@node01 ~]# docker-compose --version</span><br><span class="line">docker-compose version 1.26.0-rc3, build 46118bc5</span><br></pre></td></tr></table></figure><p>2、为了简单测试，则基于docker-compose起对应容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">more docker-compose.yml </span><br><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line">    mysql:</span><br><span class="line">        image: docker.io&#x2F;mysql:5.7</span><br><span class="line">        container_name: stat-mysql</span><br><span class="line">        command: [</span><br><span class="line">            &quot;--server-id&#x3D;1&quot;,</span><br><span class="line">            &quot;--datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&quot;,</span><br><span class="line">            &quot;--log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin.log&quot;,</span><br><span class="line">            &quot;--gtid_mode&#x3D;ON&quot;,</span><br><span class="line">            &quot;--enforce_gtid_consistency&#x3D;ON&quot;</span><br><span class="line">        ]</span><br><span class="line">        restart: always</span><br><span class="line">        networks:</span><br><span class="line">            app_net:</span><br><span class="line">                ipv4_address: 172.16.1.2</span><br><span class="line">        environment:</span><br><span class="line">            MYSQL_ROOT_PASSWORD: 123</span><br><span class="line">        ports:</span><br><span class="line">            - 3306:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - &#x2F;mysql&#x2F;docker_mysql_dir:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line"></span><br><span class="line">    clickhouse:</span><br><span class="line">        image: yandex&#x2F;clickhouse-server:21.5.6-alpine</span><br><span class="line">        ulimits:</span><br><span class="line">            nofile:</span><br><span class="line">                soft: 262144</span><br><span class="line">                hard: 262144</span><br><span class="line">        container_name: stat-clickhouse</span><br><span class="line">        restart: always</span><br><span class="line">        networks:</span><br><span class="line">            app_net:</span><br><span class="line">                ipv4_address: 172.16.1.3</span><br><span class="line">        ports:</span><br><span class="line">            - 8123:8123</span><br><span class="line">            - 6767:6767</span><br><span class="line">        volumes:</span><br><span class="line">            - &#x2F;data&#x2F;docker_clikchouse_dir:&#x2F;var&#x2F;lib&#x2F;clickhouse</span><br><span class="line">            - &#x2F;etc&#x2F;clickhouse-server:&#x2F;etc&#x2F;clickhouse-server</span><br><span class="line">    </span><br><span class="line">    clickhouse_client:</span><br><span class="line">        image: yandex&#x2F;clickhouse-server</span><br><span class="line">        container_name: clickhouse_client</span><br><span class="line">        links: </span><br><span class="line">            - clickhouse</span><br><span class="line">        depends_on:</span><br><span class="line">            - clickhouse</span><br><span class="line">        networks: </span><br><span class="line">            app_net: </span><br><span class="line">                ipv4_address: 172.16.1.4</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">    app_net:</span><br><span class="line">        driver: bridge</span><br><span class="line">        ipam: </span><br><span class="line">            driver: default</span><br><span class="line">            config: </span><br><span class="line">                - subnet: 172.16.1.0&#x2F;24</span><br></pre></td></tr></table></figure><p>3、启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 docker-compose]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">"docker-compose_app_net"</span> with driver <span class="string">"bridge"</span></span><br><span class="line">Creating <span class="built_in">stat</span>-mysql        ... <span class="keyword">done</span></span><br><span class="line">Creating <span class="built_in">stat</span>-clickhouse ... <span class="keyword">done</span></span><br><span class="line">Creating clickhouse_client ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>4、查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                    COMMAND                  CREATED        STATUS        PORTS                                                                                                      NAMES</span><br><span class="line">dbe00a7a5eb4   yandex/clickhouse-server                 <span class="string">"/entrypoint.sh"</span>         43 hours ago   Up 43 hours   8123/tcp, 9000/tcp, 9009/tcp                                                                               clickhouse_client</span><br><span class="line">22e51ff335d2   yandex/clickhouse-server:21.5.6-alpine   <span class="string">"/entrypoint.sh"</span>         43 hours ago   Up 43 hours   0.0.0.0:6767-&gt;6767/tcp, :::6767-&gt;6767/tcp, 9000/tcp, 0.0.0.0:8123-&gt;8123/tcp, :::8123-&gt;8123/tcp, 9009/tcp   <span class="built_in">stat</span>-clickhouse</span><br><span class="line">463e00a133f5   mysql:5.7                                <span class="string">"docker-entrypoint.s…"</span>   43 hours ago   Up 43 hours   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp                                                       <span class="built_in">stat</span>-mysql</span><br></pre></td></tr></table></figure><p>5、登陆到mysql，创建数据库、数据表及插入相关数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# mysql -uroot -h 127.0.0.1 -P3306 -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.34-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;gtid_mode&#39;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| gtid_mode     | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create database chdb;</span><br><span class="line">Query OK, 1 row affected (0.15 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use chdb;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t1(a int not null primary key, b int);</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1,1),(2,2);</span><br><span class="line">Query OK, 2 rows affected (1.06 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 1 |    1 |</span><br><span class="line">| 2 |    2 |</span><br><span class="line">+---+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>6、连接clickhouse容器，配置为mysql从库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client -h 127.0.0.1 --port 6767 --user default</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建MySQL从库</span></span><br><span class="line">CREATE DATABASE mysql ENGINE = MaterializeMySQL(<span class="string">'172.16.1.2:3306'</span>, <span class="string">'chdb'</span>, <span class="string">'root'</span>,<span class="string">'123'</span>);</span><br><span class="line">-mysql:在clikchouser 数据库</span><br><span class="line">-172.16.1.2：mysql服务器</span><br><span class="line">-3306：mysql端口</span><br><span class="line">-ckdb:MySQL数据库</span><br><span class="line">-root：用户</span><br><span class="line">-123：密码</span><br></pre></td></tr></table></figure><p>7、在clickhouse上查看数据库及数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">22e51ff335d2 :) CREATE DATABASE mysql ENGINE &#x3D; MaterializeMySQL(&#39;172.16.1.2:3306&#39;, &#39;chdb&#39;, &#39;root&#39;,&#39;123&#39;);</span><br><span class="line"></span><br><span class="line">CREATE DATABASE mysql</span><br><span class="line">ENGINE &#x3D; MaterializeMySQL(&#39;172.16.1.2:3306&#39;, &#39;chdb&#39;, &#39;root&#39;, &#39;123&#39;)</span><br><span class="line"></span><br><span class="line">Query id: 4c4f62cd-443b-4bbb-99f1-76373a7d9284</span><br><span class="line"></span><br><span class="line">Ok.</span><br><span class="line"></span><br><span class="line">0 rows in set. Elapsed: 0.030 sec. </span><br><span class="line"></span><br><span class="line">22e51ff335d2 :) show databases;</span><br><span class="line"></span><br><span class="line">SHOW DATABASES</span><br><span class="line"></span><br><span class="line">Query id: 9d44f294-1cb6-49bd-96c2-fa97f5d34137</span><br><span class="line"></span><br><span class="line">┌─name────┐</span><br><span class="line">│ default │</span><br><span class="line">│ mysql   │</span><br><span class="line">│ system  │</span><br><span class="line">└─────────┘</span><br><span class="line"></span><br><span class="line">3 rows in set. Elapsed: 0.004 sec. </span><br><span class="line"></span><br><span class="line">22e51ff335d2 :) use mysql;</span><br><span class="line"></span><br><span class="line">USE mysql</span><br><span class="line"></span><br><span class="line">Query id: f87e5bc7-3289-40c6-bd7f-bfeff30229e7</span><br><span class="line"></span><br><span class="line">Ok.</span><br><span class="line"></span><br><span class="line">0 rows in set. Elapsed: 0.002 sec. </span><br><span class="line"></span><br><span class="line">22e51ff335d2 :) show tables;</span><br><span class="line"></span><br><span class="line">SHOW TABLES</span><br><span class="line"></span><br><span class="line">Query id: 1f58efd2-131c-4c55-9855-c72608932492</span><br><span class="line"></span><br><span class="line">┌─name─┐</span><br><span class="line">│ t1   │</span><br><span class="line">└──────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.006 sec. </span><br><span class="line"></span><br><span class="line">22e51ff335d2 :) select * from t1;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM t1</span><br><span class="line"></span><br><span class="line">Query id: ccb995b0-653b-4f49-866d-f10ae1beff48</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ 1 │ 1 │</span><br><span class="line">└───┴───┘</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ 2 │ 2 │</span><br><span class="line">└───┴───┘</span><br></pre></td></tr></table></figure><p>8、到此就已经配置好了，若要上线线上，则需要注意以下几点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现Mysql到 Clickhouse 的同步，需要同步的 Mysql 表必须要含有 unique_key 或 primary_key 或 auto_increment 之一</span><br></pre></td></tr></table></figure><p>9、遇到的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DB::Exception: Received from 127.0.0.1:6767. DB::Exception: MaterializeMySQL is an experimental database engine. Enable allow_experimental_database_materialize_mysql to use it..</span><br><span class="line"></span><br><span class="line">clickhouse执行：</span><br><span class="line">set allow_experimental_database_materialize_mysql&#x3D;1;</span><br><span class="line">select * from system.settings where name &#x3D;&#39;allow_experimental_database_materialize_mysql&#39;;</span><br><span class="line"></span><br><span class="line">DB::Exception: The replication sender thread cannot start in AUTO_POSITION mode: this server has GTID_MODE &#x3D; OFF instead of ON.</span><br><span class="line">mysql执行：</span><br><span class="line">SET GLOBAL GTID_MODE &#x3D; &#39;ON&#39;;</span><br><span class="line">show variables like &#39;gtid_mode&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clickhouse通过MaterializeMySQL引擎做mysql从库&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://github.com/Piouscc/rz168.io.git/tags/docker/"/>
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="DB" scheme="https://github.com/Piouscc/rz168.io.git/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>利用python脚本备份数据库</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/05/13/%E5%88%A9%E7%94%A8python%E8%84%9A%E6%9C%AC%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/05/13/%E5%88%A9%E7%94%A8python%E8%84%9A%E6%9C%AC%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-05-13T08:32:26.000Z</published>
    <updated>2021-05-13T08:34:28.799Z</updated>
    
    <content type="html"><![CDATA[<p>利用python脚本备份数据库<br> <a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">db_backup.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__='admin'</span></span><br><span class="line"><span class="keyword">import</span> datetime,time,os,shutil,tarfile</span><br><span class="line"></span><br><span class="line">User=<span class="string">'root'</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line">Hostname=<span class="string">'127.0.0.1'</span></span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">dir_time = time.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">backup_dir_tmp = <span class="string">'/data/mysql_backup/tmp/'</span></span><br><span class="line">backup_dir = <span class="string">'/data/mysql_backup/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Backup_dir</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(backup_dir_tmp):</span><br><span class="line">        os.mkdir(backup_dir_tmp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DB_backup</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#先获取数据库名称，再依次进行备份</span></span><br><span class="line">    db_names=os.popen(<span class="string">"/opt/mysql/bin/mysql -u%s -P%s -h%s -e 'show databases;'|grep 67"</span> % (User,PORT,Hostname),<span class="string">"r"</span>)</span><br><span class="line">    <span class="keyword">for</span> db_name <span class="keyword">in</span> db_names:</span><br><span class="line">        db_name = db_name.strip()</span><br><span class="line">        Num = os.system(<span class="string">'/opt/mysql/bin/mysqldump --single-transaction --quick --lock-tables=false -u%s -P%s -h%s %s &gt; %s/%s.sql'</span> % (User, PORT, Hostname, db_name, backup_dir_tmp, db_name))</span><br><span class="line">        <span class="keyword">if</span> Num != <span class="number">0</span>:</span><br><span class="line">            Num = os.system(<span class="string">'/opt/mysql/bin/mysqldump --single-transaction --quick --lock-tables=false -u%s -P%s -h%s %s &gt; %s/%s.sql'</span> % (User, PORT, Hostname, db_name, backup_dir_tmp, db_name))</span><br><span class="line">            <span class="keyword">if</span> Num != <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"%s 数据库备份失败！"</span>, db_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#对备份的文件进行归档</span></span><br><span class="line">    <span class="keyword">with</span> tarfile.open(backup_dir + dir_time + <span class="string">".tar.gz"</span>,<span class="string">"w:gz"</span>) <span class="keyword">as</span> tar:</span><br><span class="line">        tar.add(backup_dir_tmp,arcname=os.path.basename(backup_dir_tmp))</span><br><span class="line">    shutil.rmtree(backup_dir_tmp)</span><br><span class="line">    <span class="comment">#删除3天前的备份文件</span></span><br><span class="line">    os.system(<span class="string">'find %s -mtime +3|xargs rm -f'</span> %(backup_dir))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Backup_dir()</span><br><span class="line">    DB_backup()</span><br><span class="line">    Tar()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用python脚本备份数据库&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="python" scheme="https://github.com/Piouscc/rz168.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>从VMware迁移系统到Esxi</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/</id>
    <published>2021-05-13T02:39:53.000Z</published>
    <updated>2021-05-13T03:57:36.241Z</updated>
    
    <content type="html"><![CDATA[<p>从VMware迁移系统到Esxi<br> <a id="more"></a><br>1、介绍<br>快速将本地和远程物理机转换为虚拟机，而无需停机。同时转换可实现大规模虚拟化实施。提供对源物理机。<br>Converter Standalone简化了以下产品之间的虚拟机交换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）VMware托管产品既可以是转换源，也可以是转换目标。</span><br><span class="line">2）在vCenter Server管理的ESXi实例  上运行的虚拟机可以是转换源，而相应的ESXi和vCenter Server实例可以是转换目标。</span><br><span class="line">3）在非托管ESXi主机上运行的虚拟机可以是转换源，而相应的ESXi主机可以是转换目标。</span><br></pre></td></tr></table></figure><p>2、下载VMware-converter,安装过程略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;softpedia-secure-download.com&#x2F;dl&#x2F;1a7ab68c2e003ce4541ccee642778c7f&#x2F;5cdfb2d9&#x2F;100064445&#x2F;software&#x2F;system&#x2F;VMware-converter-en-6.2.0-8466193.exe</span><br></pre></td></tr></table></figure><p>3、因为本地已经安装好ubuntu20.04.1虚拟机，则直接使用这台服务器进行迁移操作<br>首先，开启root用户密码登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y openssh-server</span><br></pre></td></tr></table></figure><p>4、修改ssh配置文件，及设置root密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">LoginGraceTime 2m</span><br><span class="line"><span class="comment">#PermitRootLogin prohibit-password</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br><span class="line">MaxAuthTries 6</span><br><span class="line">MaxSessions 10</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>@<span class="built_in">test</span>-virtual-machine:~<span class="variable">$su</span> root</span><br><span class="line">root@<span class="built_in">test</span>-virtual-machine:~<span class="comment"># passwd </span></span><br><span class="line">新的 密码：</span><br><span class="line"></span><br><span class="line">重启ssh任务：</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>5、由于ubuntu 20.04.1不支持crt远程连接，则用xshell代替，测试root是否正常远程连接</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm01.png" class title="This is an vm image"><p>6、VMware vCenter Converter Standalone，是一种用于将虚拟机和物理机转换为 VMware 虚拟机的可扩展解决方案。此外，还可以在 vCenter Server 环境中配置现有虚拟机，是P2V的重要工具，可以迁移Windows,Linux等操作系统，但是经常会出现一些细节问题造成无法成功，现整理如下：<br>打开VMware Converter Standalone工具</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm02.png" class title="This is an vm image"><p>7、选择我们所用到的模式，这边用的是VMware迁移到exsi如下，注意这里迁移虚拟机需要提前关机，否则会报“Unable to obtain the lock on virtual disks.”,如果从物理机迁移到exsi，则省略：</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm03.png" class title="This is an vm image"><p>8、输入我们vmware esxi server的ip及账号密码，然后点击“Next”</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm04.png" class title="This is an vm image"><p>9、确认我们的虚拟在esxi中的命名，这些默认ubuntu</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm05.png" class title="This is an vm image"><p>10、确认磁盘空间</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm06.png" class title="This is an vm image"><p>11、确认虚拟机其它配置</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm07.png" class title="This is an vm image"><p>12、点击finish</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm08.png" class title="This is an vm image"><p>13、显示正在迁移，进度等等信息</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm09.png" class title="This is an vm image"><p>14、等待迁移的过程可以到vmware esxi web查看</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm10.png" class title="This is an vm image"><p>15、查看迁移状态是否完成 </p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm11.png" class title="This is an vm image"><p>16、web登陆VMware Esxi打开对应迁移的虚拟机电源，查如下，则表示迁移成功</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm12.png" class title="This is an vm image"><p>17、至此VMware 虚拟机迁移到esxi就完成了，若想从物理机迁移到esxi，则在第七步中选择“Powered on”，然后选择系统类型，输入Ip及账号密码，如下以linux为例，其它步骤则一样</p><img src="/rz168.io/2021/05/13/%E4%BB%8EVMware%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F%E5%88%B0Esxi/vm13.png" class title="This is an vm image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从VMware迁移系统到Esxi&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/Linux/"/>
    
      <category term="VMware" scheme="https://github.com/Piouscc/rz168.io.git/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>利用shell脚本实现批量操作</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/04/10/%E5%88%A9%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/04/10/%E5%88%A9%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-10T06:33:59.000Z</published>
    <updated>2021-04-10T08:13:45.821Z</updated>
    
    <content type="html"><![CDATA[<p>利用shell脚本实现批量操作<br> <a id="more"></a><br> 每个运维人员都向往着批量管理，批量部署，常见的批量管理软件有ansible、saltstack等，但shell脚本也能实现，如下：<br>1、先创建一个目录用作存放IP，port,脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/script/ssh</span><br><span class="line">touch /opt/script/ssh/&#123;ip,ssh_port,ssh.sh&#125;</span><br></pre></td></tr></table></figure><p>2、往文件ip及ip_port填入对应的真实IP及ssh端口，及对ssh免密登陆配置好公钥<br>3、编写脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line"></span><br><span class="line">servers=`cat /opt/script/ip`</span><br><span class="line">port=`cat /opt/script/ssh_port`</span><br><span class="line">prefix="ssh -p $port"</span><br><span class="line"></span><br><span class="line">if [ "$1" == 'cmd' ] &amp;&amp; [ ! -z "$2" ] ; then</span><br><span class="line">    </span><br><span class="line">    fail=0</span><br><span class="line">    for ip in $&#123;servers[@]&#125;; do</span><br><span class="line">        echo "###$ip"</span><br><span class="line">        $prefix root@$ip "$2"</span><br><span class="line">        [ $? -ne 0 ] &amp;&amp; fail=$(($fail +1))</span><br><span class="line">    done</span><br><span class="line">    [ $fail -ne 0 ] &amp;&amp; exit $fail || exit 0</span><br><span class="line">elif [ "$1" == 'rsync' ]; then</span><br><span class="line">    </span><br><span class="line">    if [ -z "$2" ] || [ -z "$3" ]; then</span><br><span class="line">       echo 'src and dest required'</span><br><span class="line">       exit</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    mode='-avzP'</span><br><span class="line">    if [ "$4" == 'debug' ]; then</span><br><span class="line">       mode="$&#123;mode&#125;n"</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    for ip in $&#123;servers[@]&#125;; do</span><br><span class="line">       rsync $mode -e "$prefix" $2 root@$ip:$3</span><br><span class="line">    done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>4、用法<br>1)在别名里面添加以下两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias lvscmd&#x3D;&#39;sh &#x2F;opt&#x2F;script&#x2F;web&#x2F;ssh.sh cmd &#39;</span><br><span class="line">alias lvsrsync&#x3D;&#39;sh &#x2F;opt&#x2F;script&#x2F;web&#x2F;ssh.sh rsync &#39;</span><br></pre></td></tr></table></figure><p>2)真正用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#lvscmd "df -h"</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#lvsrsync "/tmp/1.txt" "/tmp/2.txt"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用shell脚本实现批量操作&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="shell" scheme="https://github.com/Piouscc/rz168.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>日常日志备份之nginx_php</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/04/10/%E6%97%A5%E5%B8%B8%E6%97%A5%E5%BF%97%E5%A4%87%E4%BB%BD%E4%B9%8Bnginx-php/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/04/10/%E6%97%A5%E5%B8%B8%E6%97%A5%E5%BF%97%E5%A4%87%E4%BB%BD%E4%B9%8Bnginx-php/</id>
    <published>2021-04-10T02:12:53.000Z</published>
    <updated>2021-04-10T03:42:49.380Z</updated>
    
    <content type="html"><![CDATA[<p>日常日志备份之nginx_php</p><a id="more"></a><p>对于一名运维工作人员来说，日志内容至关重要（如：nginx的access日志能直观得到用户地域来源、跳转来源、使用终端、某个URL访问量等相关信息，nginx的error日志可以得到系统某个服务或Server的性能瓶颈等），将日志好好利用，可以得到很多有价值的信息。因此下面将进行对nginx，php的日志进行按天备份操作也可以称为“按天日志切割”<br>1、假设日志存放路径为/var/log/web<br>需要修改nginx配置文件添加以下一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx：</span><br><span class="line">access_log      &#x2F;var&#x2F;log&#x2F;web&#x2F;$host.nginx.log     access;</span><br><span class="line">error_log       &#x2F;var&#x2F;log&#x2F;web&#x2F;nginx_error.log  ;</span><br><span class="line">php：</span><br><span class="line">error_log &#x3D; &#x2F;var&#x2F;log&#x2F;web&#x2F;error.php.log</span><br><span class="line">slowlog &#x3D; &#x2F;var&#x2F;log&#x2F;web&#x2F;$pool.php.log.slow</span><br></pre></td></tr></table></figure><p>2、编写脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">backup logs</span></span><br><span class="line">log=/var/log/web</span><br><span class="line">yesterday=$(date -d 'yesterday' +'%Y-%m-%d')</span><br><span class="line">backup=$log/backup/$yesterday</span><br><span class="line">mkdir -p $backup</span><br><span class="line"></span><br><span class="line">cd $log</span><br><span class="line">for type in nginx php; do</span><br><span class="line">for f in `ls *.$type.log`; do</span><br><span class="line">mv $f $backup/</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">/sbin/nginx -s reload</span><br><span class="line">/sbin/fpm reload &amp;&amp; sleep 2 &amp;&amp; chmod +r $&#123;log&#125;/fpm.php.log</span><br><span class="line"></span><br><span class="line">cd $backup</span><br><span class="line">for f in `ls *.log`; do</span><br><span class="line">tar -zcf $f.tar.gz $f --remove-files</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除30天前的备份文件</span></span><br><span class="line">find $log/backup -type d -mtime +30|xargs rm -rf</span><br></pre></td></tr></table></figure><p>3、添加计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 0 * * * sh /opt/script/web_log.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常日志备份之nginx_php&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="shell" scheme="https://github.com/Piouscc/rz168.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Nginx添加访问密码</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/03/11/Nginx%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/03/11/Nginx%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81/</id>
    <published>2021-03-11T06:22:27.000Z</published>
    <updated>2021-03-11T07:26:01.140Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx添加访问密码<br> <a id="more"></a><br>为了安全起见，有些网站是不想让别人直接就能访问到的，则需要在nginx层级增加一层用户密码登陆，例图如下：</p><img src="/rz168.io/2021/03/11/Nginx%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81/nginx.png" class title="This is an nginx image"><p>1、Nginx模块添加<br>ngx_http_auth_basic_module 模块实现让用户只有输入正确的用户名密码才允许访问web内容。默认情况下，nginx 已经安装了该模块。<br>2、用第三方工具生成账号密码文件，以htpasswd为例<br>1）安装htpasswd软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br></pre></td></tr></table></figure><p>2)生成账号密码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">htpasswd -c $&#123;存放路径&#125;&#x2F;passwd $&#123;账号&#125;</span><br><span class="line">htpasswd -c &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;passwd test</span><br></pre></td></tr></table></figure><p>3)修改nginx配置，如果有配置https，也要在https中添加auth_basic两条配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #添加以下两行,第一行为提示内容，第二行为密码文件路径</span><br><span class="line">        auth_basic &quot;Please input password&quot;; </span><br><span class="line">        auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;passwd; </span><br><span class="line">        location &#x2F;PilotArea &#123;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>4)重启nginx，尝试访问，确认是否正常弹窗<br>3、关于htpasswd命令解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">htpasswd选项参数    </span><br><span class="line">    htpasswd [-cmdpsD] passwordfile username</span><br><span class="line">    htpasswd -b[cmdpsD] passwordfile username password</span><br><span class="line">    htpasswd -n[mdps] username</span><br><span class="line">    htpasswd -nb[mdps] username password</span><br><span class="line">htpasswd命令选项参数说明</span><br><span class="line">    -c 创建一个加密文件</span><br><span class="line">    -n 不更新加密文件，只将htpasswd命令加密后的用户名密码显示在屏幕上</span><br><span class="line">    -m 默认htpassswd命令采用MD5算法对密码进行加密</span><br><span class="line">    -d htpassswd命令采用CRYPT算法对密码进行加密</span><br><span class="line">    -p htpassswd命令不对密码进行进行加密，即明文密码</span><br><span class="line">    -s htpassswd命令采用SHA算法对密码进行加密</span><br><span class="line">    -b htpassswd命令行中一并输入用户名和密码而不是根据提示输入密码</span><br><span class="line">    -D 删除指定的用户</span><br><span class="line">htpasswd例子</span><br><span class="line">a、如何利用htpasswd命令添加用户？    </span><br><span class="line">htpasswd -bc .&#x2F;.passwd feiyu pass</span><br><span class="line">在当前目录下生成一个.passwd文件，用户名feiyu，密码：pass，默认采用MD5加密方式</span><br><span class="line">b、如何在原有密码文件中增加下一个用户？</span><br><span class="line">htpasswd -b .&#x2F;.passwd feiyu1 pass</span><br><span class="line">去掉c选项，即可在第一个用户之后添加第二个用户，依此类推</span><br><span class="line">c、如何不更新密码文件，只显示加密后的用户名和密码？</span><br><span class="line">htpasswd -nb feiyu pass</span><br><span class="line">不更新.passwd文件，只在屏幕上输出用户名和经过加密后的密码</span><br><span class="line">d、如何利用htpasswd命令删除用户名和密码？</span><br><span class="line">htpasswd -D .passwd feiyu1</span><br><span class="line">e、如何利用 htpasswd 命令修改密码？</span><br><span class="line">htpasswd -D .passwd feiyu1</span><br><span class="line">htpasswd -b .passwd feiyu1 pass</span><br><span class="line">2.5不使用 htpasswd也可以使用openssl</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx添加访问密码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库备份利器之Mariabackup</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/03/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%88%A9%E5%99%A8%E4%B9%8BMariabackup/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/03/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%88%A9%E5%99%A8%E4%B9%8BMariabackup/</id>
    <published>2021-03-05T01:19:45.000Z</published>
    <updated>2021-03-05T04:02:28.768Z</updated>
    
    <content type="html"><![CDATA[<p>数据库备份利器之Mariabackup<br> <a id="more"></a><br>背景：由于数据过于庞大，如果用mysqldump直接就拉高服务器的负载，本想用Percona XtraBackup ，但是官网宣称“在MariaDB 10.3中，不支持Percona XtraBackup ”，因此使用mariabackup</p><p>1、Mariabackup简介<br>Mariabackup是MariaDB提供的一个开源工具，用于对InnoDB，Aria和MyISAM表进行物理在线备份。这个工具是基于Percona的XtraBackup（版本2.3.8）的解决方案。<br>这里有一点需要注意，在MariaDB10.3.x及以上的版本用Percona XtraBackup工具会有问题。原因可能是MariaDB10.3以上版本的redo日志格式和之前不同了。<a href="https://mariadb.com/kb/en/mariabackup/" target="_blank" rel="noopener">Mariabackup官网介绍</a></p><p>2、语法格式<br>$PATH/mysql/bin/mariabackup [–defaults-file=#] [–backup | –prepare | –copy-back | –move-back] [OPTIONS]<br>常用选项解释：<a href="https://mariadb.com/kb/en/mariabackup-options/" target="_blank" rel="noopener">官网介绍</a></p><ul><li>–backup<br>备份数据库。<br>使用此命令选项，Mariabackup对您的一个或多个数据库执行备份操作。备份将写入该–target-dir选项设置的目标目录。</li><li>–databases<br>定义要备份的数据库和表。</li><li>-databases=”example.table1 example.table2”</li><li>–databases-exclude<br>定义您不想备份的数据库。</li><li>-databases-exclude =“ example.table1 example.table2”</li><li>-H, –host<br>定义要备份的MariaDB服务器的主机。</li><li>-host =name</li><li>-P, –port<br>定义要连接的服务器端口。</li><li>–incremental-basedir<br>定义是否要基于另一个备份进行增量备份。</li><li><ul><li>-incremental-dir<br>定义是否要增加准备好的备份<br>将此选项与- -prepare命令选项一起使用会导致Mariabackup增加准备好的备份，而不是从头开始复制。增量将.delta文件和日志文件应用到目标目录中。</li></ul></li><li>–copy-back或–move-back</li><li>-copy-back选项使您可以保留原始备份文件。</li><li>-move-back选项实际上将备份文件移到datadir，因此原始备份文件会丢失。<br>3、完全备份</li><li>用户名为root</li><li>密码为空</li><li>进行完全备份时，目标目录必须为空或不存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/67_serv/mysql/bin/mariabackup --backup --target-dir=/data/mariabackup/$(date <span class="string">'+%y-%m-%d'</span>) --user=root --password=</span><br><span class="line">出现……completed OK!……，则备份完成</span><br></pre></td></tr></table></figure>4、恢复数据</li><li>停止mariadb服务</li><li>确保datadir目录为空<br>1）准备还原的备份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/67_serv/mysql/bin/mariabackup --prepare --target-dir=/data/21-03-03</span><br></pre></td></tr></table></figure>2)恢复还原</li><li>–datadir=/data/mysql/data 恢复指定目录，不然恢复到默认位置“/var/lib/mysql”<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/67_serv/mysql/bin/mariabackup --copy-back --target-dir=/data/21-03-03 --datadir=/data/mysql/data</span><br><span class="line">出现……completed OK!……，则恢复备份完成</span><br></pre></td></tr></table></figure>5、恢复数据完成后，进行用户及用户组配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /data/mysql/data</span><br></pre></td></tr></table></figure>6、启动数据库服务mariadb<br>略<br>7、增量备份，前提要做一次全量备份</li><li>用户名为root</li><li>密码为空</li><li>进行完全备份时，目标目录必须为空或不存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mariabackup --backup \ </span><br><span class="line">   --target-dir =/var/mariadb/backup/\ </span><br><span class="line">   --user = mariabackup --password = mypassword</span><br></pre></td></tr></table></figure>8、进行增量备份<br>在系统上创建完整备份后，您还可以根据需要多次备份增量更改。<br>为了执行增量备份，您需要运行Mariabackup，该–backup选项带有告诉其执行备份的–target-dir选项，并带有告诉其将增量更改放置在何处的选项。目标目录必须为空。您还需要运行该–incremental-basedir选项，并带有选项以告知其进行上述完整备份的路径。例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mariabackup --backup \ </span><br><span class="line">   --target-dir = /var/mariadb/inc1/ \ </span><br><span class="line">   --incremental-basedir = /var/mariadb/backup/\ </span><br><span class="line">   --user = mariabackup --password = mypassword</span><br></pre></td></tr></table></figure>要执行其他增量备份，您可以将上一个增量备份的目标目录用作下一个增量备份的增量基本目录。例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mariabackup --backup \ </span><br><span class="line">   --target-dir = /var/mariadb/inc2/\ </span><br><span class="line">   --incremental-basedir =/var/mariadb/inc1/\ </span><br><span class="line">   --user = mariabackup --password = mypassword</span><br></pre></td></tr></table></figure>9、准备备份(即增量备份与全量备份合并)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mariabackup --prepare\ </span><br><span class="line">   --target-dir =/var/mariadb/backup</span><br></pre></td></tr></table></figure>运行此命令可使基本完全备份（即）/var/mariadb/backup与进行备份时收集的InnoDB重做日志中包含的更改同步。<br>然后，将增量更改应用于基本完整备份：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mariabackup --prepare \</span><br><span class="line">   --target-dir=/var/mariadb/backup \</span><br><span class="line">   --incremental-dir=/var/mariadb/inc1</span><br></pre></td></tr></table></figure>10、数据恢复还原</li><li>–datadir=/data/mysql/data 恢复指定目录，不然恢复到默认位置“/var/lib/mysql”<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/67_serv/mysql/bin/mariabackup --copy-back --target-dir=/data/21-03-03 --datadir=/data/mysql/data</span><br><span class="line">出现……completed OK!……，则恢复备份完成</span><br></pre></td></tr></table></figure>11、恢复数据完成后，进行用户及用户组配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /data/mysql/data</span><br></pre></td></tr></table></figure>12、启动数据库服务mariadb<br>略</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库备份利器之Mariabackup&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="DB" scheme="https://github.com/Piouscc/rz168.io.git/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx_1.18.0编译安装</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/03/01/Nginx-1-18-0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/03/01/Nginx-1-18-0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</id>
    <published>2021-03-01T07:29:18.000Z</published>
    <updated>2021-03-04T09:01:25.732Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx_1.18.0编译安装</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rpm -qa | grep nginx |xargs rpm  --nodeps</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++ wget </span><br><span class="line"></span><br><span class="line">Nginx_Ver=1.18.0</span><br><span class="line">Pcre_Ver=8.44</span><br><span class="line">Zlib_Ver=1.2.11</span><br><span class="line">Openssl_Ver=1.1.1i</span><br><span class="line"></span><br><span class="line">USER=www</span><br><span class="line">group=www</span><br><span class="line">useradd <span class="variable">$USER</span></span><br><span class="line">PREFIX=/opt/67_serv</span><br><span class="line">DOWNLOAD_PATH=/usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DOWNLOAD_PATH</span></span><br><span class="line"></span><br><span class="line">Pcre_file=https://ftp.pcre.org/pub/pcre/pcre-<span class="variable">$Pcre_Ver</span>.tar.gz</span><br><span class="line">Zlib_file=https://download.cdn.pupuapp.cn/setups/sdk2.0/zlib-<span class="variable">$Zlib_Ver</span>.tar.gz</span><br><span class="line">Openssl_file=https://www.openssl.org/<span class="built_in">source</span>/old/1.1.1/openssl-<span class="variable">$Openssl_Ver</span>.tar.gz</span><br><span class="line">Nginx_file=http://nginx.org/download/nginx-<span class="variable">$Nginx_Ver</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载所需PG</span></span><br><span class="line"><span class="function"><span class="title">DOWNLOAD_FILE</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$Pcre_file</span> <span class="variable">$Zlib_file</span> <span class="variable">$Openssl_file</span> <span class="variable">$Nginx_file</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        PG_name=`basename <span class="variable">$i</span>`</span><br><span class="line">        wget -O <span class="variable">$PG_name</span> <span class="variable">$i</span></span><br><span class="line">        <span class="keyword">if</span> [[ $? -ne 0 ]];<span class="keyword">then</span></span><br><span class="line">            wget -O <span class="variable">$PG_name</span> <span class="variable">$i</span></span><br><span class="line">            <span class="keyword">if</span> [[ $? -ne 0 ]];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"文件下载失败"</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        tar -xf <span class="variable">$PG_name</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"--------------下载所需PG------------"</span></span><br><span class="line">DOWNLOAD_FILE</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"--------------下载PG完成------------"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="variable">$Nginx_Ver</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=<span class="variable">$PREFIX</span>/nginx --user=<span class="variable">$USER</span> --group=<span class="variable">$USER</span> \</span><br><span class="line">--with-pcre=<span class="variable">$DOWNLOAD_PATH</span>/pcre-<span class="variable">$Pcre_Ver</span> \</span><br><span class="line">--with-openssl=<span class="variable">$DOWNLOAD_PATH</span>/openssl-<span class="variable">$Openssl_Ver</span> \</span><br><span class="line">--with-zlib=<span class="variable">$DOWNLOAD_PATH</span>/zlib-<span class="variable">$Zlib_Ver</span> \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module --with-http_ssl_module &gt; <span class="variable">$DOWNLOAD_PATH</span>/nginx.log</span><br><span class="line"></span><br><span class="line">make -j4 &gt;&gt; <span class="variable">$DOWNLOAD_PATH</span>/nginx.log</span><br><span class="line">make install &gt;&gt; <span class="variable">$DOWNLOAD_PATH</span>/nginx.log</span><br><span class="line"></span><br><span class="line">ln <span class="variable">$PREFIX</span>/nginx/sbin/nginx /sbin/nginx -sf</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除下载暂存文件</span></span><br><span class="line">rm -rf <span class="variable">$DOWNLOAD_PATH</span>/*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx_1.18.0编译安装&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控nginx及php</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/02/25/zabbix%E7%9B%91%E6%8E%A7nginx%E5%8F%8Aphp/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/02/25/zabbix%E7%9B%91%E6%8E%A7nginx%E5%8F%8Aphp/</id>
    <published>2021-02-25T03:43:10.000Z</published>
    <updated>2021-02-25T08:27:30.620Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix监控nginx及php</p><a id="more"></a><p>接着上一篇<a href="https://piouscc.github.io/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/" target="_blank" rel="noopener">zabbix自定义监控及mysql主从监控</a>，现增加对nginx及php服务监控<br>1、在/usr/local/zabbix-4.0-agentd/etc/zabbix_agentd.conf.d下创建server_status.conf配置文件里面添加下面两项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserParameter&#x3D;nginx_status[*],&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;zabbix-4.0-agentd&#x2F;script&#x2F;nginx.sh &quot;$1&quot;</span><br><span class="line">UserParameter&#x3D;php-fpm_status[*],&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;zabbix-4.0-agentd&#x2F;script&#x2F;php-fpm.sh &quot;$1&quot;</span><br></pre></td></tr></table></figure><p>2、在需要监控的服务器下创建script文件夹，并写入以下两个脚本，并重启zabbix_agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;zabbix-4.0-agentd&#x2F;script</span><br></pre></td></tr></table></figure><p>1）nginx监控脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /usr/<span class="built_in">local</span>/zabbix-4.0-agentd/script/nginx.sh &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">NGINX_PORT=8111 </span><br><span class="line">NGINX_COMMAND=<span class="variable">$1</span></span><br><span class="line"><span class="function"><span class="title">nginx_active</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Active/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">nginx_reading</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Reading/ &#123;print $2&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">nginx_writing</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Writing/ &#123;print $4&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">nginx_waiting</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Waiting/ &#123;print $6&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">nginx_accepts</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $1&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">nginx_handled</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $2&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">nginx_requests</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $3&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$NGINX_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">connect)</span><br><span class="line">        <span class="keyword">if</span> $(/usr/bin/<span class="built_in">which</span> pidof) -s nginx &amp;&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"0"</span> </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"1"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">active)</span><br><span class="line">nginx_active;</span><br><span class="line">;;</span><br><span class="line">reading)</span><br><span class="line">nginx_reading;</span><br><span class="line">;;</span><br><span class="line">writing)</span><br><span class="line">nginx_writing;</span><br><span class="line">;;</span><br><span class="line">waiting)</span><br><span class="line">nginx_waiting;</span><br><span class="line">;;</span><br><span class="line">accepts)</span><br><span class="line">nginx_accepts;</span><br><span class="line">;;</span><br><span class="line">handled)</span><br><span class="line">nginx_handled;</span><br><span class="line">;;</span><br><span class="line">requests)</span><br><span class="line">nginx_requests;</span><br><span class="line">;;</span><br><span class="line">      *)</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;active|reading|writing|waiting|accepts|handled|requests&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>2）php监控脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /usr/<span class="built_in">local</span>/zabbix-4.0-agentd/script/php-fpm.sh &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">NGINX_PORT=8111</span><br><span class="line">php_status_fun=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_since</span></span>()&#123;</span><br><span class="line">        /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^start since'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">accepted_conn</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^accepted conn'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">listen_queue</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^listen queue:'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">listen_queue_len</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^listen queue len'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">idle_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^idle processes'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">active_processe</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^active processes'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">total_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^total processes'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">slow_requests</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^slow requests'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">max_active_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^max listen queue'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">max_children_reached</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^max active processes'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="function"><span class="title">max_listen_queue</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status"</span>  |grep <span class="string">'^max children reached'</span> |awk <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$php_status_fun</span> <span class="keyword">in</span></span><br><span class="line">start_since)</span><br><span class="line">start_since;</span><br><span class="line">;;</span><br><span class="line">accepted_conn)</span><br><span class="line">accepted_conn;</span><br><span class="line">;;</span><br><span class="line">listen_queue)</span><br><span class="line">listen_queue;</span><br><span class="line">;;</span><br><span class="line">listen_queue_len)</span><br><span class="line">listen_queue_len;</span><br><span class="line">;;</span><br><span class="line">idle_processes)</span><br><span class="line">idle_processes;</span><br><span class="line">;;</span><br><span class="line">active_processe)</span><br><span class="line">active_processe;</span><br><span class="line">;;</span><br><span class="line">total_processes)</span><br><span class="line">total_processes;</span><br><span class="line">;;</span><br><span class="line">slow_requests)</span><br><span class="line">slow_requests;</span><br><span class="line">;;</span><br><span class="line">max_active_processes)</span><br><span class="line">max_active_processes;</span><br><span class="line">;;</span><br><span class="line">max_children_reached)</span><br><span class="line">max_children_reached;</span><br><span class="line">;;</span><br><span class="line">max_listen_queue)</span><br><span class="line">max_listen_queue;</span><br><span class="line">;;</span><br><span class="line">      *)</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;start_since|accepted_conn|listen_queue|listen_queue_len|idle_processes|total_processes|slow_requests|max_active_processes|max_children_reached|max_listen_queue&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>3、创建监控项</p><img src="/rz168.io/2021/02/25/zabbix%E7%9B%91%E6%8E%A7nginx%E5%8F%8Aphp/nginx.png" class title="This is an zabbix image"><img src="/rz168.io/2021/02/25/zabbix%E7%9B%91%E6%8E%A7nginx%E5%8F%8Aphp/php.png" class title="This is an zabbix image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zabbix监控nginx及php&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="zabbix" scheme="https://github.com/Piouscc/rz168.io.git/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控及mysql主从监控</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/</id>
    <published>2021-02-25T03:42:36.000Z</published>
    <updated>2021-02-25T08:04:24.346Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix自定义监控及mysql主从监控</p><a id="more"></a><p>1、在新服务器中安装zabbix_agent注意下面脚本中的zabbix_servername，，$1，需要对应更改<br>zabbix_servername：zabbix服务端<br>zabbix_port：zabbix客户端端口<br>$1：服务器hostname</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sh -x zabbix_install.sh</span><br><span class="line"></span><br><span class="line">yum install gcc -y</span><br><span class="line"></span><br><span class="line">zabbix=4.0.9</span><br><span class="line">FILE=/usr/<span class="built_in">local</span>/zabbix-4.0-agentd/etc/zabbix_agentd.conf</span><br><span class="line">Download=/usr/<span class="built_in">local</span>/src/</span><br><span class="line">useradd zabbix -s /sbin/nologin</span><br><span class="line"><span class="comment">#yum -y install pcre*</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$Download</span> &amp;&amp; wget https://download.cdn.pupuapp.cn/<span class="built_in">test</span>/zabbix-<span class="variable">$zabbix</span>.tar.gz</span><br><span class="line">tar -xvf zabbix-<span class="variable">$zabbix</span>.tar.gz  &amp;&amp; <span class="built_in">cd</span> zabbix-4.0.9/</span><br><span class="line">./configure --<span class="built_in">enable</span>-agent --prefix=/usr/<span class="built_in">local</span>/zabbix-4.0-agentd</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/zabbix-4.0-agentd/script</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s/Server=127\.0\.0\.1/Server=$(zabbix_servername)/g'</span> <span class="variable">$FILE</span></span><br><span class="line">sed -i <span class="string">'s/ServerActive=127\.0\.0\.1/ServerActive=$(zabbix_servername)/g'</span>  <span class="variable">$FILE</span></span><br><span class="line">sed -i <span class="string">'s/# ListenPort=10050/ListenPort=$(zabbix_port)/g'</span> <span class="variable">$FILE</span></span><br><span class="line">sed -i <span class="string">"s/Hostname=Zabbix server/Hostname=<span class="variable">$1</span>/g"</span> <span class="variable">$FILE</span></span><br><span class="line">sed -i <span class="string">'N;266 a Include=/usr/local/zabbix-4.0-agentd/etc/zabbix_agentd.conf.d/*.conf'</span>  <span class="variable">$FILE</span></span><br></pre></td></tr></table></figure><p>2、创建自定义监控（nginx某天的错误日志大小）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在&#x2F;usr&#x2F;local&#x2F;zabbix-4.0-agentd&#x2F;etc&#x2F;zabbix_agentd.conf.d下创建log_size.conf配置文件</span><br><span class="line">添加监控日志如nginx错误日志</span><br><span class="line">UserParameter&#x3D;log.size.nginx.err,ls -l &#x2F;var&#x2F;test&#x2F;log&#x2F;nginx_error.log | awk &#39;&#123;print $5&#125;&#39;</span><br></pre></td></tr></table></figure><p>3、在zabbix_web创建对应监控项及触发器</p><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_01.png" class title="This is an zabbix image"><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_02.png" class title="This is an zabbix image"><p>4、查看创建好的监控项及触发器</p><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_03.png" class title="This is an zabbix image"><p>5、mysql主从监控，先要在对应有mysql中创建用于监控的用户(权限要适度)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在&#x2F;usr&#x2F;local&#x2F;zabbix-4.0-agentd&#x2F;etc&#x2F;zabbix_agentd.conf.d下创建server_status.conf配置文件</span><br><span class="line">添加mysql主从监控项</span><br><span class="line">UserParameter&#x3D;mysql.replication,&#x2F;opt&#x2F;67_serv&#x2F;mysql&#x2F;bin&#x2F;mysql -u$(mysql_user) -p$(mysql_passwd) -P$(mysql_port) -h$(mysql_host) -e &#39;show all slaves status\G&#39; | grep &#39;Running&#39; | awk &#39;&#123;print $2&#125;&#39; | grep -c &#39;Yes&#39;</span><br></pre></td></tr></table></figure><p>6、在zabbix_web创建对应监控项及触发器</p><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_04.png" class title="This is an zabbix image"><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_05.png" class title="This is an zabbix image"><p>7、查看创建好的监控项及触发器</p><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_06.png" class title="This is an zabbix image"><p>8、配置好zabbix_agent自定义监控项后，可以在zabbix_server端执行以下命令，确保是不是配置成功,以mysql主从监控为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_get -s mysql_host -p zabbix_agent_port -k mysql.replication</span><br></pre></td></tr></table></figure><img src="/rz168.io/2021/02/25/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E5%8F%8Amysql%E4%B8%BB%E4%BB%8E%E7%9B%91%E6%8E%A7/zabbix_zdy_07.png" class title="This is an zabbix image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zabbix自定义监控及mysql主从监控&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="zabbix" scheme="https://github.com/Piouscc/rz168.io.git/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>elk常用命令及api</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/02/24/elk%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Aapi/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/02/24/elk%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Aapi/</id>
    <published>2021-02-24T05:57:51.000Z</published>
    <updated>2021-02-25T07:26:31.803Z</updated>
    
    <content type="html"><![CDATA[<p>elk常用命令及api</p><a id="more"></a><p>1、常用命令(若没配置用户密码，则省略-u之后选择)<br>1）查看健康状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'localhost:9200/_cluster/health?pretty'</span> -u esusername:espassword</span><br></pre></td></tr></table></figure><p>2）查看所有shard</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">'localhost:9200/_cat/shards'</span> -u esusername:espassword</span><br></pre></td></tr></table></figure><p>3）查看index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET localhost:9200/index_name/_settings?pretty -u esusername:espassword</span><br></pre></td></tr></table></figure><p>4）删除某个index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE localhost:9200/index_name -u esusername:espassword</span><br></pre></td></tr></table></figure><p>删除2021年01月的index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE http://localhost:9200/*.202101* -u esusername:espassword</span><br></pre></td></tr></table></figure><p>2、使用api的原因，例如：需要在某个命名空间创建/删除几十条索引模式,<a href="https://www.elastic.co/guide/en/kibana/7.11/api.html" target="_blank" rel="noopener">kibana官网api链接</a><br>1）删除某些索引模式，根据<a href="https://www.elastic.co/guide/en/kibana/7.11/saved-objects-api-delete.html" target="_blank" rel="noopener">官方文档</a>介绍,需要以下参数<br>space_id:命名空间（此为工作区中的标识符）<br>type：默认的index-pattern即可<br>id：此为索引模式id</p><p>官网例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE &lt;kibana host&gt;:&lt;port&gt;&#x2F;api&#x2F;saved_objects&#x2F;&lt;type&gt;&#x2F;&lt;id&gt;</span><br><span class="line">DELETE &lt;kibana host&gt;:&lt;port&gt;&#x2F;s&#x2F;&lt;space_id&gt;&#x2F;api&#x2F;saved_objects&#x2F;&lt;type&gt;&#x2F;&lt;id&gt;</span><br><span class="line">DELETE &#x2F;s&#x2F;&lt;space_id&gt;&#x2F;api&#x2F;saved_objects&#x2F;&lt;type&gt;&#x2F;&lt;id&gt;</span><br><span class="line">curl -X DELETE api&#x2F;saved_objects&#x2F;index-pattern&#x2F;my-pattern</span><br></pre></td></tr></table></figure><p>实际用到的例子：<br>通过kibana_api获取索引模式id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">api_url=https://kibana_uri</span><br><span class="line">uri=s/space_id/api/saved_objects/_export</span><br><span class="line">username=kibana_name</span><br><span class="line">password=kibana_password</span><br><span class="line"></span><br><span class="line">curl -s -X POST <span class="string">"<span class="variable">$&#123;api_url&#125;</span>/<span class="variable">$&#123;uri&#125;</span>"</span> \</span><br><span class="line">-u <span class="variable">$&#123;username&#125;</span>:<span class="variable">$&#123;password&#125;</span> \</span><br><span class="line">-H <span class="string">'kbn-xsrf: true'</span> \</span><br><span class="line">-H <span class="string">'Content-Type: application/json'</span> \</span><br><span class="line">-d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "type": "index-pattern"</span></span><br><span class="line"><span class="string">&#125;'</span>  \</span><br><span class="line">| jq <span class="string">'.id'</span> \</span><br><span class="line">| grep \* \</span><br><span class="line">| grep -v -E <span class="string">"logs-*|metrics-*"</span> \</span><br><span class="line">| grep <span class="string">"spt\.c"</span> \</span><br><span class="line">|sed <span class="string">'s/\"//g'</span> \</span><br><span class="line">| sort | uniq  &gt;&gt;index_id</span><br></pre></td></tr></table></figure><p>通过kibana_api删除上面获取到的索引模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">api_url=https://kibana_uri</span><br><span class="line">uri=s/space_id/api/saved_objects/index-pattern</span><br><span class="line">username=kibana_name</span><br><span class="line">password=kibana_password</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat /home/<span class="built_in">test</span>/shell/delect_index/index.id`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        curl -X DELETE <span class="string">"<span class="variable">$&#123;api_url&#125;</span>/<span class="variable">$&#123;uri&#125;</span>/<span class="variable">$i</span>"</span> -u <span class="variable">$&#123;username&#125;</span>:<span class="variable">$&#123;password&#125;</span> -H <span class="string">'kbn-xsrf: true'</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>2）对某个命名空间批量创建索引模式<br>取es索引名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'localhost:9200/_cat/indices?v'</span> -u esname:espassword |sort |grep index_name|awk -F <span class="string">'\.20'</span> <span class="string">'&#123;print $1&#125;'</span>|awk <span class="string">'&#123;print $3&#125;'</span>|uniq</span><br></pre></td></tr></table></figure><p>把上面获取到的索引名称在最后都添加上.*,然后放入create_kibana_index_name_with_space<br>批量在对应命名空间创建索引模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#创建索引模式索引，通过读取文件</span></span><br><span class="line">date=`date +%Y-%m-%d`</span><br><span class="line"><span class="comment"># 填写空间URL标识</span></span><br><span class="line">space_id=space_name</span><br><span class="line">api_url=https://kibana_uri</span><br><span class="line">uri=s/<span class="variable">$&#123;space_id&#125;</span>/api/saved_objects/index-pattern/</span><br><span class="line">username=kibana_name</span><br><span class="line">password=kibana_password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat /home/<span class="built_in">test</span>/shell/create_kibana_index_name_with_space` </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    i1=`<span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span> |sed <span class="string">'s/\.\*//g'</span> | sed <span class="string">'s/*//g'</span>`</span><br><span class="line">    uri1=<span class="variable">$&#123;uri&#125;</span><span class="variable">$&#123;i1&#125;</span>_<span class="variable">$&#123;date&#125;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    curl -s -X POST <span class="string">"<span class="variable">$&#123;api_url&#125;</span>/<span class="variable">$&#123;uri1&#125;</span>"</span> \</span><br><span class="line">    -u <span class="variable">$&#123;username&#125;</span>:<span class="variable">$&#123;password&#125;</span> \</span><br><span class="line">    -H <span class="string">'kbn-xsrf: true'</span> \</span><br><span class="line">    -H <span class="string">'Content-Type: application/json'</span> \</span><br><span class="line">    -d <span class="string">"&#123;\"attributes\":&#123;\"title\":\"<span class="variable">$&#123;i&#125;</span>\",\"timeFieldName\":\"@timestamp\"&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elk常用命令及api&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins项目数据备份</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</id>
    <published>2021-01-27T08:54:06.000Z</published>
    <updated>2021-01-28T08:51:17.310Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins项目数据备份<br> <a id="more"></a><br>1、jenkins数据备份，我这里用的是jenkins插件的形式，同时也可以用另外一种方式，就是直接对jenkins的目录进行备份<br>2、jenkins数据备份插件安装，插件管理——&gt;可选插件，安装完成重启jenkins即可，如下图</p><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins01.png" class title="This is an jenkins image"><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins02.png" class title="This is an jenkins image"><p>3、设置自动备份（系统管理——&gt;选择thinbackup插件）<br>创建备份目录，并修改目录对应用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/jenkins_backup</span><br><span class="line">chown jenkins.jenkins -R /opt/jenkins_backup</span><br></pre></td></tr></table></figure><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins03.png" class title="This is an jenkins image"><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins04.png" class title="This is an jenkins image"><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins05.png" class title="This is an jenkins image"><p>按照上方配置后，点击save即可<br>4、测试备份</p><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins06.png" class title="This is an jenkins image"><p>查看对应备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Last login: Thu Jan 28 10:19:27 2021 from 61.140.77.73</span><br><span class="line">[root@sdk_box_test_126 ~]# cd &#x2F;opt&#x2F;</span><br><span class="line">67_serv&#x2F;      app_install&#x2F;  containerd&#x2F;   jenkins_back&#x2F; rh&#x2F;           script&#x2F;       tmp&#x2F;          </span><br><span class="line">[root@test ~]# cd &#x2F;opt&#x2F;jenkins_back&#x2F;</span><br><span class="line">[root@test jenkins_back]# ll</span><br><span class="line">total 144</span><br><span class="line">drwxr-xr-x 2 root    root      4096 Sep 24 16:22 2.248</span><br><span class="line">drwxr-xr-x 2 root    root      4096 Sep 23 13:45 2.249.1</span><br><span class="line">drwxr-xr-x 2 root    root      4096 Sep 23 13:48 2.257</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 129765 Jan 28 00:01 BACKUPSET_2021-01-27_11-15_.zip</span><br><span class="line">drwxr-xr-x 5 jenkins jenkins   4096 Jan 28 00:01 FULL-2021-01-27_16-32</span><br><span class="line">[root@tset jenkins_back]#</span><br></pre></td></tr></table></figure><p>5、备份数据还原（系统管理——&gt;选择thinbackup插件），进入到恢复配置界面，选择对应日期备份还原即可，<br>将此备份文件复制到另一台新安装jenkins服务的服务器上也可以正常还原</p><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins07.png" class title="This is an jenkins image"><img src="/rz168.io/2021/01/27/Jenkins%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/jenkins08.png" class title="This is an jenkins image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins项目数据备份&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/Linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Showdoc自动生成数据字典</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2021/01/19/Showdoc%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2021/01/19/Showdoc%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/</id>
    <published>2021-01-19T07:52:12.800Z</published>
    <updated>2021-01-22T13:29:12.443Z</updated>
    
    <content type="html"><![CDATA[<p>Showdoc自动生成数据字典</p><a id="more"></a><p>1、介绍<br>好的数据字典文档能够清晰地反映出数据库的结构以及相关释义，方便技术人员查阅。我们很容易使用showdoc来生成展示数据库结构的字典文档，并且能根据数据库结构的变动来自动修改文档，省去人工编辑的麻烦。<br>这一切的自动化依赖于我们的上报脚本。你需要下载我们的脚本到你的服务器上执行，上传数据库结构信息到showdoc。上报脚本的源码完全公开，你可以阅读之以确认安全。我们确保它只会上传基本数据库结构信息，不会上传数据库密码配置、业务数据等敏感信息。<br>目前只支持linux下的mysql数据库，更多类型未来再考虑。</p><p>2、操作步骤<br>1）下载执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.showdoc.cc/script/showdoc_db.sh</span><br></pre></td></tr></table></figure><p>2）对应修改配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">项目解释</span><br><span class="line">host数据库所在地址。默认是localhost</span><br><span class="line">port数据库访问端口，默认是3306</span><br><span class="line">user数据库用户名</span><br><span class="line">password密码</span><br><span class="line">db要同步的数据库名。要同步多个db可以将本脚本复制多份</span><br><span class="line">api_keyapi_key，认证凭证。登录showdoc，创建一个项目后，点击右上角的”项目设置”-“开放API”便可看到</span><br><span class="line">api_token同上</span><br><span class="line">cat_name可选。如果想把生成的文档都放在项目的子目录下，则这里填写子目录名。需要创建多层目录的时候请用斜杆隔开，例如 “一层&#x2F;二层&#x2F;三层”</span><br><span class="line">url可选。同步到的url。如果是使用www.showdoc.com.cn ，则不需要再改此项。如果是部署开源版showdoc，请改此项为http:&#x2F;&#x2F;xx.com&#x2F;server&#x2F;index.php?s&#x3D;&#x2F;api&#x2F;open&#x2F;updateDbItem 。其中xx.com为你的部署域名</span><br></pre></td></tr></table></figure><p>3）执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x showdoc_db.sh</span><br><span class="line">./showdoc_db.sh</span><br></pre></td></tr></table></figure><p>4）查看数据字典</p><img src="/rz168.io/2021/01/19/Showdoc%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/showdoc01.png" class title="This is an showdoc image"><p>3、注意事项<br>如果你设置了脚本的自动执行，那么请不要再手动登录showdoc修改文档。因为你的修改都会被自动脚本重新覆盖。<br>因为会覆盖你的修改，所以如果你想为某个字段设置中文注释，请修改mysql字段注释，而不是在showdoc上手动编辑文档。<br>自动执行的情况下，只会自动新增和修改文档，不会自动删除文档（主要出于数据安全考虑）。所以，如果你删除了一张表，文档里是不会删除那个页面的。需要手动登录showdoc来删除。一般来讲，这种情况不会很多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Showdoc自动生成数据字典&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>fluentd_td-agent服务日志收集部署</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/12/16/fluentd-td-agent%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%83%A8%E7%BD%B2/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/12/16/fluentd-td-agent%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%83%A8%E7%BD%B2/</id>
    <published>2020-12-16T03:39:48.000Z</published>
    <updated>2021-01-26T07:50:31.853Z</updated>
    
    <content type="html"><![CDATA[<p>fluentd_td-agent服务日志收集部署</p><a id="more"></a><p>1、td-agent介绍<br>简单来说就是收集日志用的，把服务器上的日志收集起来，发送到指定的地方，统一管理分析，功能比较强大，如<a href="https://www.fluentd.org/" target="_blank" rel="noopener">官网图</a>所示：</p><img src="/rz168.io/2020/12/16/fluentd-td-agent%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%83%A8%E7%BD%B2/td-agent01.png" class title="This is an td-agent image"><p>它可以收集常用服务，如apache,db等日志，也可以收集由不同语言实现的app日志，对于收集到的日志，也有多种处理方式可供选择，比如存到mongodb上，或者亚马逊的s3服务等。<br>2、td-agent安装及启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">适于Redhat&amp;Centos的安装方式:</span><br><span class="line">curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent4.sh | sh</span><br><span class="line">systemctl start td-agent</span><br><span class="line">systemctl <span class="built_in">enable</span> td-agent</span><br></pre></td></tr></table></figure><p>3、修改nginx配置，让nginx日志变成json格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br><span class="line">添加以下内容：</span><br><span class="line">        log_format    access_post_ltsv  <span class="string">"remote_addr:<span class="variable">$remote_addr</span>"</span></span><br><span class="line">                                        <span class="string">"\tremote_user:<span class="variable">$remote_user</span>"</span></span><br><span class="line">                                        <span class="string">"\ttime_local:<span class="variable">$time_local</span>"</span></span><br><span class="line">                                        <span class="string">"\trequest:<span class="variable">$request</span>"</span></span><br><span class="line">                                        <span class="string">"\tstatus:<span class="variable">$status</span>"</span></span><br><span class="line">                                        <span class="string">"\tbody_bytes_sent:<span class="variable">$body_bytes_sent</span>"</span></span><br><span class="line">                                        <span class="string">"\tbytes_sent:<span class="variable">$bytes_sent</span>"</span></span><br><span class="line">                                        <span class="string">"\trequest_length:<span class="variable">$request_length</span>"</span></span><br><span class="line">                                        <span class="string">"\trequest_time:<span class="variable">$request_time</span>"</span></span><br><span class="line">                                        <span class="string">"\trequest_completion:<span class="variable">$request_completion</span>"</span></span><br><span class="line">                                        <span class="string">"\thttp_referer:<span class="variable">$http_referer</span>"</span></span><br><span class="line">                                        <span class="string">"\thttp_user_agent:<span class="variable">$http_user_agent</span>"</span></span><br><span class="line">                                        <span class="string">"\thttp_x_forwarded_for:<span class="variable">$http_x_forwarded_for</span>"</span></span><br><span class="line">                                        <span class="string">"\thttps:<span class="variable">$https</span>"</span></span><br><span class="line">                                        <span class="string">"\trequest_body:<span class="variable">$request_body</span>"</span></span><br><span class="line">                                        <span class="string">"\thttp_accept:<span class="variable">$http_Accept</span>"</span>;</span><br><span class="line">在对应conf下添加日志格式</span><br><span class="line">access_log      /var/67_serv/<span class="built_in">log</span>/<span class="variable">$host</span>.nginx.log.ltsv     access_post_ltsv;</span><br></pre></td></tr></table></figure><p>4、修改td-agent配置文件，收集nginx配置及输出到es，对应<a href="https://docs.fluentd.org/" target="_blank" rel="noopener">官方文档地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/td-agent/td-agent.conf</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line">&lt;<span class="built_in">source</span>&gt;</span><br><span class="line">    <span class="built_in">type</span> tail</span><br><span class="line">    format /^(?&lt;ip&gt;[^ ]*)\s(?&lt;domain&gt;[^ ]*)\s(?&lt;cdnip&gt;[^ ]*)\s\[(?&lt;access_time&gt;\w.*)?\]\s\"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +(?&lt;protocol&gt;\S*))?<span class="string">"\s(?&lt;http_code&gt;\d*)\s(?&lt;size&gt;\d*)/</span></span><br><span class="line"><span class="string">    path /var/67_serv/log/platform.50x.php.log</span></span><br><span class="line"><span class="string">    pos_file /var/67_serv/td-agent/platform.50x.php.log.pos</span></span><br><span class="line"><span class="string">    tag test.nginx.platform.50x.php.log</span></span><br><span class="line"><span class="string">    read_from_head true</span></span><br><span class="line"><span class="string">&lt;/source&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--------------------------或以下json收集方式-----------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;source&gt;</span></span><br><span class="line"><span class="string">    @type tail</span></span><br><span class="line"><span class="string">    &lt;parse&gt;</span></span><br><span class="line"><span class="string">        @type ltsv</span></span><br><span class="line"><span class="string">    &lt;/parse&gt;</span></span><br><span class="line"><span class="string">    path /var/67_serv/log/s.test.nginx.log.ltsv</span></span><br><span class="line"><span class="string">    pos_file /var/67_serv/td-agent/s.test.com.nginx.log.pos</span></span><br><span class="line"><span class="string">    tag test.nginx.access.api</span></span><br><span class="line"><span class="string">&lt;/source&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#获取主机hostname</span></span><br><span class="line"><span class="string">&lt;filter  test.**&gt;</span></span><br><span class="line"><span class="string">  @type record_transformer</span></span><br><span class="line"><span class="string">  &lt;record&gt;</span></span><br><span class="line"><span class="string">    hostname "</span><span class="comment">#&#123;Socket.gethostname&#125;"</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;match <span class="built_in">test</span>.**&gt;</span><br><span class="line">    @<span class="built_in">type</span> elasticsearch</span><br><span class="line">    @log_level debug</span><br><span class="line">    reconnect_on_error <span class="literal">true</span></span><br><span class="line">    reload_on_failure <span class="literal">true</span></span><br><span class="line">    reload_connections <span class="literal">false</span></span><br><span class="line">    host you es name</span><br><span class="line">    port you es port</span><br><span class="line">    user you es user</span><br><span class="line">    password you es passord</span><br><span class="line">    flush_interval 5s</span><br><span class="line">    include_timestamp <span class="literal">true</span></span><br><span class="line">    index_name <span class="variable">$&#123;tag&#125;</span>.%Y%m%d</span><br><span class="line">    &lt;buffer tag,time&gt;</span><br><span class="line">      @<span class="built_in">type</span> memory</span><br><span class="line">      timekey 1d</span><br><span class="line">      flush_mode interval</span><br><span class="line">      retry_type exponential_backoff</span><br><span class="line">      flush_thread_count 2</span><br><span class="line">      flush_interval 5s</span><br><span class="line">      retry_forever</span><br><span class="line">      retry_max_interval 30</span><br><span class="line">      chunk_limit_size 2M</span><br><span class="line">      queue_limit_length 8</span><br><span class="line">      overflow_action block</span><br><span class="line">    &lt;/buffer&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure><p>5、测试td-agent配置是否正确,若没报error，则证明配置正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">td-agent -c /etc/td-agent/td-agent.conf</span><br></pre></td></tr></table></figure><p>7、kibana web界面查看并添加对应索引</p><img src="/rz168.io/2020/12/16/fluentd-td-agent%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%83%A8%E7%BD%B2/td-agent02.png" class title="This is an td-agent image"><p>8、查看索引日志</p><img src="/rz168.io/2020/12/16/fluentd-td-agent%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E9%83%A8%E7%BD%B2/td-agent03.png" class title="This is an td-agent image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fluentd_td-agent服务日志收集部署&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>记一次gitlab迁移到docker容器</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/12/10/gitlab%E8%BF%81%E7%A7%BB%E5%88%B0docker%E5%AE%B9%E5%99%A8/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/12/10/gitlab%E8%BF%81%E7%A7%BB%E5%88%B0docker%E5%AE%B9%E5%99%A8/</id>
    <published>2020-12-10T03:18:14.000Z</published>
    <updated>2021-02-21T08:38:43.356Z</updated>
    
    <content type="html"><![CDATA[<p>记一次gitlab迁移到docker容器</p><a id="more"></a><p>由于早两天已经把线上的gitlab版本<a href="https://piouscc.github.io/rz168.io/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/" target="_blank" rel="noopener">升级13.6.1</a>，刚接到需求，需要把gitlab迁移到docker容器<br>1、修改服务器ssh22端口<br>注意：gitlab容器需要开放22端口，同时远程服务器默认为22端口，则需要提前把服务器上的端口更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">Port 22    <span class="comment">#把这个改成自己想要的，然后重启服务即可</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>2、在原gitlab备份数据，注：这里需要停止写入，即禁止同事提交代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><p>3、执行备份命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GitLab 12.2或更高版本：</span><br><span class="line">sudo gitlab-backup create</span><br><span class="line">GitLab 12.1和更早版本：</span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>4、提前安装好docker服务，<br>有需要的请看<a href="https://piouscc.github.io/rz168.io/2020/05/15/docker-ce-%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">docker服务安装</a><br>略<br>5、到docker镜像官网搜索对应版本的gitlab镜像<br>进入<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker镜像官网</a>搜索gitlab<br>6、摘取gitlab镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:13.6.1-ce.0</span><br></pre></td></tr></table></figure><p>7、启动gitlab容器，目录不存在，则自动创建,9a53eb68aeeb这个为镜像ID（docker images获取）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=gitlab -d --publish 22:22 --publish 1443:443 --publish 9999:80 --restart always --privileged=<span class="literal">true</span> --volume /data/gitlab/config:/etc/gitlab --volume /data/gitlab/logs:/var/<span class="built_in">log</span>/gitlab --volume /data/gitlab/data:/var/opt/gitlab 9a53eb68aeeb</span><br></pre></td></tr></table></figure><p>8、恢复备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;11*.tar &#x2F;data&#x2F;gitlab&#x2F;data&#x2F;backups&#x2F;</span><br><span class="line">进入容器：</span><br><span class="line">docker exec -it gitlab &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;</span><br><span class="line">chown git.git 11*.tar</span><br><span class="line">执行数据恢复：</span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP&#x3D;11*  force&#x3D;yes （其中11*为备份文件名）</span><br></pre></td></tr></table></figure><p>9、复制原gitlab配置文件及gitlab-secrets.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb &#x2F;data&#x2F;gitlab&#x2F;config&#x2F;</span><br><span class="line">cp &#x2F;etc&#x2F;gitlab&#x2F;gitlab-secrets.json &#x2F;data&#x2F;gitlab&#x2F;config&#x2F;</span><br></pre></td></tr></table></figure><p>10、更新gitlab配置及重启gitlab服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入容器：</span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次gitlab迁移到docker容器&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次gitlab跨大版本升级</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</id>
    <published>2020-11-30T12:12:58.000Z</published>
    <updated>2020-12-10T03:36:42.939Z</updated>
    
    <content type="html"><![CDATA[<p>记一次gitlab跨大版本升级</p><a id="more"></a><p>1、查看当前系统版本及gitlab版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br><span class="line">[root@VM_3_3_centos ~]<span class="comment"># rpm -qa | grep gitlab</span></span><br><span class="line">gitlab-ce-10.5.6-ce.0.el6.x86_64</span><br></pre></td></tr></table></figure><p>从上面两条命令可以得出现在所用到的系统为Centos 7.8，gitlab 10.5.6，<br>则我们需要下载对应系统的软件包<a href="https://packages.gitlab.com/gitlab" target="_blank" rel="noopener">gitlab软件rpm包下载地址</a><br>2、升级版本顺序<a href="https://docs.gitlab.com/ee/update/README.html#upgrade-paths" target="_blank" rel="noopener">gitlab官网</a><br>按照官网升级路线：<br>8.11.x-&gt; 8.12.0-&gt; 8.17.7-&gt; 9.5.10-&gt; 10.8.7-&gt; 11.11.8-&gt; 12.0.12-&gt; 12.1.17-&gt; 12.10.14-&gt; 13.0.14-&gt; 13.1.11-&gt;13.5.3<br>个人简化路线：<br>10.5.6 ce –&gt; 10.8.7 ce -&gt; 11.11.3 ee –&gt; 12.10.14 ce –&gt; 13.0.14 ce –&gt; 13.6.1 ce<br>3、下载对应软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ee&#x2F;yum&#x2F;el7&#x2F;gitlab-ee-11.11.3-ee.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-12.10.14-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.0.4-ce.0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.6.1-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>4、安装gitlab-ce-10.8.7<br>停止相关服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>5、执行升级安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>6、更新数据库操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:check</span><br><span class="line">gitlab-rake db:migrate</span><br></pre></td></tr></table></figure><p>7、启动相关服务，刷新配置并重启gitlab所有服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start unicorn</span><br><span class="line">gitlab-ctl start sidekiq</span><br><span class="line">gitlab-ctl start nginx</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>8、当启动完gitlab所有服务需要等几分钟才能正常访问gitlab_web，不然显示为502<br>图略<br>9、接下来升级步骤和上面的一样，即重复操作第（4、5、6、7步），则这里直接省略<br>10、升级完成版本显示如下图：</p><img src="/rz168.io/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/gitlab01.png" class title="This is an gitlab image"><p>11、由于gitlab版本升级，则需要在本地每个gitlab项目中重新执行git pull<br>如果提示一下这图片，则需要手动删除对应系统目录下的.ssh目录下的known_hosts<br>文件里的gitlab地址密钥，若自己的电脑只有gitlab的密钥，可以直接把known_hosts文件删除，<br>对应删除的原因是因为有些朋友还会连github项目或者其它的都会保存密钥到此文件</p><img src="/rz168.io/2020/11/30/gitlab%E8%B7%A8%E5%A4%A7%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/gitlab02.png" class title="This is an gitlab image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次gitlab跨大版本升级&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>gitlab备份与恢复</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/28/gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/28/gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2020-11-28T06:47:54.000Z</published>
    <updated>2020-12-22T03:17:01.002Z</updated>
    
    <content type="html"><![CDATA[<p>gitlab备份与恢复<br> <a id="more"></a><br>一、备份<br>1、gitlab的备份比较简单，直接使用自带的即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GitLab 12.2或更高版本：</span><br><span class="line">sudo gitlab-backup create</span><br><span class="line">GitLab 12.1和更早版本：</span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>2、默认备份路径为：/var/opt/gitlab/backups，如果想更换备份路径可以直接修改gitlab配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line">gitlab_rails[&#39;backup_path&#39;] &#x3D; &quot;&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&quot;</span><br></pre></td></tr></table></figure><p>3、每次修改完gitlab配置文件需要重新载入配置,否则配置不会读取更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>二、恢复<br>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复。<br>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。<br>特别注意：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。<br>1、gitlab的恢复也相对于简单，先停用相关连接服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>2、然后进行命令恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1606410105_2020_11_27_10.5.6_gitlab_backup.tar</span><br><span class="line">当只有一个备份文件时，直接执行下面命令即可，恢复期间大概有两个地方需要手动输入yes，当出现多个<span class="keyword">done</span>时，则表示恢复成功</span><br><span class="line">gitlab-rake gitlab:backup:restore</span><br></pre></td></tr></table></figure><p>3、恢复成功后启动上面关闭的服务，以及重新执行配置gitlab，重启gitllab全部服务（建议）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start unicorn</span><br><span class="line">gitlab-ctl start sidekiq</span><br><span class="line">gitlab-ctl start nginx</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>4、然后打开浏览器，输入对应gitlab地址即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gitlab备份与恢复&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="Jenkins" scheme="https://github.com/Piouscc/rz168.io.git/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-03T08:56:13.000Z</published>
    <updated>2021-01-26T07:54:30.944Z</updated>
    
    <content type="html"><![CDATA[<p>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</p><a id="more"></a><p>1、本文基于上两篇文章进行配置（elasticsearch集群部署和kibana服务安装）<br>2、服务器配置信息及软件版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|192.168.0.12|es01|es 7.9.3|</span><br><span class="line">|192.168.0.13|es02|es 7.9.3|</span><br><span class="line">|192.168.0.17|es03|es 7.9.3|</span><br><span class="line">|192.168.0.17|es03|kibana 7.9.3|</span><br></pre></td></tr></table></figure><p>3、停止现在运行的elk环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/elasticsearch_pid | xargs kill -9 </span><br><span class="line">pkill kibana</span><br></pre></td></tr></table></figure><p>4、开启xpack配置<br>修改作为主节点的elasticsearch配置文件，添加如下命令开启x-pack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>5、生成安全秘钥，执行以下命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-certutil ca -out config/elastic-certificates.p12 -pass <span class="string">""</span></span><br></pre></td></tr></table></figure><p>6、执行上面命令后，在config文件夹多出了文件elastic-certificates.p12，此时需要继续配置es配置文件，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>7、然后启动当前服务器的es</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/su - es -c <span class="string">'/usr/local/elasticsearch-7.9.3/bin/elasticsearch -p /tmp/elasticsearch_pid -d'</span></span><br></pre></td></tr></table></figure><p>8、配置初始账号密码（这里有两种配置方式）<br>1）自动生成密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure><p>2）手动配置指定密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><p>然后会对应生成elastic账号，谨记所设置的密码，因为下面配置会用到<br>9、验证elasticsearch，浏览器输入对应的IP:9200提示下图，则配置成功</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass01.png" class title="This is an kibana image"><p>10、配置剩下两台集群机器<br>这里需要把主节点生成的elastic-certificates.p12分别复制到相关节点的config下<br>同时各自的elasticsearch.yml文件新增以下配置,再执行启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>11、配置kibana权限<br>修改Kibana配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line">elasticsearch.hosts: ["http://127.0.0.1:9200"]</span><br><span class="line">kibana.index: ".kibana"</span><br><span class="line">i18n.locale: "zh-CN"</span><br><span class="line"><span class="meta">#</span><span class="bash">新增配置</span></span><br><span class="line">elasticsearch.username: "elastic"</span><br><span class="line">elasticsearch.password: "123456"</span><br><span class="line">xpack.security.enabled: true</span><br></pre></td></tr></table></figure><p>12、启动kibana，并访问kibana界面，测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su es -c '/usr/local/kibana-7.9.3/bin/kibana &amp; '</span><br></pre></td></tr></table></figure><p>浏览器键入：192.168.0.12:5601</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass02.png" class title="This is an kibana image"><p>13、登陆成功界面以及配置用户权限界面</p><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass03.png" class title="This is an kibana image"><img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass04.png" class title="This is an kibana image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Kibana服务安装</title>
    <link href="https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/Piouscc/rz168.io.git/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/</id>
    <published>2020-11-03T08:55:42.000Z</published>
    <updated>2021-01-26T07:54:16.193Z</updated>
    
    <content type="html"><![CDATA[<p>Kibana服务安装</p><a id="more"></a><p>1、kibana简介<br>Kibana 是一个免费且开放的用户界面，能够让您对 Elasticsearch 数据进行可视化，并让您在 Elastic Stack 中进行导航。您可以进行各种操作，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。</p><p>Kibana是ElasticSearch的一个工具，用来分析ES中的数据并以各种图形界面显示出来<br>可以作为ElasticSearch的一个客户端，在Kibana中可以很轻松的调用ES的RESTful接口<br>2、部署kibana，这里用的方法是通过ansible-playbook，如下<br>有需要的可以自行查看本人的<a href="https://github.com/Piouscc/dev">github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: kibana</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="string">"下载 kibana-7.9版本"</span></span><br><span class="line">      shell: |-</span><br><span class="line">        date ;</span><br><span class="line">        Downloads_dir=/usr/<span class="built_in">local</span>/src</span><br><span class="line">        wget -O <span class="variable">$Downloads_dir</span>/kibana-7.9.3-linux-x86_64.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-7.10.0-linux-x86_64.tar.gz &gt; /dev/null</span><br><span class="line">    - name: <span class="string">"解压kibana"</span></span><br><span class="line">      shell: <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; tar -xf kibana-7.9.3-linux-x86_64.tar.gz &amp;&amp; mv kibana-7.9.3-linux-x86_64 ../kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"复制kibana配置文件"</span></span><br><span class="line">      template: src=kibana.yml dest=/usr/<span class="built_in">local</span>/kibana-7.9.3/config/</span><br><span class="line">    - name: <span class="string">"修改目录用户及组"</span></span><br><span class="line">      shell: chown esuser.www -R /usr/<span class="built_in">local</span>/kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"启动kibana"</span></span><br><span class="line">      shell: su esuser -c <span class="string">'/usr/local/kibana-7.9.3/bin/kibana &amp; '</span></span><br></pre></td></tr></table></figure><p>3、执行安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -v kibana.yml</span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki01.png" class title="This is an jenkins image"><p>4、查看kibana服务进程及端口，默认端口为5601</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 config]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:5601            0.0.0.0:*               LISTEN      3797/node           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      963/sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1132/master         </span><br><span class="line">tcp6       0      0 192.168.0.17:9200       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 192.168.0.17:9300       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      963/sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1132/master         </span><br><span class="line">[root@node02 config]<span class="comment"># ps -ef |grep kibana</span></span><br><span class="line">esuser     3797      1 87 15:26 ?        00:01:01 /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../node/bin/node /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../src/cli</span><br><span class="line">root       3868   2072  1 15:27 pts/1    00:00:00 grep --color=auto kibana</span><br><span class="line">[root@node02 config]<span class="comment">#</span></span><br></pre></td></tr></table></figure><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki02.png" class title="This is an kibana image"><p>5、访问kibana web界面</p><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki03.png" class title="This is an kibana image"><img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki04.png" class title="This is an kibana image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kibana服务安装&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://github.com/Piouscc/rz168.io.git/tags/linux/"/>
    
      <category term="elk" scheme="https://github.com/Piouscc/rz168.io.git/tags/elk/"/>
    
  </entry>
  
</feed>
