<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker-compose之Jenkins安装</title>
    <url>/rz168.io/2020/07/09/Docker-compose%E4%B9%8BJenkins%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Docker-compose之Jenkins安装<br> <a id="more"></a><br>1、Jenkins是什么？<br>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。<br>Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。<br>详细请访问官网：<a href="https://www.jenkins.io/zh/doc/" target="_blank" rel="noopener">https://www.jenkins.io/zh/doc/</a></p>
<p>2、安装<br>由于Jenkins的安装方式有很多种，如：Docker、war、apt-get<br>之前介绍过docker-compose的安装，那么我们这里就用docker-compose的方式安装Jenkins</p>
<p>3、创建映射目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/jenkins     <span class="comment">#此为映射目录</span></span><br><span class="line">mkdir /opt/docker-compose-jenkins                 <span class="comment">#此为docker-compose.yml文件目录</span></span><br></pre></td></tr></table></figure>

<p>4、编写docker-compose.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">'3.7'</span></span><br><span class="line">services:</span><br><span class="line">  webjenkins:</span><br><span class="line">    container_name: webjenkins</span><br><span class="line">    image: <span class="string">'jenkins/jenkins:lts'</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">'8080:8080'</span>                                <span class="comment">#此处为映射端口，可以根据个人喜欢而设置</span></span><br><span class="line">      - <span class="string">'50001:50000'</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./jenkins:/var/jenkins_home</span><br><span class="line">      - ./jenkins/docker.sock:/var/run/docker.sock</span><br><span class="line">    network_mode: <span class="string">"dockerfile_jumpserver"</span>          <span class="comment">#此处为容器网络，可以设置为其它的</span></span><br></pre></td></tr></table></figure>

<p>5、利用docker-compose构建Jenkins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker-compose-jenkins</span><br><span class="line">docker-compose -f docker-compose.yml up -d         <span class="comment">#表示在后台运行，此处需要下载镜像，可能需要等待几分钟</span></span><br><span class="line">docker-compose -f docker-compose.yml down           <span class="comment">#同理进入docker-compose.yml对应目录，关闭对应容器</span></span><br></pre></td></tr></table></figure>

<p>6、查看容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps                                           <span class="comment">#表示启动的容器</span></span><br><span class="line">docker ps -a                                        <span class="comment">#表示显示全部容器</span></span><br></pre></td></tr></table></figure>

<p>7、容器启动成功后，可以访问宿主机IP:8080端口进入Jenkins页面，如下</p>
<img src="/rz168.io/2020/07/09/Docker-compose%E4%B9%8BJenkins%E5%AE%89%E8%A3%85/setup-jenkins-01-page.jpg" class title="This is an jenkins image">

<p>8、这时需要一个登陆密码，在docker-compose里有定义映射目录，这里可以直接从映射目录查看,然后设置用户，也可以跳过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /data/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>

<p>9、解锁jenkins后，在 Customize Jenkins 页面内， 您可以安装任何数量的有用插件作为您初始步骤的一部分。<br>两个选项可以设置:<br>安装建议的插件 - 安装推荐的一组插件，这些插件基于最常见的用例.<br>选择要安装的插件 - 选择安装的插件集。当你第一次访问插件选择页面时，默认选择建议的插件。</p>
<p>10、安装完成的界面如下：</p>
<img src="/rz168.io/2020/07/09/Docker-compose%E4%B9%8BJenkins%E5%AE%89%E8%A3%85/setup-jenkins-02-page.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos_Harbor环境搭建及使用</title>
    <url>/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Centos_Harbor环境搭建及使用<br> <a id="more"></a><br>1、什么是Harbor<br>Harbor是一个开放源代码注册中心，它通过策略和基于角色的访问控制来保护工件，确保扫描图像并使其免受漏洞侵害，并将图像签名为受信任的。<br>Harbor是CNCF毕业的项目，可提供合规性，性能和互操作性，以帮助您跨Kubernetes和Docker等云原生计算平台持续，安全地管理工件。</p>
<p>2、安装Harbor的最低和建议软、硬件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CPU:最低2C，推荐4C</span><br><span class="line">内存：最低4G,推荐8G</span><br><span class="line">硬盘：最低40G,推荐160G</span><br><span class="line"></span><br><span class="line">docker-version:17.06.0-ce+</span><br></pre></td></tr></table></figure>

<p>3、下载及解压文件,也可以先下载再把文件上传到服务器，进行解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.1.0/harbor-online-installer-v2.1.0.tgz</span><br><span class="line">tar -xvf harbor-online-installer-v2.1.0.tgz</span><br></pre></td></tr></table></figure>
<p>4、修改harbor配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line">sed -i <span class="string">'/^#/d;/^$/d;/^  #/d'</span> harbor.yml</span><br><span class="line">修改hostname为192.168.0.143</span><br><span class="line">vi harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: 192.168.0.143</span><br><span class="line">http:</span><br><span class="line">  port: 80</span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">  max_idle_conns: 50</span><br><span class="line">  max_open_conns: 1000</span><br><span class="line">data_volume: /data</span><br><span class="line">clair:</span><br><span class="line">  updaters_interval: 12</span><br><span class="line">trivy:</span><br><span class="line">  ignore_unfixed: <span class="literal">false</span></span><br><span class="line">  skip_update: <span class="literal">false</span></span><br><span class="line">  insecure: <span class="literal">false</span></span><br><span class="line">jobservice:</span><br><span class="line">  max_job_workers: 10</span><br><span class="line">notification:</span><br><span class="line">  webhook_job_max_retry: 10</span><br><span class="line">chart:</span><br><span class="line">  absolute_url: disabled</span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line">  level: info</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    location: /var/<span class="built_in">log</span>/harbor</span><br><span class="line">_version: 2.0.0</span><br></pre></td></tr></table></figure>
<p>5、启动Harbor服务，实际就是在docker拉取镜像启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br><span class="line">提示如下，则表示安装成功</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating redis         ... <span class="keyword">done</span></span><br><span class="line">Creating registryctl   ... <span class="keyword">done</span></span><br><span class="line">Creating registry      ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-portal ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db     ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-core   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx             ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br></pre></td></tr></table></figure>
<p>6、查看对应容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@system harbor]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                       NAMES</span><br><span class="line">8441988f22e4        goharbor/harbor-jobservice:v2.1.0    <span class="string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-jobservice</span><br><span class="line">5223df8d89eb        goharbor/nginx-photon:v2.1.0         <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute (healthy)   0.0.0.0:80-&gt;8080/tcp        nginx</span><br><span class="line">13cd522bbf86        goharbor/harbor-core:v2.1.0          <span class="string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-core</span><br><span class="line">848962ff7f6d        goharbor/harbor-db:v2.1.0            <span class="string">"/docker-entrypoint.…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-db</span><br><span class="line">91dcdf76cf12        goharbor/harbor-portal:v2.1.0        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute (healthy)                               harbor-portal</span><br><span class="line">bb50db31e37b        goharbor/harbor-registryctl:v2.1.0   <span class="string">"/home/harbor/start.…"</span>   About a minute ago   Up About a minute (healthy)                               registryctl</span><br><span class="line">4570444ae911        goharbor/registry-photon:v2.1.0      <span class="string">"/home/harbor/entryp…"</span>   About a minute ago   Up About a minute (healthy)                               registry</span><br><span class="line">0e169241429a        goharbor/redis-photon:v2.1.0         <span class="string">"redis-server /etc/r…"</span>   About a minute ago   Up About a minute (healthy)                               redis</span><br><span class="line">90aa91304cf5        goharbor/harbor-log:v2.1.0           <span class="string">"/bin/sh -c /usr/loc…"</span>   About a minute ago   Up About a minute (healthy)   127.0.0.1:1514-&gt;10514/tcp   harbor-log</span><br><span class="line">[root@system harbor]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>7、访问Harbor web页面,浏览器输入<a href="http://192.168.0.143，默认账号密码为：admin">http://192.168.0.143，默认账号密码为：admin</a> Harbor12345</p>
<img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor01.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor02.png" class title="This is an jenkins image">
<p>8、测试推送镜像到Harbor仓库<br>1)编译daemon.json文件，加入本地Harbor仓库地址：192.168.0.143</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"bip"</span>: <span class="string">"172.17.0.1/16"</span>,</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">     <span class="string">"https://bxsfpjcb.mirror.aliyuncs.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"192.168.0.143:80"</span>],</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/opt/docker"</span>,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dns-search"</span>: [<span class="string">"default.svc.cluster.local"</span>, <span class="string">"svc.cluster.local"</span>, <span class="string">"localdomain"</span>],</span><br><span class="line">  <span class="string">"dns-opts"</span>: [<span class="string">"ndots:2"</span>, <span class="string">"timeout:2"</span>, <span class="string">"attempts:2"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、重启docker服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>
<p>10、下载一个测试镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker pull alpine</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/alpine</span><br><span class="line">df20fa9351a1: Pull complete </span><br><span class="line">Digest: sha256:185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> alpine:latest</span><br><span class="line">docker.io/library/alpine:latest</span><br></pre></td></tr></table></figure>
<p>11、给镜像打个tag标签,然后查看镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker tag alpine:latest 192.168.0.143:80/library/alpine:v1.0</span></span><br><span class="line">命令对应解释：</span><br><span class="line">	alpine:latest   我们前面下载的镜像</span><br><span class="line">	192.168.0.143:80  私有镜像仓库IP及端口</span><br><span class="line">	library：私有仓库项目名称</span><br><span class="line">	alpine:镜像名称</span><br><span class="line">	v1.0:版本号</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># docker images </span></span><br><span class="line">REPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">quay.mirrors.ustc.edu.cn/brancz/kube-rbac-proxy     v0.6.0              805578441b3f        3 months ago        42.3MB</span><br><span class="line">192.168.0.143:80/library/alpine                        latest              a24bb4013296        3 months ago        5.57MB</span><br><span class="line">alpine                                              latest              a24bb4013296        3 months ago        5.57MB</span><br><span class="line">fanux/lvscare                                       latest              5b6ef5a251c5        5 months ago        360MB</span><br><span class="line">k8s.gcr.io/kube-proxy                               v1.18.0             43940c34f24f        6 months ago        117MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager                  v1.18.0             d3e55153f52f        6 months ago        162MB</span><br><span class="line">k8s.gcr.io/kube-scheduler                           v1.18.0             a31f78c7c8ce        6 months ago        95.3MB</span><br><span class="line">k8s.gcr.io/kube-apiserver                           v1.18.0             74060cea7f70        6 months ago        173MB</span><br><span class="line">k8s.gcr.io/pause                                    3.2                 80d28bedfe5d        7 months ago        683kB</span><br><span class="line">k8s.gcr.io/coredns                                  1.6.7               67da37a9a360        7 months ago        43.8MB</span><br><span class="line">k8s.gcr.io/etcd                                     3.4.3-0             303ce5db0e90        11 months ago       288MB</span><br><span class="line">calico/node                                         v3.8.2              11cd78b9e13d        13 months ago       189MB</span><br><span class="line">calico/cni                                          v3.8.2              c71c24a0b1a2        13 months ago       157MB</span><br><span class="line">calico/kube-controllers                             v3.8.2              de959d4e3638        13 months ago       46.8MB</span><br><span class="line">calico/pod2daemon-flexvol                           v3.8.2              96047edc008f        13 months ago       9.37MB</span><br><span class="line">quay.mirrors.ustc.edu.cn/prometheus/node-exporter   v0.18.1             e5a616e4b9cf        15 months ago       22.9MB</span><br></pre></td></tr></table></figure>
<p>12、登陆本地镜像仓库,输入对应的Harbor账号密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker login http://192.168.0.143:80</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<p>13、推送镜像到私有仓库Harbor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker push 192.168.0.143:80/library/alpine:v1.0 </span></span><br><span class="line">The push refers to repository [192.168.0.143:80/library/alpine]</span><br><span class="line">50644c29ef5a: Pushed </span><br><span class="line">latest: digest: sha256:a15790640a6690aa1730c38cf0a440e2aa44aaca9b0e8931a9f2b0d7cc90fd65 size: 528</span><br></pre></td></tr></table></figure>
<p>14、Harbor web界面查看，如下图所示</p>
<img src="/rz168.io/2020/09/22/Centos-Harbor%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/harbor03.png" class title="This is an jenkins image">
<p>15、配置Harbor开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="comment">#harbor start</span></span><br><span class="line"><span class="built_in">cd</span> /root/harbor &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>16、备份与恢复<br>由于上面所说到data_volume: /data，也就说明Harbor镜像存放在/data目录如下可以看到上面所上传的镜像名称alpine：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@system ~]<span class="comment"># ls /data/registry/docker/registry/v2/repositories/library/</span></span><br><span class="line">alpine</span><br><span class="line"></span><br><span class="line">也就说明若要备份可以直接备份此目录/data/registry即可</span><br><span class="line">当需要恢复时，把配置文件data_volume配置到对应目录即可</span><br></pre></td></tr></table></figure>
<p>17、注意事项<br>公开的项目，推送镜像时，docker必须要登录。</p>
<p>下载镜像时，无须登录。</p>
<p>非公开项目，下载和推送，必须docker登录才行。</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+gitlab自动部署</title>
    <url>/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Jenkins+gitlab自动部署<br> <a id="more"></a><br>1、持续集成<br>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译、发布、自动化测试）来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。<br>2、安装Jenkins插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab hook</span><br><span class="line">GitLab Plugin</span><br><span class="line">SSH plugin</span><br><span class="line">Git plugin</span><br></pre></td></tr></table></figure>
<p>3、配置Jenkins，创建一个命名为：JOb的任务，选择第一个Freestyle project</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins01.png" class title="This is an jenkins image">
<p>4、源码管理，这里我们选择我们gitlab上的地址如：<a href="mailto:git@192.168.0.143">git@192.168.0.143</a>:root/test.git，然后添加凭据</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins02.png" class title="This is an jenkins image">
<p>5、添加凭据如下图，这里用的用户为服务器上的www用户及www用户的私钥</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins03.png" class title="This is an jenkins image">
<p>6、添加完成凭据正确显示下图</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins04.png" class title="This is an jenkins image">
<p>7、选择构建触发器并复制对应url地址</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins06.png" class title="This is an jenkins image">
<p>8、添加构建步骤，这里可以是执行shell,python,linux命令等，这里就echo 1</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins05.png" class title="This is an jenkins image">
<p>9、配置gitlab，由于已经有一个项目，则直接使用<br>点击项目，进入项目管理界面，然后点击设置————&gt;webhooks————&gt;输入上面的url地址：<a href="http://192.168.0.143:8088/project/Job，及凭据ID号" target="_blank" rel="noopener">http://192.168.0.143:8088/project/Job，及凭据ID号</a><br>如下图</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/gitlab01.png" class title="This is an jenkins image">
<p>10、然后我们修改项目的一些文件内容，再通过git提交到gitlab</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/linux01.png" class title="This is an jenkins image">
<p>11、通过jenkins web界面查看是否自动触发任务</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins09.png" class title="This is an jenkins image">
<p>12、查看jenkins任务运行任务的步骤</p>
<img src="/rz168.io/2020/09/27/Jenkins-gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/jenkins10.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>ClickHouse-server-集群部署</title>
    <url>/rz168.io/2020/05/19/ClickHouse-server-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Clickhouse集群部署</p>
<a id="more"></a>
<p>引入一个问题：什么是Clickhouse？<br>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。<br>常见的行式数据库系统有：MySQL、Postgres和MS SQL Server。<br>常见的列式数据库有： Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright、 InfiniDB、 MonetDB (VectorWise， Actian Vector)、 LucidDB、 SAP HANA、 Google Dremel、 Google PowerDrill、 Druid、 kdb+。<br>关于Clickhouse性能，可以参考官网（有中文版的）：<a href="https://clickhouse.tech/docs/zh/introduction/performance/" target="_blank" rel="noopener">https://clickhouse.tech/docs/zh/introduction/performance/</a></p>
<p>主要特性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">真正的面向列的DBMS</span><br><span class="line">实时数据更新</span><br><span class="line">SQL语法支持</span><br><span class="line">多核并行处理</span><br><span class="line">数据高效压缩</span><br><span class="line">分布式处理</span><br><span class="line">数据复制完整性</span><br><span class="line">丰富的索引</span><br><span class="line">集群式管理</span><br><span class="line">可直接读取MySQL数据</span><br><span class="line">适合于在线实时查询</span><br><span class="line">支持近似预估计算</span><br></pre></td></tr></table></figure>
<p>目前缺点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">不支持二级索引</span><br><span class="line">不支持事物</span><br><span class="line">缺乏全面的UPDATE|DELETE的实现</span><br></pre></td></tr></table></figure>
<p>应用场景：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">海量数据分析、报表和监控</span><br></pre></td></tr></table></figure>

<p>单机部署，下载文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-client-20.1.4.14-2.noarch.rpm</span><br><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-server-20.1.4.14-2.noarch.rpm</span><br><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/x86_64/clickhouse-common-static-20.1.4.14-2.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>下载完成后，直接通过rpm方式安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh clickhouse-*</span><br></pre></td></tr></table></figure>
<p>安装完成后的目录结构,server和client都是在etc下,由于客户端不用配置，这里主要看server端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ch01 clickhouse-server]<span class="comment"># tree </span></span><br><span class="line">.</span><br><span class="line">├── config.d</span><br><span class="line">├── config.xml   <span class="comment">#配置文件</span></span><br><span class="line">├── preprocessed -&gt; /var/lib/clickhouse//preprocessed_configs</span><br><span class="line">├── users.d</span><br><span class="line">├── metrika.xml  <span class="comment">#集群配置文件，此文件需要自己创建</span></span><br><span class="line">└── users.xml	 <span class="comment">#用户配置文件</span></span><br></pre></td></tr></table></figure>
<p>创建所需目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/clickhouse/<span class="built_in">log</span>/</span><br><span class="line">mkdir -p /data/clickhouse/tmp/</span><br><span class="line">touch /data/clickhouse/<span class="built_in">log</span>/server.log</span><br><span class="line">touch /data/clickhouse/<span class="built_in">log</span>/error.log</span><br><span class="line">chown clickhouse.clickhouse -R /data/clickhouse</span><br></pre></td></tr></table></figure>
<p>配置config.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;logger&gt;</span><br><span class="line">        &lt;level&gt;trace&lt;/level&gt;</span><br><span class="line">        &lt;<span class="built_in">log</span>&gt;/data/clickhouse/<span class="built_in">log</span>/server.log&lt;/<span class="built_in">log</span>&gt;</span><br><span class="line">        &lt;errorlog&gt;/data/clickhouse/<span class="built_in">log</span>/error.log&lt;/errorlog&gt;</span><br><span class="line">        &lt;size&gt;1000M&lt;/size&gt;</span><br><span class="line">        &lt;count&gt;10&lt;/count&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;http_port&gt;8123&lt;/http_port&gt;</span><br><span class="line">    &lt;tcp_port&gt;9000&lt;/tcp_port&gt;</span><br><span class="line">    &lt;interserver_http_port&gt;9009&lt;/interserver_http_port&gt;</span><br><span class="line">    &lt;listen_host&gt;0.0.0.0&lt;/listen_host&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;path&gt;/data/clickhouse/&lt;/path&gt;</span><br><span class="line">    &lt;tmp_path&gt;/data/clickhouse/tmp/&lt;/tmp_path&gt;</span><br><span class="line">    &lt;users_config&gt;users.xml&lt;/users_config&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;default_profile&gt;default&lt;/default_profile&gt;</span><br><span class="line">    &lt;default_database&gt;default&lt;/default_database&gt;</span><br><span class="line">    &lt;remote_servers incl=<span class="string">"clickhouse_remote_servers"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;query_log&gt;</span><br><span class="line">        &lt;database&gt;system&lt;/database&gt;</span><br><span class="line">        &lt;table&gt;query_log&lt;/table&gt;</span><br><span class="line">        &lt;partition_by&gt;toYYYYMM(event_date)&lt;/partition_by&gt;</span><br><span class="line">        &lt;flush_interval_milliseconds&gt;7500&lt;/flush_interval_milliseconds&gt;</span><br><span class="line">    &lt;/query_log&gt;</span><br><span class="line">    &lt;mark_cache_size&gt;5368709120&lt;/mark_cache_size&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>
<p>然后启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start clickhouse-server</span><br></pre></td></tr></table></figure>
<p>登陆clickhouse,此处因为use.xml没配置默认用户不配置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clickhouse-client --host=127.0.0.1 --port=9000 --user=default --password=</span><br><span class="line"></span><br><span class="line">[root@ch01 clickhouse-server]<span class="comment"># clickhouse-client --host=127.0.0.1 --port=9000 --user=default --password=</span></span><br><span class="line">ClickHouse client version 20.1.4.14 (official build).</span><br><span class="line">Connecting to 127.0.0.1:6767 as user stat67.</span><br><span class="line">Connected to ClickHouse server version 20.1.4 revision 54431.</span><br><span class="line"></span><br><span class="line">ck-0001 :)</span><br></pre></td></tr></table></figure>
<hr>
<p>以上就是Clickhouse单机部署，下面部署则为Clickhouse集群一分片两副本，两分片两副本，三分片两副本，同理<br>服务器信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ch01 192.168.1.2</span><br><span class="line">ch02 192.168.1.3</span><br></pre></td></tr></table></figure>
<p>由于Clickhouse集群基于zookeeper，所以先配置zk集群<br>zookeeper下载与解压，注意这理下载zk，一定要下载带bin，不然没法用（ch01,ch02安装同理）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/ &amp;&amp; wget https://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</span><br><span class="line">tar -xvf apache-zookeeper-3.6.1-bin.tar.gz &amp;&amp; mv apache-zookeeper-3.6.1-bin ../zookeeper</span><br><span class="line"><span class="built_in">cd</span> ../zookeeper/conf &amp;&amp; cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>
<p>配置zookeeper的配置文件zoo.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ch01 conf]<span class="comment"># more zoo.cfg</span></span><br><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/data/zookeeper    <span class="comment">#此目录需要创建</span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br><span class="line">server.1=ch0001:2888:3888</span><br><span class="line">server.2=ch0002:2888:3888</span><br></pre></td></tr></table></figure>
<p>启动zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure>
<p>查看自身身份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ch01 conf]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh status</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line">[root@ck02 ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh status</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<p>配置clickhouse  config.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;logger&gt;</span><br><span class="line">        &lt;level&gt;trace&lt;/level&gt;</span><br><span class="line">        &lt;<span class="built_in">log</span>&gt;/data/clickhouse/<span class="built_in">log</span>/server.log&lt;/<span class="built_in">log</span>&gt;</span><br><span class="line">        &lt;errorlog&gt;/data/clickhouse/<span class="built_in">log</span>/error.log&lt;/errorlog&gt;</span><br><span class="line">        &lt;size&gt;1000M&lt;/size&gt;</span><br><span class="line">        &lt;count&gt;10&lt;/count&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;http_port&gt;8123&lt;/http_port&gt;</span><br><span class="line">    &lt;tcp_port&gt;6767&lt;/tcp_port&gt;</span><br><span class="line">    &lt;interserver_http_port&gt;9009&lt;/interserver_http_port&gt;</span><br><span class="line">    &lt;listen_host&gt;0.0.0.0&lt;/listen_host&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;path&gt;/data/clickhouse/&lt;/path&gt;</span><br><span class="line">    &lt;tmp_path&gt;/data/clickhouse/tmp/&lt;/tmp_path&gt;</span><br><span class="line">    &lt;users_config&gt;users.xml&lt;/users_config&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;default_profile&gt;default&lt;/default_profile&gt;</span><br><span class="line">    &lt;default_database&gt;default&lt;/default_database&gt;</span><br><span class="line">    &lt;remote_servers incl=<span class="string">"clickhouse_remote_servers"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;query_log&gt;</span><br><span class="line">        &lt;database&gt;system&lt;/database&gt;</span><br><span class="line">        &lt;table&gt;query_log&lt;/table&gt;</span><br><span class="line">        &lt;partition_by&gt;toYYYYMM(event_date)&lt;/partition_by&gt;</span><br><span class="line">        &lt;flush_interval_milliseconds&gt;7500&lt;/flush_interval_milliseconds&gt;</span><br><span class="line">    &lt;/query_log&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;zookeeper incl=<span class="string">"zookeeper-servers"</span> optional=<span class="string">"true"</span> /&gt;</span><br><span class="line">    &lt;macros incl=<span class="string">"macros"</span> optional=<span class="string">"true"</span> /&gt;</span><br><span class="line">    &lt;include_from&gt;/etc/clickhouse-server/metrika.xml&lt;/include_from&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;mark_cache_size&gt;5368709120&lt;/mark_cache_size&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>
<p>配置clickhouse集群文件metrika.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;yandex&gt;</span><br><span class="line">&lt;clickhouse_remote_servers&gt;</span><br><span class="line">    &lt;report_shards_replicas&gt;</span><br><span class="line">        &lt;shard&gt;</span><br><span class="line">            &lt;weight&gt;1&lt;/weight&gt;</span><br><span class="line">            &lt;internal_replication&gt;<span class="literal">true</span>&lt;/internal_replication&gt;</span><br><span class="line">            &lt;replica&gt;</span><br><span class="line">                &lt;host&gt;192.168.1.2&lt;/host&gt;</span><br><span class="line">                &lt;port&gt;9000&lt;/port&gt;</span><br><span class="line">                &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                &lt;password&gt;6lYaUiFi&lt;/password&gt;</span><br><span class="line">            &lt;/replica&gt;</span><br><span class="line">            &lt;replica&gt;</span><br><span class="line">                &lt;host&gt;192.168.1.3&lt;/host&gt;</span><br><span class="line">                &lt;port&gt;9000&lt;/port&gt;</span><br><span class="line">                &lt;user&gt;default&lt;/user&gt;</span><br><span class="line">                &lt;password&gt;6lYaUiFi&lt;/password&gt;</span><br><span class="line">            &lt;/replica&gt;</span><br><span class="line">        &lt;/shard&gt;</span><br><span class="line">    &lt;/report_shards_replicas&gt;</span><br><span class="line">&lt;/clickhouse_remote_servers&gt;</span><br><span class="line"> </span><br><span class="line">&lt;macros&gt;</span><br><span class="line">    &lt;shard&gt;shard_01&lt;/shard&gt;</span><br><span class="line">    &lt;replica&gt;replica_01&lt;/replica&gt;</span><br><span class="line">&lt;/macros&gt;</span><br><span class="line"> </span><br><span class="line">&lt;networks&gt;</span><br><span class="line">   &lt;ip&gt;::/0&lt;/ip&gt;</span><br><span class="line">&lt;/networks&gt;</span><br><span class="line"> </span><br><span class="line">&lt;zookeeper-servers&gt;</span><br><span class="line">    &lt;node index=<span class="string">"1"</span>&gt;</span><br><span class="line">        &lt;host&gt;192.168.1.2&lt;/host&gt;</span><br><span class="line">        &lt;port&gt;2181&lt;/port&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node index=<span class="string">"2"</span>&gt;</span><br><span class="line">        &lt;host&gt;192.168.1.3&lt;/host&gt;</span><br><span class="line">        &lt;port&gt;2181&lt;/port&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">&lt;/zookeeper-servers&gt;</span><br><span class="line"> </span><br><span class="line">&lt;clickhouse_compression&gt;</span><br><span class="line">    &lt;<span class="keyword">case</span>&gt;</span><br><span class="line">        &lt;min_part_size&gt;10000000000&lt;/min_part_size&gt;</span><br><span class="line">        &lt;min_part_size_ratio&gt;0.01&lt;/min_part_size_ratio&gt;</span><br><span class="line">        &lt;method&gt;lz4&lt;/method&gt;</span><br><span class="line">    &lt;/<span class="keyword">case</span>&gt;</span><br><span class="line">&lt;/clickhouse_compression&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>
<p>配置用户文件user.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;!-- 读写用户设置  --&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;max_memory_usage&gt;10000000000&lt;/max_memory_usage&gt;</span><br><span class="line">            &lt;use_uncompressed_cache&gt;0&lt;/use_uncompressed_cache&gt;</span><br><span class="line">            &lt;load_balancing&gt;random&lt;/load_balancing&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;!-- 只写用户设置  --&gt;</span><br><span class="line">        &lt;<span class="built_in">readonly</span>&gt;</span><br><span class="line">            &lt;max_memory_usage&gt;10000000000&lt;/max_memory_usage&gt;</span><br><span class="line">            &lt;use_uncompressed_cache&gt;0&lt;/use_uncompressed_cache&gt;</span><br><span class="line">            &lt;load_balancing&gt;random&lt;/load_balancing&gt;</span><br><span class="line">            &lt;<span class="built_in">readonly</span>&gt;1&lt;/<span class="built_in">readonly</span>&gt;</span><br><span class="line">        &lt;/<span class="built_in">readonly</span>&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line">    &lt;!-- 配额  --&gt;</span><br><span class="line">    &lt;quotas&gt;</span><br><span class="line">        &lt;!-- Name of quota. --&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;interval&gt;</span><br><span class="line">                &lt;duration&gt;3600&lt;/duration&gt;</span><br><span class="line">                &lt;queries&gt;0&lt;/queries&gt;</span><br><span class="line">                &lt;errors&gt;0&lt;/errors&gt;</span><br><span class="line">                &lt;result_rows&gt;0&lt;/result_rows&gt;</span><br><span class="line">                &lt;read_rows&gt;0&lt;/read_rows&gt;</span><br><span class="line">                &lt;execution_time&gt;0&lt;/execution_time&gt;</span><br><span class="line">            &lt;/interval&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/quotas&gt;</span><br><span class="line">    &lt;users&gt;</span><br><span class="line">        &lt;!-- 读写用户  --&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;password_sha256_hex&gt;967f3bf355dddfabfca1c9f5cab39352b2ec1cd0b05f9e1e6b8f629705fe7d6e&lt;/password_sha256_hex&gt;</span><br><span class="line">            &lt;networks incl=<span class="string">"networks"</span> replace=<span class="string">"replace"</span>&gt;</span><br><span class="line">                &lt;ip&gt;::/0&lt;/ip&gt;</span><br><span class="line">            &lt;/networks&gt;</span><br><span class="line">            &lt;profile&gt;default&lt;/profile&gt;</span><br><span class="line">            &lt;quota&gt;default&lt;/quota&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/users&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>
<p>启动clickhouse，由于我们是rpm方式安装的，可以用以下两种方式启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/clickhouse-server start</span><br><span class="line">systemctl start clickhouse-server</span><br></pre></td></tr></table></figure>
<p>查看集群情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clickhouse-client --host=127.0.0.1 --port=9000 --user=default --password=6lYaUiFi</span><br><span class="line">ck01 :) select * from system.clusters;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM system.clusters</span><br><span class="line"></span><br><span class="line">┌─cluster────────────────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address─┬─port─┬─is_local─┬─user────┬─default_database─┬─errors_count─┬─estimated_recovery_time─┐</span><br><span class="line">│ report_shards_replicas │         1 │            1 │           1 │   ch01    │ 192.168.1.2   │ 9000 │        1 │ default │                  │            0 │                       0 │</span><br><span class="line">│ report_shards_replicas │         2 │            1 │           1 │   ch02    │ 192.168.1.3   │ 9000 │        0 │ default │                  │            0 │                       0 │</span><br><span class="line">└────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴──────┴──────────┴─────────┴──────────────────┴──────────────┴─────────────────────────┘</span><br><span class="line"></span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: 0.001 sec. </span><br><span class="line"></span><br><span class="line">ck01 :)</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database ontime;</span><br><span class="line">use ontime;</span><br><span class="line"></span><br><span class="line">CREATE TABLE ontime (FlightDate Date,Year UInt16) ENGINE = ReplicatedMergeTree(<span class="string">'/clickhouse/tables/01-01/ontime'</span>,<span class="string">'cluster01-01-1'</span>,FlightDate,(Year, FlightDate),8192); <span class="comment">#cdh01的实例1，分片01，副本1</span></span><br><span class="line">CREATE TABLE ontime (FlightDate Date,Year UInt16) ENGINE = ReplicatedMergeTree(<span class="string">'/clickhouse/tables/01-02/ontime'</span>,<span class="string">'cluster01-01-2'</span>,FlightDate,(Year, FlightDate),8192); <span class="comment">#cdh01的实例2，分片01，副本2</span></span><br><span class="line">CREATE TABLE ontime_all (FlightDate Date,Year UInt16) ENGINE= Distributed(perftest_3shards_2replicas, ontime, ontime, rand());  <span class="comment">#每个实例都执行</span></span><br></pre></td></tr></table></figure>
<p>当我们从某个节点的_all表插入相应数据，然后ch01,02的数据都是相等的，如果不相等请查看对应日志文件错误，类似以下错误可以通过重启zk再重启clickhouse解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e.displayText() = DB::Exception: No interserver IO endpoint named DataPartsExchange:/clickhouse/tables/01-01/ontime</span><br></pre></td></tr></table></figure>

<p>遇到问题补充：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error&gt; default.my_table (StorageReplicatedMergeTree): DB::StorageReplicatedMergeTree::queueTask()::&lt;lambda(DB::StorageReplicatedMergeTree::LogEntryPtr&amp;)&gt;: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Host not found: clickhouse-01-0.clickhouses.default.svc.cluster.local</span><br></pre></td></tr></table></figure>
<p>只需要看主机名，并设置即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname -f </span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname ****</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Jenkins版本升级</title>
    <url>/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>Jenkins版本升级<br> <a id="more"></a><br>1、背景<br>由于现在所用到jenkins的版本为2.248，出现以下警告发布，则需要把jenkins版本升级来解决，此警告</p>
<img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins01.png" class title="This is an jenkins image">

<p>2、下载最新版本jenkins-2.257</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/2.257/jenkins.war</span><br></pre></td></tr></table></figure>
<p>3、由于用的服务器为CVM，则先登陆腾讯云创建快照，避免升级出现问题，操作回滚<br>同时也需要备份服务器上的jenkins.war包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/jenkins_bak</span><br><span class="line">cp /usr/lib/jenkins/jenkins.war /opt/jenkins_bak/</span><br></pre></td></tr></table></figure>
<p>4、停止jenkins服务，并复制最新版jenkins到对应目录,然后启动jenkins服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop jenkins</span><br><span class="line">mv jenkins.war /usr/lib/jenkins/</span><br><span class="line">systemctl start jenkins</span><br></pre></td></tr></table></figure>
<p>5、web查看jenkins版本，及对应项目是否正常，出现下图等一小会儿刷新浏览器页面即可</p>
<img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins02.png" class title="This is an jenkins image">
<p>6、查看jenkins版本</p>
<img src="/rz168.io/2020/09/23/Jenkins%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/jenkins03.png" class title="This is an jenkins image">
<p>7、再到插件管理，把对应的插件进行更新即可</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jumpserver安装</title>
    <url>/rz168.io/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Jumpserver安装<br> <a id="more"></a><br>1、Jumpserver总体介绍<br>JumpServer 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协议, 是符合 4A 的专业运维审计系统。<br>JumpServer 使用 Python / Django 进行开发, 遵循 Web 2.0 规范, 配备了业界领先的 Web Terminal 解决方案, 交互界面美观、用户体验好。<br>JumpServer 采纳分布式架构, 支持多机房跨区域部署, 中心节点提供 API, 各机房部署登录节点, 可横向扩展、无并发访问限制。<br>JumpServer 现已支持管理 SSH、 Telnet、 RDP、 VNC 协议资产。<br>2、引入<br>为了保证服务器安全，加个堡垒机，所有ssh连接都通过堡垒机来完成，堡垒机也需要有身份认证，授权，访问控制，审计等功能。<br>3、优点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">开源: 零门槛，线上快速获取和安装；</span><br><span class="line">分布式: 轻松支持大规模并发访问；</span><br><span class="line">无插件: 仅需浏览器，极致的 Web Terminal 使用体验；</span><br><span class="line">多云支持: 一套系统，同时管理不同云上面的资产；</span><br><span class="line">云端存储: 审计录像云端存储，永不丢失；</span><br><span class="line">多租户: 一套系统，多个子公司和部门同时使用。</span><br></pre></td></tr></table></figure>
<p>4、服务器配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">硬件配置: 2个CPU核心, 4G 内存, 50G 硬盘（最低）</span><br><span class="line">操作系统: Linux 发行版 x86_64</span><br></pre></td></tr></table></figure>
<p>5、部署，为了方便以及避免烦锁步骤，这里才用docker-compose的方式安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jumpserver/Dockerfile.git</span><br><span class="line"><span class="built_in">cd</span> Dockerfile</span><br><span class="line">cat .env</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>
<p>6、更改对应密码以及端口等,根据自己实际更改即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 jump_dockerfile]<span class="comment"># vi  .env </span></span><br><span class="line"><span class="comment"># 版本号可以自己根据项目的版本修改</span></span><br><span class="line">Version=2.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=3367</span><br><span class="line">DB_USER=jumpserver</span><br><span class="line">DB_PASSWORD=jumserver528</span><br><span class="line">DB_NAME=jumpserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis</span></span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line">REDIS_PASSWORD=jumserver528</span><br><span class="line"></span><br><span class="line"><span class="comment"># Core</span></span><br><span class="line">SECRET_KEY=B3f2w8P2PfxIAS7s4UdffdYmSbtqX4vXdPUL217kL9XPUOWrmy</span><br><span class="line">BOOTSTRAP_TOKEN=7Q11Vz6RsdsBLAdO</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># SECRET_KEY 保护签名数据的密匙, 首次安装请一定要修改并牢记, 后续升级和迁移不可更改, 否则将导致加密的数据不可解密。</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN 为组件认证使用的密钥, 仅组件注册时使用。组件指 koko、guacamole</span></span><br></pre></td></tr></table></figure>
<p>7、部署jumpserver,前提需要先安装docker-compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>
<p>8、查看容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 jump_dockerfile]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">28de4d1c451b        jumpserver/jms_nginx:2.1.0       <span class="string">"nginx -g 'daemon of…"</span>   3 weeks ago         Up 3 weeks          0.0.0.0:80-&gt;80/tcp      jms_nginx</span><br><span class="line">aaf5d8c881f6        jumpserver/jms_guacamole:2.1.0   <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_guacamole</span><br><span class="line">071c62d5ff2b        jumpserver/jms_koko:2.1.0        <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks          0.0.0.0:2222-&gt;2222/tcp   jms_koko</span><br><span class="line">a5709a44b1d3        jumpserver/jms_core:2.1.0        <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_core</span><br><span class="line">85ad0f1d4ad1        jumpserver/jms_redis:2.1.0       <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_redis</span><br><span class="line">c83069aa41a9        jumpserver/jms_mysql:2.1.0       <span class="string">"./entrypoint.sh"</span>        3 weeks ago         Up 3 weeks                                    jms_mysql</span><br></pre></td></tr></table></figure>
<p>9、进入jumpserver  web界面在浏览器上输入<a href="http://localhost,默认管理员账户" target="_blank" rel="noopener">http://localhost,默认管理员账户</a> admin 密码 admin</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/jumpserver_01.png" class title="This is an jenkins image">
<p>10、登陆成功后的界面</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E5%AE%89%E8%A3%85/jumpserver_02.png" class title="This is an jenkins image">
<p>11、到此jumpserver的初始安装就完成了，下一篇将进入jumpserver的使用</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-dashboard部署</title>
    <url>/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Kubernetes-dashboard部署</p>
<a id="more"></a>
<hr>
<p>1、简介<br>Kubernetes-dashboard是Kubernetes集群的基于Web的通用UI。它允许用户管理集群中运行的应用程序并对其进行故障排除，以及管理集群本身。<br>2、安装,执行下面这条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span></span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br><span class="line">若提示下面错误</span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br><span class="line">编辑/etc/hosts,添加下面内容，再重新执行</span><br><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>
<p>3、若发现上面链接失效或其它问题，请访问下面github链接，获取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/kubernetes/dashboard</span><br></pre></td></tr></table></figure>
<p>4、查看创建的服务和pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard get pods</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-6b4884c9d5-dpb94   1/1     Running   0          110m</span><br><span class="line">kubernetes-dashboard-7b544877d5-mxpdr        1/1     Running   0          110m</span><br></pre></td></tr></table></figure>
<p>5、修改配置，让外网访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard patch svc kubernetes-dashboard -p '&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span></span><br><span class="line">service/kubernetes-dashboard patched</span><br></pre></td></tr></table></figure>
<p>6、查看外网访问映射对应端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl -n kubernetes-dashboard get svc</span></span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.99.247.200   &lt;none&gt;        8000/TCP        112m</span><br><span class="line">kubernetes-dashboard        NodePort    10.109.33.119   &lt;none&gt;        443:30356/TCP   112m</span><br></pre></td></tr></table></figure>
<p>7、获取secret中的token</p>
<img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard_02.png" class title="This is an jenkins image">
<p>8、访问dashboard，浏览器输入<a href="https://masterIP:30356，这里建议使用火狐浏览器，">https://masterIP:30356，这里建议使用火狐浏览器，</a><br>同时首次访问时，会阻拦你，所以你需要继续访问，然后选择验证方式时，会有kubeconfig和令牌两种方式</p>
<img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard.png" class title="This is an jenkins image">
<p>9、然后我们选择令牌（第6步获取到的token）,点击登陆，成功后的界面如下：</p>
<img src="/rz168.io/2020/09/16/Kubernetes-dashboard%E9%83%A8%E7%BD%B2/dashboard_01.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-network问题</title>
    <url>/rz168.io/2020/07/29/Docker-network%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记一次Docker-network问题<br> <a id="more"></a><br>由于测试环境是用docker-compose，yml如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">    mariadb:</span><br><span class="line">        image: mariadb</span><br><span class="line">        ports:</span><br><span class="line">          - xxxx:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - ./conf/db/utf8.cnf:/etc/mysql/conf.d/utf8.cnf</span><br><span class="line">            - ./conf/db/sql:/docker-entrypoint-initdb.d</span><br><span class="line">            - ./data/db/:/var/lib/mysql/*</span><br><span class="line">        networks:</span><br><span class="line">         - brenk</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: <span class="string">"123456"</span></span><br><span class="line">        container_name: xxxx_db</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">    brenk:</span><br></pre></td></tr></table></figure>
<p>每跑一次发现都会生成一个自定义网络，由于Docker 默认支持 30 个不同的自定义 bridge 网络<br>如果超过这个限制，就会提示下面的错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</span><br></pre></td></tr></table></figure>
<p>可以使用命令docker network ls来查看你创建的网络，然后通过命令docker network prune来移除没有使用的网络。<br>但是这样问题很快就会重复出现，所以更倾向用下面这个方法处理这个问题<br>将所有的项目加入到同一个自定义网络当中以节省自定义网络的数量<br>在对应服务器上创建docker自定义网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create db-network --driver bridge</span><br></pre></td></tr></table></figure>
<p>同时修改一下docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">    mariadb:</span><br><span class="line">        image: mariadb</span><br><span class="line">        ports:</span><br><span class="line">          - xxxx:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - ./conf/db/utf8.cnf:/etc/mysql/conf.d/utf8.cnf</span><br><span class="line">            - ./conf/db/sql:/docker-entrypoint-initdb.d</span><br><span class="line">            - ./data/db/:/var/lib/mysql/*</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: <span class="string">"123456"</span></span><br><span class="line">        container_name: xxxx_db</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line"> default:</span><br><span class="line">  external:</span><br><span class="line">   name: db-network</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统调优</title>
    <url>/rz168.io/2020/08/11/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>Linux系统调优</p>
<a id="more"></a>
<p>在很多情况下，我们拿到的服务器，第一步肯定是调优，安装依赖等等<br>1、内核调优</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.conf.all.forwarding=1</span><br><span class="line">net.ipv4.neigh.default.gc_thresh1=4096</span><br><span class="line">net.ipv4.neigh.default.gc_thresh2=6144</span><br><span class="line">net.ipv4.neigh.default.gc_thresh3=8192</span><br><span class="line">net.ipv4.neigh.default.gc_interval=60</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time=120</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考 https://github.com/prometheus/node_exporter#disabled-by-default</span></span><br><span class="line">kernel.perf_event_paranoid=-1</span><br><span class="line"></span><br><span class="line"><span class="comment">#sysctls for k8s node config</span></span><br><span class="line">net.ipv4.tcp_slow_start_after_idle=0</span><br><span class="line">net.core.rmem_max=16777216</span><br><span class="line">fs.inotify.max_user_watches=524288</span><br><span class="line">kernel.softlockup_all_cpu_backtrace=1</span><br><span class="line"></span><br><span class="line">kernel.softlockup_panic=0</span><br><span class="line"></span><br><span class="line">kernel.watchdog_thresh=30</span><br><span class="line">fs.file-max=2097152</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_queued_events=16384</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">fs.may_detach_mounts=1</span><br><span class="line">net.core.netdev_max_backlog=16384</span><br><span class="line">net.ipv4.tcp_wmem=4096 12582912 16777216</span><br><span class="line">net.core.wmem_max=16777216</span><br><span class="line">net.core.somaxconn=32768</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog=8096</span><br><span class="line">net.ipv4.tcp_rmem=4096 12582912 16777216</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6=1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6=1</span><br><span class="line"></span><br><span class="line">kernel.yama.ptrace_scope=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以控制core文件的文件名中是否添加pid作为扩展。</span></span><br><span class="line">kernel.core_uses_pid=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not accept source routing</span></span><br><span class="line">net.ipv4.conf.default.accept_source_route=0</span><br><span class="line">net.ipv4.conf.all.accept_source_route=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Promote secondary addresses when the primary address is removed</span></span><br><span class="line">net.ipv4.conf.default.promote_secondaries=1</span><br><span class="line">net.ipv4.conf.all.promote_secondaries=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hard and soft link protection</span></span><br><span class="line">fs.protected_hardlinks=1</span><br><span class="line">fs.protected_symlinks=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源路由验证</span></span><br><span class="line"><span class="comment"># see details in https://help.aliyun.com/knowledge_detail/39428.html</span></span><br><span class="line">net.ipv4.conf.all.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce=2</span><br><span class="line">net.ipv4.conf.all.arp_announce=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># see details in https://help.aliyun.com/knowledge_detail/41334.html</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets=5000</span><br><span class="line">net.ipv4.tcp_syncookies=1</span><br><span class="line">net.ipv4.tcp_fin_timeout=30</span><br><span class="line">net.ipv4.tcp_synack_retries=2</span><br><span class="line">kernel.sysrq=1</span><br></pre></td></tr></table></figure>
<p>2、nofile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Jumpserver日常使用</title>
    <url>/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Jumpserver日常使用</p>
<a id="more"></a>
<p>上一篇已经为大家简单介绍了Jumpserver的安装部署，下面就继续为大家介绍Jumpserver的日常使用<br>1、浏览器上输入Jumpserver对应的IP或域名，这边直接IP访问：<a href="http://192.168.0.32:8080,显示下面图片">http://192.168.0.32:8080,显示下面图片</a></p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_01.png" class title="This is an jenkins image">
<p>2、键入账号密码，因为是测试所以使用默认的admin，登陆成功的界面如下</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_02.png" class title="This is an jenkins image">
<p>3、配置系统设置，如：基本设置、邮件设置以及安全设置，这里主要配置邮件设置，因为在创建用户的时候，会发邮件给用户去对应设置账号密码</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_03.png" class title="This is an jenkins image">
<p>4、创建用户组及用户</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_04.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_05.png" class title="This is an jenkins image">
<p>5、创建成功后，如果邮件及邮箱正确会收到如下邮件信息</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_06.png" class title="This is an jenkins image">
<p>6、创建管理用户（资产管理————&gt;管理用户）</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_07.png" class title="This is an jenkins image">
<p>7、创建系统用户（资产管理————&gt;系统用户），这里为了安全自动生成密钥</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_08.png" class title="This is an jenkins image">
<p>8、添加资产即服务器（资产管理————&gt;资产列表）</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_09.png" class title="This is an jenkins image">
<p>9、正常添加资产（服务器），会显示类似下面图，显示对应服务器配置</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_10.png" class title="This is an jenkins image">
<p>10、同时可以在（作业中心————&gt;任务列表)看到对就操作记录</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_11.png" class title="This is an jenkins image">
<p>11、对应用户资产授权（权限管理————&gt;资产授权），对应按需选择，当用户登陆jumpserver_web时可以到对应资产。</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_12.png" class title="This is an jenkins image">
<p>12、测试连接（会话管理————&gt;web终端），配置正确正常显示下方图，如果不是则看看授权管理是否配置正确</p>
<img src="/rz168.io/2020/08/21/Jumpserver%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/Jumpserver_13.png" class title="This is an jenkins image">
<p>13、到这里Jumpserver资产配置流程已经完成，日常使用也差不多如此，剩下的慢慢摸索吧！</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dnsmasq-简单搭建</title>
    <url>/rz168.io/2020/05/21/Dnsmasq-%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Dnsmasq-简单安装<br> <a id="more"></a><br>最近同事工作中遇到要使用不同的DNS来解析不同域名的情况，<br>想了想就造反Dnsmasq最合适。<br>下面简单搭建记录</p>
<p>编辑配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dnsmasq config, for a complete example, see:</span></span><br><span class="line"><span class="comment">#  http://oss.segetech.com/intra/srv/dnsmasq.conf</span></span><br><span class="line"><span class="comment">#log all dns queries</span></span><br><span class="line"><span class="built_in">log</span>-queries</span><br><span class="line"><span class="comment">#dont use hosts nameservers</span></span><br><span class="line">no-resolv</span><br><span class="line"><span class="comment">#use cloudflare as default nameservers, prefer 1^4</span></span><br><span class="line">server=1.1.1.1</span><br><span class="line">server=233.5.5.5</span><br><span class="line"><span class="comment">#strict-order</span></span><br><span class="line"><span class="comment">#serve all .company queries using a specific nameserver</span></span><br><span class="line"><span class="comment">#server=/company/10.0.0.1</span></span><br><span class="line"><span class="comment">#explicitly define host-ip mappings（自定义域名IP配置）</span></span><br><span class="line"><span class="comment">#address=/a1.aa.com/192.168.1.168</span></span><br><span class="line">address=/a3.aa.com/192.168.1.111</span><br></pre></td></tr></table></figure>

<p>启动docker容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name dnsmasq \</span><br><span class="line">    -d \</span><br><span class="line">    -p 53:53/udp \</span><br><span class="line">    -p 8088:8080 \</span><br><span class="line">    -v /opt/dns/dnsmasq.conf:/etc/dnsmasq.conf \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    -e <span class="string">"HTTP_USER=admin"</span> \</span><br><span class="line">    -e <span class="string">"HTTP_PASS=admin"</span> \</span><br><span class="line">    --restart always \</span><br><span class="line">    jpillora/dnsmasq</span><br></pre></td></tr></table></figure>
<p>访问Dnsmasq网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://IP:8088</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群简单安装</title>
    <url>/rz168.io/2020/09/16/Kubernetes%E9%9B%86%E7%BE%A4%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Kubernetes集群简单安装</p>
<a id="more"></a>
<hr>
<p>1、Kubernetes 是什么<br>Kubernetes是当今最流行的开源容器管理平台，它就是大名鼎鼎的Google Borg的开源版本。Google在2014年推出了Kubernetes<br>2、由于用于学习测试，则用最简单的方法部署最小集群方案,sealos部署方式，(不建议用于生产)<br>3、服务器信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 服务器name 	| 	IP 	|  配置 | </span><br><span class="line">| master 	| 192.168.0.12  |2C4G  |</span><br><span class="line">| node01 	| 192.168.0.13  | 2C4G |</span><br><span class="line">| node02 	| 192.168.0.17  | 2C4G |</span><br></pre></td></tr></table></figure>
<p>4、设置系统初始化，如：硬盘划分、免密登陆、关闭swap、关闭防火墙等等<br>5、下载并安装sealos，由于sealos是个golang的二进制工具，直接下载拷贝到bin目录,然后配置可执行权限即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/latest/sealos &amp;&amp; \</span><br><span class="line">    chmod +x sealos &amp;&amp; mv sealos /usr/bin</span><br></pre></td></tr></table></figure>
<p>6、下载对应资源包,版本为v1.18</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/7b6af025d4884fdd5cd51a674994359c-1.18.0/kube1.18.0.tar.gz</span><br></pre></td></tr></table></figure>
<p>7、部署集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">此方法是部署3master,1node:</span><br><span class="line">sealos init --passwd 123456 \</span><br><span class="line">	--master 192.168.0.2  --master 192.168.0.3  --master 192.168.0.4  \</span><br><span class="line">	--node 192.168.0.5 \</span><br><span class="line">	--pkg-url /root/kube1.18.0.tar.gz \</span><br><span class="line">	--version v1.18.0</span><br><span class="line">下面这个方法则是部署一master,两个node，这里用的是密码形式，如果需要用到密钥则把--passwd 1 换成--pk /root/.ssh/id_rsa（私钥地址）</span><br><span class="line">sealos init --passwd 1 \</span><br><span class="line">	--master 192.168.0.12  \</span><br><span class="line">	--node 192.168.0.13 --node 192.168.0.17 \</span><br><span class="line">	--pkg-url /root/kube1.18.0.tar.gz \</span><br><span class="line">	--version v1.18.0</span><br></pre></td></tr></table></figure>
<p>8、查看是否可安装正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   5h53m   v1.18.0</span><br><span class="line">node01   Ready    &lt;none&gt;   5h53m   v1.18.0</span><br><span class="line">node02   Ready    &lt;none&gt;   5h53m   v1.18.0</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod --all-namespaces </span></span><br><span class="line">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system            calico-kube-controllers-84445dd79f-dzg66     1/1     Running   0          5h53m</span><br><span class="line">kube-system            calico-node-92s4l                            1/1     Running   0          5h53m</span><br><span class="line">kube-system            calico-node-cv2fw                            1/1     Running   1          5h53m</span><br><span class="line">kube-system            calico-node-mpcf5                            1/1     Running   0          5h53m</span><br><span class="line">kube-system            coredns-66bff467f8-2t6jt                     1/1     Running   0          5h53m</span><br><span class="line">kube-system            coredns-66bff467f8-64mn4                     1/1     Running   0          5h53m</span><br><span class="line">kube-system            etcd-master                                  1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-apiserver-master                        1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-controller-manager-master               1/1     Running   1          5h53m</span><br><span class="line">kube-system            kube-proxy-s2rgm                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-proxy-szq9g                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-proxy-w4dl2                             1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-scheduler-master                        1/1     Running   1          5h53m</span><br><span class="line">kube-system            kube-sealyun-lvscare-node01                  1/1     Running   0          5h53m</span><br><span class="line">kube-system            kube-sealyun-lvscare-node02                  1/1     Running   0          5h53m</span><br></pre></td></tr></table></figure>
<p>9、安装命令补全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure>
<p>10、到这里k8s简单部署方案就已经完成了，如果需要安装Kubernetes-dashboard,请访问下一篇《Kubernetes-dashboard部署》</p>
]]></content>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-入门篇</title>
    <url>/rz168.io/2020/07/23/MongoDB-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[<p>MongoDB-入门篇<br> <a id="more"></a><br>由于最近得出空闲时间，整理一下笔记……</p>
<p>1、Mongodb简介<br>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的分布式文件存储的开源数据库系统。</p>
<p>2、Mongodb安装<br>由于把安装步骤写成了shell脚本，这就直接略过，若有需要的直接访问下面的链接进行了解，安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3、启动与关闭Mongodb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod -f /usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongodb.conf</span><br><span class="line">mongod --shutdown --dbpath=/data/mongodb/Data/  <span class="comment">#这里指定目录的原因是因为配置文件里有写，所以指定会比较好</span></span><br></pre></td></tr></table></figure>
<p>4、当我们启动了MongoDB,尝试链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br><span class="line">参数介绍：</span><br><span class="line">    mongodb:// 这是固定的格式，必须要指定。</span><br><span class="line">    username:password@ 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</span><br><span class="line">    host1 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</span><br><span class="line">    portX 可选的指定端口，如果不填，默认为27017</span><br><span class="line">    /database 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 <span class="built_in">test</span> 数据库。</span><br><span class="line">    ?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开</span><br></pre></td></tr></table></figure>
<p>5、我们知道数据都是很重要的，接下来我们就会说到备份与恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份</span></span><br><span class="line">mongodump -h dbhost -d dbname -o bak_path</span><br><span class="line"></span><br><span class="line">    -h:表示登陆ip，如：127.0.0.1，加端口的方式为：127.0.0.1:27017</span><br><span class="line">    -d:需要备份的数据库</span><br><span class="line">    -o:备份的路径</span><br><span class="line"></span><br><span class="line">若不指定数据库，则命令如下：</span><br><span class="line">mongodump -h dbhost -o bak_path</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复</span></span><br><span class="line">mongodb恢复数据也比较简单，命令如下：</span><br><span class="line"><span class="comment">#指定恢复某个库</span></span><br><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br><span class="line"><span class="comment">#恢复所有库</span></span><br><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure>
<p>6、对于一名运维同事来说，监控也是很重要的，因此MongoDB也自带了一定的监控</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况</span><br><span class="line">直接进行安装目录运行相应命令即可</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb…/bin</span><br><span class="line">mongotop</span><br><span class="line">mongostat</span><br><span class="line">其中还能通此命令（mongotop --locks）得出每个数据库的锁的情况</span><br><span class="line">图略</span><br><span class="line">字段解释如下：</span><br><span class="line">    ns：</span><br><span class="line">        包含数据库命名空间，后者结合了数据库名称和集合。</span><br><span class="line">    db：</span><br><span class="line">        包含数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。</span><br><span class="line">    total：</span><br><span class="line">        mongod花费的时间工作在这个命名空间提供总额。</span><br><span class="line">    <span class="built_in">read</span>：</span><br><span class="line">        提供了大量的时间，这mongod花费在执行读操作，在此命名空间。</span><br><span class="line">    write：</span><br><span class="line">        提供这个命名空间进行写操作，这mongod花了大量的时间。</span><br></pre></td></tr></table></figure>
<p>7、如何在MongoDB中创建用户并添加角色<br>1）创建管理员用户（全局）<br>db.createUser(<br>{<br>    user: “test”,<br>    pwd: “test@passw0rd”<br>    roles:[{roles: “userAdminAnyDatabase” , db:”admin”}]<br>}<br>)</p>
<p>上面命令说明：<br>第一步是指定创建的”username” and “password”<br>第二步是为用户分配角色。由于它需要的权限是数据库管理员，在这种情况下，我们已分配给“ userAdminAnyDatabase”角色。该角色允许用户对MongoDB中的所有数据库具有管理特权。<br>第三步指的是db参数指定admin数据库，它是MongoDB中一个特殊的元数据库，其中包含该用户的信息。</p>
<p>2）为单个数据库创建用户<br>db.createUser(<br>    {<br>        user: “testuser”<br>        pwd: “testuser@password”<br>        roles:[{roles: “userAdmin” , db:”test”}]<br>    }<br>)</p>
<p>上面命令说明：<br>第一步是指定需要创建的“username” 和 “password”。<br>第二步是为用户分配一个角色，在这种情况下，由于需要成为数据库管理员，因此将其分配给“ userAdmin”角色。该角色允许用户仅对db选项中指定的数据库具有管理特权。<br>db参数指定用户应对其具有管理特权的数据库。</p>
<p>3）管理用户<br>首先了解我们需要定义的角色。MongoDB中提供了完整的角色列表。例如，有一个“read role”仅允许对数据库进行只读访问，然后有一个“ readwrite”角色提供了对数据库的读写访问，这意味着用户可以发出插入，删除和更新该数据库中集合的命令</p>
<p>db.createUser(<br>    {<br>        user: “text”<br>        pwd: “text@password”<br>        roles:[<br>            {<br>            roles: “read” , db:”text”},<br>            roles: “read” , db:”test”}<br>            }<br>        ]<br>    }<br>)</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-ce-安装</title>
    <url>/rz168.io/2020/05/15/docker-ce-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Docker-ce安装<br> <a id="more"></a><br>1、卸载docker旧版本相关<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client  docker-client-latest docker-common docker-latest \</span><br><span class="line">docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux  docker-engine</span><br></pre></td></tr></table></figure><br>2、安装新版docker源<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils            device-mapper-persistent-data            lvm2</span><br><span class="line">yum-config-manager     --add-repo     https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#更改国内源</span></span><br><span class="line">sudo sed -i <span class="string">'s/download.docker.com/mirrors.ustc.edu.cn\/docker-ce/g'</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><br> 3、直接yum安装docker<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><br> 启动docker<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><br> 配置下载镜像加速registry-mirrors，为了避免硬盘被log占用log-driver、log-opts，导致空间不足，则加上log配置，更改docker存储位置graph编辑<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> vim /etc/docker/daemon.json</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="string">"bip"</span>: <span class="string">"172.17.0.1/16"</span>,</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://9jwx2023.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/opt/docker"</span>,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dns-search"</span>: [<span class="string">"default.svc.cluster.local"</span>, <span class="string">"svc.cluster.local"</span>, <span class="string">"localdomain"</span>],</span><br><span class="line">  <span class="string">"dns-opts"</span>: [<span class="string">"ndots:2"</span>, <span class="string">"timeout:2"</span>, <span class="string">"attempts:2"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 刷新配置重启docker<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><br> 也可以用以下集合安装脚本<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">yum remove docker docker-client  docker-client-latest docker-common docker-latest \</span><br><span class="line">docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux  docker-engine</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOD &gt;&gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"bip"</span>: <span class="string">"172.17.0.1/16"</span>,</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://9jwx2023.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/opt/docker"</span>,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dns-search"</span>: [<span class="string">"default.svc.cluster.local"</span>, <span class="string">"svc.cluster.local"</span>, <span class="string">"localdomain"</span>],</span><br><span class="line">  <span class="string">"dns-opts"</span>: [<span class="string">"ndots:2"</span>, <span class="string">"timeout:2"</span>, <span class="string">"attempts:2"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOD</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus+Grafana搭建部署</title>
    <url>/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Prometheus+Grafana搭建部署</p>
<a id="more"></a>
<hr>
<p>1、Prometheus简介<br>Prometheus受启发于Google的Brogmon监控系统（相似的Kubernetes是从Google的Brog系统演变而来），从2012年开始由前Google工程师在Soundcloud以开源软件的形式进行研发，并且于2015年早期对外发布早期版本。<br>2016年5月继Kubernetes之后成为第二个正式加入CNCF基金会的项目，同年6月正式发布1.0版本。2017年底发布了基于全新存储层的2.0版本，能更好地与容器平台、云平台配合。<br>2、由于有集成的，那我这边就直接使用集成开源的kube-prometheus<br>kube-prometheus是coreos的一个开源项目，用于监控kubernetes集群,开源链接如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;prometheus-operator&#x2F;kube-prometheus</span><br></pre></td></tr></table></figure>
<p>3、安装git，用于克隆kube-prometheus相关项目到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure>
<p>4、克隆kube-prometheus项目到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coreos/kube-prometheus</span><br></pre></td></tr></table></figure>
<p>5、由于默认源为国外，则修改国内源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> setup/prometheus-operator-deployment.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> prometheus-prometheus.yaml </span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> alertmanager-alertmanager.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> kube-state-metrics-deployment.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> node-exporter-daemonset.yaml</span><br><span class="line">sed -i <span class="string">'s/quay.io/quay.mirrors.ustc.edu.cn/g'</span> prometheus-adapter-deployment.yaml</span><br></pre></td></tr></table></figure>
<p>6、修改alertmanager-service.yaml文件，对应添加nodePort: 30093放通外网访问，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi alertmanager-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    alertmanager: main</span><br><span class="line">  name: alertmanager-main</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9093</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30093</span><br><span class="line">  selector:</span><br><span class="line">    alertmanager: main</span><br><span class="line">    app: alertmanager</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure>
<p>7、修改grafana-service.yaml文件，对应添加nodeport 32000放通外网访问，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi grafana-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 3000</span><br><span class="line">    targetPort: http</span><br><span class="line">    nodePort: 32000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br></pre></td></tr></table></figure>
<p>8、修改prometheus-service.yaml文件，对应添加nodeport 30090放通外网访问，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># vi prometheus-service.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  name: prometheus-k8s</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9090</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure>
<p>9、安装CRD和prometheus-operator</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl apply -f setup/</span></span><br></pre></td></tr></table></figure>
<p>10、安装prometheus, alertmanager, grafana, kube-state-metrics, node-exporter等资源,注意最后有个.表示当前目录（即：/root/kube-prometheus/manifests）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl apply -f .</span></span><br></pre></td></tr></table></figure>
<p>11、由于执行安装时间比较久，需要拉取镜像，然后查看对应命名空间的pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl get pod -n monitoring </span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">alertmanager-main-0                    2/2     Running   0          2d17h</span><br><span class="line">alertmanager-main-1                    2/2     Running   0          2d17h</span><br><span class="line">alertmanager-main-2                    2/2     Running   0          2d17h</span><br><span class="line">grafana-86445dccbb-6gtsd               1/1     Running   0          2d17h</span><br><span class="line">kube-state-metrics-6cdc84dbd9-v9nqv    3/3     Running   0          2d17h</span><br><span class="line">node-exporter-7sx5t                    2/2     Running   0          2d17h</span><br><span class="line">node-exporter-9pgzj                    2/2     Running   0          2d17h</span><br><span class="line">node-exporter-wk6t8                    2/2     Running   0          2d17h</span><br><span class="line">prometheus-adapter-66b855f564-m94zn    1/1     Running   0          2d17h</span><br><span class="line">prometheus-k8s-0                       3/3     Running   1          2d17h</span><br><span class="line">prometheus-k8s-1                       3/3     Running   1          2d17h</span><br><span class="line">prometheus-operator-788d4c7c74-fbjn4   2/2     Running   0          2d18h</span><br></pre></td></tr></table></figure>
<p>若查看状态status有显示ERR字眼，则需要执行下面查看对应错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe prometheus-k8s-0 -n monitoring</span><br></pre></td></tr></table></figure>
<p>或者直接执行删除，然后再执行上面apply命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f .</span><br></pre></td></tr></table></figure>
<p>12、查看prometheus、grafana服务端口，正常为上面修改的nodeport</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl get -n monitoring svc</span></span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">alertmanager-main       NodePort    10.109.50.168    &lt;none&gt;        9093:30093/TCP               2d17h</span><br><span class="line">alertmanager-operated   ClusterIP   None             &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP   2d17h</span><br><span class="line">grafana                 NodePort    10.108.51.131    &lt;none&gt;        3000:32000/TCP               2d17h</span><br><span class="line">kube-state-metrics      ClusterIP   None             &lt;none&gt;        8443/TCP,9443/TCP            2d17h</span><br><span class="line">node-exporter           ClusterIP   None             &lt;none&gt;        9100/TCP                     2d17h</span><br><span class="line">prometheus-adapter      ClusterIP   10.98.108.128    &lt;none&gt;        443/TCP                      2d17h</span><br><span class="line">prometheus-k8s          NodePort    10.108.163.187   &lt;none&gt;        9090:30090/TCP               2d17h</span><br><span class="line">prometheus-operated     ClusterIP   None             &lt;none&gt;        9090/TCP                     2d17h</span><br><span class="line">prometheus-operator     ClusterIP   None             &lt;none&gt;        8443/TCP                     2d18h</span><br></pre></td></tr></table></figure>
<p>13、访问对应prometheus服务，IP+端口模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.168.0.12:30090</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_01.png" class title="This is an jenkins image">
<p>14、访问对应Alertmanager服务，IP+端口模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.168.0.12:30093</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_02.png" class title="This is an jenkins image">
<p>15、访问对应grafana服务，IP+端口模式，默认账号，密码为admin,首次登陆需要更改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.168.0.12:32000</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_03.png" class title="This is an jenkins image">
<p>16、登陆成功后，默认会有个prometheus数据源，若没有手动添加即可</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_04.png" class title="This is an jenkins image">
<p>17、使用Grafana可视化展示Prometheus监控数据<br>推荐模板： 也就是在grafana共享中心里面的，也就是别人写的模版上传到这里库里面的，自己也可以写，写完上传上去，<br>别人也可以访问到，下面是模版的id,只要获取这个ID，就能使用这个模版了，只要这个模版，后端提供执行promeQL,只要有数据就能帮你展示出来<br>Grafana.com<br>• 集群资源监控：3119<br>• 资源状态监控 ：6417<br>• Node监控 ：9276<br>18、下面添加监控模板<br>1）集群资源监控：3119，选择web界面+然后点击import，输入3119，点击Load,重新命名为Kubernetes资源管理，再点击Import即可</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_01.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_02.png" class title="This is an jenkins image">
<p>上图看到Cluster filesystem usage 没数据，则直接点击，出现Edit然后按照下面对应更改即可</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_05_3119_03.png" class title="This is an jenkins image">
<p>2）其它就不一一添加展示，按照上面方式配置即可，下面展示对应监控图<br>集群资源监控：3119</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_06.png" class title="This is an jenkins image">
<p>资源状态监控 ：6417</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_07.png" class title="This is an jenkins image">
<p>Node监控 ：9276</p>
<img src="/rz168.io/2020/09/19/Prometheus-Grafana%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/prometheus_08.png" class title="This is an jenkins image">
<p>19、小结：<br>所以有了这些监控，基本上就能了解k8s的基本资源的使用状态了</p>
]]></content>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab安装及使用</title>
    <url>/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>gitlab安装及使用</p>
<a id="more"></a>
<p>1、gitlab简介<br>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。<br>类似的仓库管理系统还有github、svn、码云等<br>2、gitlab与svn的对比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git优点：（一台电脑即可以是客户端，也可以是服务器；工作过程中，可以断网）</span><br><span class="line">　　适合分布式开发，强调个体；</span><br><span class="line">　　公共服务器压力和数据量都不会太大；</span><br><span class="line">　　速度快，灵活；</span><br><span class="line">　　可以离线工作。</span><br><span class="line"></span><br><span class="line">SVN优点：（一台的服务器控制很多客户端，使用过程中不能断网）</span><br><span class="line">　　管理方便、逻辑明确；</span><br><span class="line">　　集中式管理更能保证安全性；</span><br><span class="line">　　适合开发人数不多的项目开发</span><br></pre></td></tr></table></figure>
<p>3、配置要求<br>CPU：4C<br>内存：4G<br>4、安装方式<br>1）<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">容器方式安装</a><br>2)yum安装<br>5、配置gitlab安装源，注意这里的“el7”,指定的是linux系统为centos 7，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab_gitlab-ce]</span><br><span class="line">name=gitlab_gitlab-ce</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/6/<span class="variable">$basearch</span></span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[gitlab_gitlab-ce-source]</span><br><span class="line">name=gitlab_gitlab-ce-source</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/6/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure>
<p>6、更新本地yum源</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab01.png" class title="This is an jenkins image">
<p>7、安装gitlab社区版，安装最新版本如图所示，<br>若要安装指定版本，则执行下面命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce-x.x.x</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab02.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab03.png" class title="This is an jenkins image">
<p>8、gitlab常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start # 启动所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl stop # 停止所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl restart # 重启所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl status # 查看服务状态；</span><br><span class="line">sudo gitlab-ctl reconfigure # 启动服务；</span><br><span class="line">sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb # 修改默认的配置文件；</span><br><span class="line">gitlab-rake gitlab:check SANITIZE&#x3D;true --trace # 检查gitlab；</span><br><span class="line">sudo gitlab-ctl tail # 查看日志；</span><br></pre></td></tr></table></figure>
<p>9、由于端口给占用，则下面修改端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">'http://192.168.0.143:8888'</span></span><br><span class="line">unicorn[<span class="string">'port'</span>] = 8888</span><br></pre></td></tr></table></figure>

<p>10、初始化gitlab(每次修改完配置文件都要进行此命令)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<p>11、然后浏览器输入<a href="http://192.168.0.143:8888,出现下面图片，默认账号为：root，因为是首次进入需要更改密码（最少8个字符）">http://192.168.0.143:8888,出现下面图片，默认账号为：root，因为是首次进入需要更改密码（最少8个字符）</a></p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab04.png" class title="This is an jenkins image">
<p>12、若出现502 GitLab is not responding，如下图所示，则命令行输入gitlab-ctl tail查看是否端口给占用</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab05.png" class title="This is an jenkins image">
<p>13、登陆成功看到默认界面显示为英文，不过不用怕，因为我们安装的是13.x是已经支持中文的，直接设置<br>点击用户头像setting————&gt;Preferences，如下图</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab06.png" class title="This is an jenkins image">
<p>14、然后退出再重新登陆</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab07.png" class title="This is an jenkins image">
<p>15、gitlab数据备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=`date +%Y_%m_%d`</span><br><span class="line"><span class="comment">#生成gitlab备份文件</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line">gitlab_bak_file=</span><br><span class="line">gitlab_bak_dir=/data/gitlab_bak</span><br><span class="line">mkdir -p <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">cp /etc/gitlab/gitlab.rb  </span><br><span class="line">cp /etc/gitlab/gitlab-secrets.json <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">mv /var/opt/gitlab/backups/* <span class="variable">$&#123;gitlab_bak_dir&#125;</span>/<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"></span><br><span class="line">crontab -l</span><br><span class="line">* 4 * * * /opt/gitlab_bak.sh</span><br></pre></td></tr></table></figure>
<p>二、简单使用<br>1、生成服务器ssh密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[www@master .ssh]$ ssh-keygen </span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:h4knSLSSXOs&#x2F;+cUrkI7&#x2F;mPAyOlbL1qnFwL1HCspNBTo www@master</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    +            |</span><br><span class="line">| . &#x3D; +           |</span><br><span class="line">|  E + .          |</span><br><span class="line">|   * + . o       |</span><br><span class="line">|    B +.S .      |</span><br><span class="line">| . +.&#x3D;oB o       |</span><br><span class="line">|  ooo&#x3D;Oo. o      |</span><br><span class="line">|  o B++*.. .     |</span><br><span class="line">| ..+.&#x3D;&#x3D;.o..      |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[www@master .ssh]$ ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br><span class="line">[www@master .ssh]$</span><br></pre></td></tr></table></figure>
<p>2、然后把公钥复制到gitlab用户设置里的ssh密钥处</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab08.png" class title="This is an jenkins image">
<p>3、创建一个命名为test的项目</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab09.png" class title="This is an jenkins image">
<p>4、查看服务器是否安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># rpm -qa | grep git</span></span><br><span class="line">libglvnd-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">crontabs-1.11-6.20121102git.el7.noarch</span><br><span class="line">net-tools-2.0-0.25.20131004git.el7.x86_64</span><br><span class="line">lm_sensors-libs-3.4.0-8.20160601gitf9185e5.el7.x86_64</span><br><span class="line">libglvnd-glx-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">libglvnd-egl-1.0.1-0.8.git5baa1e5.el7.x86_64</span><br><span class="line">linux-firmware-20191203-76.gite8a0f4c.el7.noarch</span><br><span class="line">git-1.8.3.1-23.el7_8.x86_64</span><br></pre></td></tr></table></figure>
<p>5、复制克隆地址，然后在服务器把项目克隆到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git@192.168.0.143:root&#x2F;test.git</span><br></pre></td></tr></table></figure>
<p>因为刚才我们设置里面提供的是www用户的密钥，则以www用户去克隆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[www@master www]$ git <span class="built_in">clone</span> git@192.168.0.143:root/test.git</span><br><span class="line">正克隆到 <span class="string">'test'</span>...</span><br><span class="line">The authenticity of host <span class="string">'192.168.0.143 (192.168.0.143)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:aIE7r5cEABEogX0LNpMVgCqZif3K+C+jb6AaHgXWDtY.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:c9:cb:ae:bb:28:13:98:5f:6f:fc:c3:ab:16:0c:7b:22.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.0.143<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">warning: 您似乎克隆了一个空版本库。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[www@master www]$ cd test</span></span><br><span class="line"><span class="string">[www@master test]$ ls -a</span></span><br><span class="line"><span class="string">.  ..  .git</span></span><br></pre></td></tr></table></figure>
<p>6、创建文件夹及文件，提交到gitlab上面<br>由于我们没有设置邮箱及用户名，则提示先让我们设置</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab10.png" class title="This is an jenkins image">
<p>7、设置邮箱地址及用户，并提交文件到gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[www@master <span class="built_in">test</span>]$ git config --global user.email <span class="string">"test@qq.com"</span></span><br><span class="line">[www@master <span class="built_in">test</span>]$ git config --global user.name <span class="string">"test"</span></span><br><span class="line">[www@master <span class="built_in">test</span>]$ git commit -m <span class="string">"提交测试文件到gitlab"</span></span><br><span class="line">[master（根提交） d8827eb] 提交测试文件到gitlab</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test_2020-09-29/test.txt</span><br><span class="line">[www@master <span class="built_in">test</span>]$ git push origin master</span><br><span class="line">Counting objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 288 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.0.143:root/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>
<p>8、查看gitlab web界面是否存在我们上面所提交的文件夹及文件</p>
<img src="/rz168.io/2020/09/25/gitlab%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab11.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>openssh-7.4脚本安装</title>
    <url>/rz168.io/2020/07/13/openssh-7-4%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>openssh-7.4脚本安装</p>
<a id="more"></a>
<p>在centos-6.x系统版本下在openssh都是5.3，所以在安装在其它软件或者执行一些命令的时候，<br>都会显示不支持或者其它错误，那么下面就是升级openssh脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++ telnet-server* pam-devel zlib-devel openssl openssl-devel</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://down.i.my71.com/openssh-7.4p1.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf openssh-7.4p1.tar.gz &amp;&amp; <span class="built_in">cd</span> openssh-7.4p1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/openssh --sysconfdir=/etc/ssh --with-pam --with-md5-passwords --mandir=/usr/share/man</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">/etc/init.d/sshd stop</span><br><span class="line">\cp -f /usr/<span class="built_in">local</span>/src/openssh-7.4p1/contrib/redhat/sshd.init /etc/init.d/sshd</span><br><span class="line">chmod u+x /etc/init.d/sshd</span><br><span class="line">\cp -f /usr/<span class="built_in">local</span>/openssh/sbin/sshd /usr/sbin/sshd</span><br><span class="line">\cp -f /usr/<span class="built_in">local</span>/openssh/bin/ssh-keygen /usr/bin/ssh-keygen</span><br><span class="line">sed -i <span class="string">'s/GSSAPIAuthentication yes/#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">'s/GSSAPICleanupCredentials yes/#GSSAPICleanupCredentials yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">'s/UsePAM yes/#UsePAM yes/g'</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-6.0部署</title>
    <url>/rz168.io/2020/05/15/redis-6-0-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Redis-6.0安装</p>
<a id="more"></a>
<p>1、redis简介，这边省略，若有需要直接查看上一篇redis哨兵配置<br>2、redis6.0更新最大特性：Redis 6.0将在今年年底发布，其中引入的最重大的改变就是多线程IO<br>下面进入正题，安装部署流程<br>#安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install wget nc telnet gcc gcc-c++ autoconf cmake bison libevent libevent-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel libcurl libcurl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers libpcap libpcap-devel libtool iptables iptables-services rsync file perl perl-DBD-MySQL perl-devel sysstat mailx ntpdate vim jwhois <span class="built_in">bind</span>-utils git ipset ipset-service tcpdump iftop inotify-tools gcc-g77 vsftpd subversion strace java python-pip net-tools mtr gettext gettext-devel</span><br></pre></td></tr></table></figure>

<p>#由于redis6.0需要安装gcc_9.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br></pre></td></tr></table></figure>
<p>#若不更新gcc会提示以下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.c:xxxx:xx: error: ‘xxxxxxxx’ has no member named ‘xxxxx’</span><br></pre></td></tr></table></figure>

<p>#添加系统变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /opt/rh/devtoolset-9/enable"</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>

<p>#redis-6.0部署脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_redis</span></span> () &#123;</span><br><span class="line">        <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="string">" redis-6.0.1.tar.gz"</span> ]; <span class="keyword">then</span></span><br><span class="line">           wget http://download.redis.io/releases/redis-6.0.1.tar.gz</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">        tar -zxvf /usr/<span class="built_in">local</span>/src/redis-6.0.1.tar.gz</span><br><span class="line">        <span class="built_in">cd</span> redis-6.0.1</span><br><span class="line">        make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br><span class="line">        mkdir -p /usr/<span class="built_in">local</span>/redis/&#123;etc,var&#125;</span><br><span class="line">        rsync -avz redis.conf  /usr/<span class="built_in">local</span>/redis/etc/</span><br><span class="line">        sed -i <span class="string">"s@logfile.*@logfile /usr/local/redis/var/redis.log@"</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf  <span class="comment">#相当于替换</span></span><br><span class="line">        sed -i <span class="string">"s@^dir.*@dir /usr/local/redis/var@"</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf					  <span class="comment">#相当于替换</span></span><br><span class="line">        sed -i <span class="string">'s/daemonize no/daemonize yes/g'</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line">        sed -i <span class="string">'s/^# bind 127.0.0.1/bind 127.0.0.1/g'</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_redis</span><br></pre></td></tr></table></figure>
<p>启动redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/ &amp;&amp; ./redis-server ../etc/redis.conf</span><br></pre></td></tr></table></figure>
<p>查看版本是否为6.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis &amp;&amp; ./redis-server -v</span><br><span class="line">Redis server v=6.0.1 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=0</span><br></pre></td></tr></table></figure>
<p>redis 命令参考见官网：<a href="https://redis.io/commands" target="_blank" rel="noopener">https://redis.io/commands</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb副本集群搭建</title>
    <url>/rz168.io/2020/07/27/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Mongodb副本集群搭建</p>
<a id="more"></a>
<p>Mongodb副本集介绍<br>MongoDB复制是将数据同步在多个服务器的过程。<br>复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。<br>复制还允许您从硬件故障和服务中断中恢复数据。</p>
<p>服务器信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodb01   192.168.0.32</span><br><span class="line">mongodb02   192.168.0.16</span><br><span class="line">mongodb03   192.168.0.23</span><br></pre></td></tr></table></figure>
<p>1、分别在三台服务器上安装mongodb，安装教程可访问上一篇文章<br>2、先要配置三台免密互通,配置防火墙放通对应端口，这里为了简单就直接关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id mongodb01</span><br><span class="line">ssh-copy-id mongodb02</span><br><span class="line">ssh-copy-id mongodb03</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop iptables</span><br></pre></td></tr></table></figure>
<p>3、启动Mongodb服务,三台服务器分别执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongod -f /usr/<span class="built_in">local</span>/mongodb-4.2.8/mongo.conf --replSet=rs0    <span class="comment">#--replSet=rs0 表示副本集名称为rs0</span></span><br></pre></td></tr></table></figure>
<p>3、配置集群，三台服务器其中一台执行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongo</span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">     &#123;  _id : <span class="string">"rs0"</span>,</span><br><span class="line">            members: [</span><br><span class="line">                &#123; _id: 0, host: <span class="string">"192.168.0.32:27017"</span> &#125;,</span><br><span class="line">                &#123; _id: 1, host: <span class="string">"192.168.0.16:27017"</span> &#125;,</span><br><span class="line">                &#123; _id: 2, host: <span class="string">"192.168.0.23:27017"</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&gt;rs.status()</span><br><span class="line"></span><br><span class="line">例如现在需要增加多一台副本集，则执行以下命令即可</span><br><span class="line">rs.add(<span class="string">"serverC"</span>)</span><br><span class="line">删除或者重新配置</span><br><span class="line">rs.remove(<span class="string">"serverB"</span>)</span><br></pre></td></tr></table></figure>
<p>4、查看副本集配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs0:SECONDARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"set"</span> : <span class="string">"rs0"</span>,</span><br><span class="line">	<span class="string">"date"</span> : ISODate(<span class="string">"2020-07-27T07:20:58.684Z"</span>),</span><br><span class="line">	<span class="string">"myState"</span> : 2,</span><br><span class="line">	<span class="string">"term"</span> : NumberLong(4),</span><br><span class="line">	<span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">	<span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">	<span class="string">"syncSourceId"</span> : 2,</span><br><span class="line">	<span class="string">"heartbeatIntervalMillis"</span> : NumberLong(2000),</span><br><span class="line">	<span class="string">"majorityVoteCount"</span> : 2,</span><br><span class="line">	<span class="string">"writeMajorityCount"</span> : 2,</span><br><span class="line">	<span class="string">"optimes"</span> : &#123;</span><br><span class="line">		<span class="string">"lastCommittedOpTime"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"lastCommittedWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line">		<span class="string">"readConcernMajorityOpTime"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"readConcernMajorityWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line">		<span class="string">"appliedOpTime"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"durableOpTime"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"lastAppliedWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>),</span><br><span class="line">		<span class="string">"lastDurableWallTime"</span> : ISODate(<span class="string">"2020-07-23T17:31:37.772Z"</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"lastStableRecoveryTimestamp"</span> : Timestamp(1595831721, 289),</span><br><span class="line">	<span class="string">"lastStableCheckpointTimestamp"</span> : Timestamp(1595831721, 289),</span><br><span class="line">	<span class="string">"electionParticipantMetrics"</span> : &#123;</span><br><span class="line">		<span class="string">"votedForCandidate"</span> : <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"electionTerm"</span> : NumberLong(4),</span><br><span class="line">		<span class="string">"lastVoteDate"</span> : ISODate(<span class="string">"2020-07-27T06:43:08.481Z"</span>),</span><br><span class="line">		<span class="string">"electionCandidateMemberId"</span> : 2,</span><br><span class="line">		<span class="string">"voteReason"</span> : <span class="string">""</span>,</span><br><span class="line">		<span class="string">"lastAppliedOpTimeAtElection"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 46),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(2)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"maxAppliedOpTimeInSet"</span> : &#123;</span><br><span class="line">			<span class="string">"ts"</span> : Timestamp(1595831721, 46),</span><br><span class="line">			<span class="string">"t"</span> : NumberLong(2)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"priorityAtElection"</span> : 1,</span><br><span class="line">		<span class="string">"newTermStartDate"</span> : ISODate(<span class="string">"2020-07-23T16:50:47.439Z"</span>),</span><br><span class="line">		<span class="string">"newTermAppliedDate"</span> : ISODate(<span class="string">"2020-07-27T06:43:08.487Z"</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"members"</span> : [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"_id"</span> : 0,</span><br><span class="line">			<span class="string">"name"</span> : <span class="string">"192.168.0.32:27017"</span>,</span><br><span class="line">			<span class="string">"health"</span> : 1,</span><br><span class="line">			<span class="string">"state"</span> : 2,</span><br><span class="line">			<span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line">			<span class="string">"uptime"</span> : 2277,</span><br><span class="line">			<span class="string">"optime"</span> : &#123;</span><br><span class="line">				<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">				<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">			<span class="string">"syncSourceId"</span> : 2,</span><br><span class="line">			<span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"configVersion"</span> : 1,</span><br><span class="line">			<span class="string">"self"</span> : <span class="literal">true</span>,</span><br><span class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"_id"</span> : 1,</span><br><span class="line">			<span class="string">"name"</span> : <span class="string">"192.168.0.16:27017"</span>,</span><br><span class="line">			<span class="string">"health"</span> : 1,</span><br><span class="line">			<span class="string">"state"</span> : 2,</span><br><span class="line">			<span class="string">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line">			<span class="string">"uptime"</span> : 1667,</span><br><span class="line">			<span class="string">"optime"</span> : &#123;</span><br><span class="line">				<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">				<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"optimeDurable"</span> : &#123;</span><br><span class="line">				<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">				<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.941Z"</span>),</span><br><span class="line">			<span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-27T07:20:58.070Z"</span>),</span><br><span class="line">			<span class="string">"pingMs"</span> : NumberLong(0),</span><br><span class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"syncingTo"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">			<span class="string">"syncSourceId"</span> : 2,</span><br><span class="line">			<span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"configVersion"</span> : 1</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"_id"</span> : 2,</span><br><span class="line">			<span class="string">"name"</span> : <span class="string">"192.168.0.23:27017"</span>,</span><br><span class="line">			<span class="string">"health"</span> : 1,</span><br><span class="line">			<span class="string">"state"</span> : 1,</span><br><span class="line">			<span class="string">"stateStr"</span> : <span class="string">"PRIMARY"</span>,</span><br><span class="line">			<span class="string">"uptime"</span> : 2276,</span><br><span class="line">			<span class="string">"optime"</span> : &#123;</span><br><span class="line">				<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">				<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"optimeDurable"</span> : &#123;</span><br><span class="line">				<span class="string">"ts"</span> : Timestamp(1595831721, 295),</span><br><span class="line">				<span class="string">"t"</span> : NumberLong(4)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">"optimeDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"optimeDurableDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"lastHeartbeat"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.688Z"</span>),</span><br><span class="line">			<span class="string">"lastHeartbeatRecv"</span> : ISODate(<span class="string">"2020-07-27T07:20:57.489Z"</span>),</span><br><span class="line">			<span class="string">"pingMs"</span> : NumberLong(0),</span><br><span class="line">			<span class="string">"lastHeartbeatMessage"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"syncingTo"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"syncSourceHost"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"syncSourceId"</span> : -1,</span><br><span class="line">			<span class="string">"infoMessage"</span> : <span class="string">""</span>,</span><br><span class="line">			<span class="string">"electionTime"</span> : Timestamp(1595831721, 47),</span><br><span class="line">			<span class="string">"electionDate"</span> : ISODate(<span class="string">"2020-07-27T06:35:21Z"</span>),</span><br><span class="line">			<span class="string">"configVersion"</span> : 1</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="string">"ok"</span> : 1,</span><br><span class="line">	<span class="string">"<span class="variable">$clusterTime</span>"</span> : &#123;</span><br><span class="line">		<span class="string">"clusterTime"</span> : Timestamp(1595831721, 295),</span><br><span class="line">		<span class="string">"signature"</span> : &#123;</span><br><span class="line">			<span class="string">"hash"</span> : BinData(0,<span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span>),</span><br><span class="line">			<span class="string">"keyId"</span> : NumberLong(0)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"operationTime"</span> : Timestamp(1595831721, 295)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、三台服务器连接到mongodb，查看本身身份,其中只有一个PRIMARY</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb-4.2.8/bin/mongo</span><br><span class="line">rs0:PRIMARY&gt;</span><br><span class="line">rs0:SECONDARY&gt;</span><br><span class="line">rs0:SECONDARY&gt;</span><br></pre></td></tr></table></figure>
<p>6、三台服务器分别执行查看数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show dbs</span><br><span class="line">出现以下错误，则需要执行此命令rs.slaveOk()</span><br><span class="line">2020-07-27T14:56:10.190+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;</span><br><span class="line">或者执行以下操作，让副本服务器可读</span><br><span class="line">find / --name .mongorc.js</span><br><span class="line">一般这个文件为空，直接添加这一行，然后保存退出，再重新连接mongodb就可以发现副本可读</span><br><span class="line">rs.slaveOk()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-swarm集群创建及简单部署服务</title>
    <url>/rz168.io/2020/09/08/docker-swarm%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>Docker-swarm集群创建及简单部署服务<br> <a id="more"></a><br>1、基本概念<br>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。<br>2、原理<br>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成。<br>swarm mananger：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。<br>work node：即图中的 available node，主要负责运行相应的服务来执行任务（task）。</p>
<img src="/rz168.io/2020/09/08/docker-swarm%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1/docker_swarm.png" class title="This is an jenkins image">
<p>3、服务器信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 配置信息 | hostname | IP |</span><br><span class="line">| 4C8G | vm01 | 192.168.0.32 |</span><br><span class="line">| 4C8G | vm02 | 192.168.0.16 |</span><br></pre></td></tr></table></figure>
<p>4、初始化集群,注意初始化的前提是需要安装docker服务，提示下面内容，则证明集群初始化成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker swarm init --advertise-addr 192.168.0.32</span></span><br><span class="line">Swarm initialized: current node (ohrz9nw5t5v1y1y7j765x1poj) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-47cqr2h4jksb1ww877fjd5wohi5qoylftw3wc72rtuhp0az8sl-f087ypkdubuiad5ewlstubaaz 192.168.0.32:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>
<p>5、根据上面初始化集群得出的信息，增加工作节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm02 ~]<span class="comment"># docker swarm join --token SWMTKN-1-47cqr2h4jksb1ww877fjd5wohi5qoylftw3wc72rtuhp0az8sl-f087ypkdubuiad5ewlstubaaz 192.168.0.32:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>
<p>6、在管理节点上查看集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">ohrz9nw5t5v1y1y7j765x1poj *   vm01                Ready               Active              Leader              19.03.12</span><br><span class="line">vuyrpzemdlmxt4jhe8fe1ocvb     vm02                Ready               Active                                  19.03.12</span><br></pre></td></tr></table></figure>
<p>7、部署3个nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service create --replicas 3 -p 80:80 --name nginx nginx:1.13.7-alpine</span></span><br><span class="line">ok1g9lldpsrtfbozt64xb1j0w</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>
<p>8、使用 docker service ls 来查看当前 Swarm 集群运行的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                 PORTS</span><br><span class="line">ok1g9lldpsrt        nginx               replicated          3/3                 nginx:1.13.7-alpine   *:80-&gt;80/tcp</span><br></pre></td></tr></table></figure>
<p>9、使用 docker service ps 来查看某个服务的详情</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service ps nginx</span></span><br><span class="line">ID                  NAME                IMAGE                 NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">qi4xswuy6td3        nginx.1             nginx:1.13.7-alpine   vm02                Running             Running about a minute ago                       </span><br><span class="line">z9fhx7rsesbt        nginx.2             nginx:1.13.7-alpine   vm01                Running             Running about a minute ago                       </span><br><span class="line">s7dscxvta7cf        nginx.3             nginx:1.13.7-alpine   vm02                Running             Running about a minute ago</span><br></pre></td></tr></table></figure>
<p>10、当我们的业务处于高峰期时，我们可以使用（docker service scale nginx=x）扩展服务运行的容器数量。<br>当业务平稳时可以适当减少服务容量数量x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment"># docker service scale nginx=5</span></span><br><span class="line">nginx scaled to 5</span><br><span class="line">overall progress: 5 out of 5 tasks </span><br><span class="line">1/5: running   [==================================================&gt;] </span><br><span class="line">2/5: running   [==================================================&gt;] </span><br><span class="line">3/5: running   [==================================================&gt;] </span><br><span class="line">4/5: running   [==================================================&gt;] </span><br><span class="line">5/5: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>
<p>11、删除服务-使用 docker service rm 来从 Swarm 集群移除某个服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm01 ~]<span class="comment">#  docker service rm nginx</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>showdoc-安装篇</title>
    <url>/rz168.io/2020/07/14/showdoc-%E5%AE%89%E8%A3%85%E7%AF%87/</url>
    <content><![CDATA[<p>Showdoc-技术文档安装，备份，迁移</p>
<a id="more"></a>
<p>记录一下Showdoc的安装迁移部署，注：showdoc使用的是Markdown语法~<br>1、Showdoc是何物？<br>引用官网：<br>    每当接手一个他人开发好的模块或者项目，看着那些没有写注释的代码，我们都无比抓狂。文档呢？！文档呢？！<br>    Show me the doc ！！</p>
<p>2、Showdoc安装方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker安装</span><br><span class="line">php安装，注这里的php版本需要5.3及以上，同时需要开启php-gd php-sqlite扩展</span><br></pre></td></tr></table></figure>

<p>3、这里通过php安装方式，php、nginx（apache）安装（略）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/star7th/showdoc/archive/v2.8.3.zip</span><br><span class="line">unzip v2.8.3.zip</span><br><span class="line">mv showdoc-2.8.3/* /var/www/html</span><br><span class="line">chown -R www.www /var/www/html</span><br></pre></td></tr></table></figure>

<p>4、把解压的文件复制到apache或nginx的root目录下，nginx配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/showdoc.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line">        root         /var/www/html;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        error_page  404              /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           /var/www/html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">            deny  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>5、需要在nginx.conf内引用些配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include showdoc.conf;</span><br></pre></td></tr></table></figure>
<p>6、然后打开浏览器访问<a href="http://localhouse/install进入安装界面,然后点击安装" target="_blank" rel="noopener">http://localhouse/install进入安装界面,然后点击安装</a></p>
<img src="/rz168.io/2020/07/14/showdoc-%E5%AE%89%E8%A3%85%E7%AF%87/showdoc-01.png" class title="This is an jenkins image">
<p>7、安装成功的界面</p>
<img src="/rz168.io/2020/07/14/showdoc-%E5%AE%89%E8%A3%85%E7%AF%87/showdoc-02.png" class title="This is an jenkins image">
<p>8、登陆showdoc，默认账号为showdoc/123456</p>
<img src="/rz168.io/2020/07/14/showdoc-%E5%AE%89%E8%A3%85%E7%AF%87/showdoc-03.png" class title="This is an jenkins image">
<p>9、登陆成功的界面如下</p>
<img src="/rz168.io/2020/07/14/showdoc-%E5%AE%89%E8%A3%85%E7%AF%87/showdoc-04.png" class title="This is an jenkins image">
<p>10、备份，主要把showdoc文件夹下的Public以及Sqlite备份即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">tar -zcf /opt/showdoc.tar.gz Sqlite Public</span><br></pre></td></tr></table></figure>
<p>11、恢复只要安装好showdoc之后，直接把备份文件复制回原来位置即可，或者docker安装映射目录后替换<br>如果是docker方式安装还需要配置nginx反向代理，因为docker方式安装默认端口为4999，则nginx直接反<br>向代理即可，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream showdoc &#123;</span><br><span class="line">        server  127.0.0.1:4999 weight=1 max_fails=3  fail_timeout=60;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name showdoc.test.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://showdoc;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">'upgrade'</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-主从-哨兵配置</title>
    <url>/rz168.io/2020/05/15/redis-%E4%B8%BB%E4%BB%8E-%E5%93%A8%E5%85%B5/</url>
    <content><![CDATA[<p>Redis主从哨兵集群安装</p>
<a id="more"></a>
<p>1、1 Redis官网简介<br>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。官网链接：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a><br>1、2 Redis作用<br>相信redis这个名称大家都不陌生，为什么？<br>因为redis可以用来做中间插件缓存</p>
<p>1、3 Redis的优、缺点<br>性能极高 – Redis能支持超过 100K+ 每秒的读写频率。<br>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。<br>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p>
<p>Redis的缺点<br>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</p>
<p>总结： Redis受限于特定的场景，专注于特定的领域之下，速度相当之快，目前还未找到能替代使用产品。</p>
<p>前期准备，安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install wget nc telnet gcc gcc-c++ autoconf cmake bison libevent libevent-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel libcurl libcurl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers libpcap libpcap-devel libtool iptables iptables-services rsync file perl perl-DBD-MySQL perl-devel sysstat mailx ntpdate vim jwhois <span class="built_in">bind</span>-utils git ipset ipset-service tcpdump iftop inotify-tools gcc-g77 vsftpd subversion strace java python-pip net-tools mtr gettext gettext-devel</span><br></pre></td></tr></table></figure>

<p>1、4 架构为单机模式：一主多从多哨兵</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 redis-master redis(6379)、sentnel(26379)</span><br><span class="line">127.0.0.1 redis-slave  redis(6380)、sentnel(26380)</span><br><span class="line">127.0.0.1 redis-slave  redis(6381)、sentnel(26381)</span><br></pre></td></tr></table></figure>

<p>1、5 Redis下载及安装（脚本形式,只要装一次，然后直接复制配置文件进行修改，多机则都运行一次安装脚本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim redis_install.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_redis</span></span> () &#123;</span><br><span class="line">        <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="string">" redis-4.0.1.tar.gz"</span> ]; <span class="keyword">then</span></span><br><span class="line">           wget http://download.redis.io/releases/redis-5.0.4.tar.gz</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">        tar -zxvf /usr/<span class="built_in">local</span>/src/redis-5.0.4.tar.gz</span><br><span class="line">        <span class="built_in">cd</span> redis-5.0.4</span><br><span class="line">        make PREFIX=/usr/<span class="built_in">local</span>/redis install</span><br><span class="line">        mkdir -p /usr/<span class="built_in">local</span>/redis/&#123;etc,var&#125;</span><br><span class="line">        rsync -avz redis.conf  /usr/<span class="built_in">local</span>/redis/etc/</span><br><span class="line">        sed -i <span class="string">"s@logfile.*@logfile /usr/local/redis/var/redis.log@"</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf  <span class="comment">#相当于替换</span></span><br><span class="line">        sed -i <span class="string">"s@^dir.*@dir /usr/local/redis/var@"</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf					  <span class="comment">#相当于替换</span></span><br><span class="line">        sed -i <span class="string">'s/daemonize no/daemonize yes/g'</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line">        sed -i <span class="string">'s/^# bind 127.0.0.1/bind 127.0.0.1/g'</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_redis</span><br></pre></td></tr></table></figure>
<p>1、6 复制配置文件进行对应修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/etc</span><br><span class="line">sed -i <span class="string">'/^#/d;/^$/d'</span> redis.conf</span><br><span class="line">mv redis.conf redis-6379.conf</span><br><span class="line">cp redis-6379.conf redis-6380.conf</span><br><span class="line">cp redis-6379.conf redis-6381.conf</span><br></pre></td></tr></table></figure>
<p>为了好标记，这里以·开头为修改部分，下面直接粘贴三个配置文件<br>redis-6379.comf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile <span class="string">"/var/run/redis_6379.pid"</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/var"</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"><span class="comment"># Generated by CONFIG REWRITE</span></span><br></pre></td></tr></table></figure>
<p>redis-6380.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6380</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile <span class="string">"/var/run/redis_6379.pid"</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/var"</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">·appendonly yes</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line">·slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<p>redis-6381.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">protected-mode yes</span><br><span class="line">·port 6381</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile <span class="string">"/var/run/redis_6379.pid"</span></span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename <span class="string">"dump.rdb"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/var"</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">·appendonly yes</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line">·slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<p>1、7 上面为redis的配置，下面配置三个哨兵（sentinel）,和上面同理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/redis/data/sentinel</span><br></pre></td></tr></table></figure>
<p>sentinel-6379.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line">pidfile <span class="string">"/usr/local/redis/var/redis-6379.pid"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/data/sentinel"</span></span><br><span class="line">daemonize yes</span><br><span class="line">protected-mode no</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis-sentinel.log"</span></span><br><span class="line">sentinel monitor redisMaster 127.0.0.1 6379 2 </span><br><span class="line">sentinel down-after-milliseconds redisMaster 10000 </span><br><span class="line">sentinel parallel-syncs redisMaster 1</span><br><span class="line">sentinel failover-timeout redisMaster 60000</span><br></pre></td></tr></table></figure>
<p>sentinel-6380.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26380</span><br><span class="line">pidfile <span class="string">"/usr/local/redis/var/redis-6380.pid"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/data/sentinel"</span></span><br><span class="line">daemonize yes</span><br><span class="line">protected-mode no</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis-sentinel.log"</span></span><br><span class="line">sentinel monitor redisMaster 127.0.0.1 6380 2 </span><br><span class="line">sentinel down-after-milliseconds redisMaster 10000 </span><br><span class="line">sentinel parallel-syncs redisMaster 1</span><br><span class="line">sentinel failover-timeout redisMaster 60000</span><br></pre></td></tr></table></figure>
<p>sentinel-6381.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26381</span><br><span class="line">pidfile <span class="string">"/usr/local/redis/var/redis-6381.pid"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis/data/sentinel"</span></span><br><span class="line">daemonize yes</span><br><span class="line">protected-mode no</span><br><span class="line">logfile <span class="string">"/usr/local/redis/var/redis-sentinel.log"</span></span><br><span class="line">sentinel monitor redisMaster 127.0.0.1 6381 2 </span><br><span class="line">sentinel down-after-milliseconds redisMaster 10000 </span><br><span class="line">sentinel parallel-syncs redisMaster 1</span><br><span class="line">sentinel failover-timeout redisMaster 60000</span><br></pre></td></tr></table></figure>
<p>1、8 配置文件现在已经配置完，下面启动服务<br>cd /usr/local/redis/bin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server ../etc/redis-6379.conf</span><br><span class="line">./redis-server ../etc/redis-6380.conf</span><br><span class="line">./redis-server ../etc/redis-6381.conf</span><br><span class="line">./redis-sentinel ../data/sentinel/sentinel-6379.conf</span><br><span class="line">./redis-sentinel ../data/sentinel/sentinel-6380.conf</span><br><span class="line">./redis-sentinel ../data/sentinel/sentinel-6381.conf</span><br></pre></td></tr></table></figure>
<p>netstat -ntlp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_16_2_centos bin]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      19533/./redis-serve </span><br><span class="line">tcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      18205/./redis-senti </span><br><span class="line">tcp        0      0 0.0.0.0:26380           0.0.0.0:*               LISTEN      18211/./redis-senti </span><br><span class="line">tcp        0      0 127.0.0.1:6380          0.0.0.0:*               LISTEN      17831/./redis-serve </span><br><span class="line">tcp        0      0 127.0.0.1:6381          0.0.0.0:*               LISTEN      2681/./redis-server </span><br><span class="line">tcp        0      0 0.0.0.0:26381           0.0.0.0:*               LISTEN      18227/./redis-senti </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1386/sshd           </span><br><span class="line">tcp6       0      0 :::26379                :::*                    LISTEN      18205/./redis-senti </span><br><span class="line">tcp6       0      0 :::26380                :::*                    LISTEN      18211/./redis-senti </span><br><span class="line">tcp6       0      0 :::26381                :::*                    LISTEN      18227/./redis-senti</span><br></pre></td></tr></table></figure>
<p>1、9 测试，查看自身为什么身份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -h 127.0.0.1 -p 6379 INFO|grep role</span><br><span class="line">role:master</span><br><span class="line">./redis-cli -h 127.0.0.1 -p 6380 INFO|grep role</span><br><span class="line">role:slave</span><br><span class="line">./redis-cli -h 127.0.0.1 -p 6381 INFO|grep role</span><br><span class="line">role:slave</span><br></pre></td></tr></table></figure>
<p>1、10 登陆到master进行写入数据，看slave是否有同步(分别在三个介面操作，方便分别),因我这边已经测试主从切换，master现在为6380</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -h 127.0.0.1 -p 6379 </span><br><span class="line">./redis-cli -h 127.0.0.1 -p 6380 </span><br><span class="line">./redis-cli -h 127.0.0.1 -p 6381</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix-4.2.3-安装</title>
    <url>/rz168.io/2020/05/20/zabbix-4-2-3-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Zabbix安装篇</p>
<a id="more"></a>
<p>1.1 背景：<br>    线上业务至关重要，为了保证业务正常运行及遇到突然情况得以告知运维人员，下面将进行简单的监控软件zabix安装，当然除了还有其它的监控软件。<br>1.2 监控软件的介绍：<br>    cacti、nagios、zabbix、smokeping、open-falcon等等<br>    cacti、smokeping偏向于基础监控，成图非常漂亮<br>    cacti、nagios、zabbix服务端监控中心，需要php环境支持，其中zabbix和cacti都需要mysql作为数据存储，            nagios不用存储历史数据，注重服务或者监控项的状态，zabbix会获取服务或者监控项目的数据，会把数据记录到数据库里，从而可以成图<br>       open-falcon为小米公司开发，开源后受到诸多大公司和运维工程师的追捧，适合大企业，滴滴、360、新浪微博、京东等大公司在使用这款监控软件,但后续以介绍zabbix为主<br>1.3 zabbix的安装<br>    现在我服务器上已经编译安装好了LNMP环境，如果没有可以执行下面的命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y make mariadb-server mariadb httpd php mysql-devel gcc net-snmp-devel curl-devel perl-DBI php-gd php-mysql php-bcmath php-mbstring php-xml unixODBC-devel OpenIPMI-devel libxml2-devel libevent-devel libevent  php-gd php-LDAP php-ldap php-xmlreader php-xmlwriter mysql-devel net-snmp-devel</span><br></pre></td></tr></table></figure>
<p> 1.4 新建一个zabbix账户并创建数据库赋予zabbix权限（下面命令为免登陆远程创建，可以对应修改）<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  useradd zabbix -s /sbin/nologin</span><br><span class="line">	mysql -e <span class="string">"create database zabbix character set utf8 collate utf8_bin;"</span></span><br><span class="line">mysql -e <span class="string">"grant all on zabbix.* to zabbix@localhost identified by 'zabbix';"</span></span><br><span class="line">mysql -e <span class="string">"flush privileges;"</span></span><br></pre></td></tr></table></figure><br> 1.5 下载zabbix，并且导入数据库，我这原有最新版zabbix4.2.3所以还是直接使用，若有需要可以到官网下载其它版本也可。<br>(下载URL:<a href="https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/4.2.3/zabbix-4.2.3.tar.gz" target="_blank" rel="noopener">https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/4.2.3/zabbix-4.2.3.tar.gz</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"> 	tar -xvf zabbix-4.2.3.tar.gz</span><br><span class="line"> 	<span class="built_in">cd</span> zabbix-4.2.3/database/mysql</span><br><span class="line">	 mysql -uzabbix -pzabbix zabbix &lt; schema.sql</span><br><span class="line"> 	mysql -uzabbix -pzabbix zabbix &lt; images.sql</span><br><span class="line"> 	mysql -uzabbix -pzabbix zabbix &lt; data.sql</span><br></pre></td></tr></table></figure>
<p>1.6 编译安装zabbix_server，如果提示错误，就对应yum安装插件包再重新编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --<span class="built_in">enable</span>-server --<span class="built_in">enable</span>-agent --with-gettext --with-mysql --with-net-snmp --with-libcurl --with-libxml2 --with-openipmi --with-unixodbc --prefix=/usr/<span class="built_in">local</span>/zabbix</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>1.7 编辑httpd.conf文件，使其支持php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DirectoryIndex index.html index.php</span><br></pre></td></tr></table></figure>
<p>1.8 修改zabbix_server的配置文件，对应的数据库账号密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure>
<p>1.9 复制启动脚本，并进行对应修改加上执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  cp misc/init.d/fedora/core5/zabbix_server /etc/init.d/</span><br><span class="line">  cp misc/init.d/fedora/core5/zabbix_agentd /etc/init.d/</span><br><span class="line">vim /etc/init.d/zabbix_server</span><br><span class="line">  ZABBIX_BIN=<span class="string">"/usr/local/sbin/zabbix_server"</span>--&gt;ZABBIX_BIN=<span class="string">"/usr/local/zabbix/sbin/zabbix_server"</span></span><br><span class="line">  vim /etc/init.d/zabbix_agentd</span><br><span class="line">  ZABBIX_BIN=<span class="string">"/usr/local/sbin/zabbix_agentd"</span>--&gt;ZABBIX_BIN=<span class="string">"/usr/local/zabbix/sbin/zabbix_agentd"</span></span><br><span class="line">  chmod +x /etc/init.d/zabbix*</span><br></pre></td></tr></table></figure>
<p>1.10 启动服务端和客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/zabbix_server</span><br><span class="line">/etc/init.d/zabbix_agentd</span><br></pre></td></tr></table></figure>
<p>1.11 修改php.ini文件支持大小，不然web会容易报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini </span><br><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">date.timezone =Asia/Shanghai</span><br><span class="line">post_max_size = 32M</span><br></pre></td></tr></table></figure>
<p>1.12 复制zabbix的php项目到web的目录下，并且赋予用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -rf php /var/www/html/zabbix</span><br><span class="line">chown zabbix:zabbix -R /var/www/html/zabbix</span><br></pre></td></tr></table></figure>
<p>1.13 访问web页面在浏览器上输入：<a href="http://IP/zabbix" target="_blank" rel="noopener">http://IP/zabbix</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 	--&gt;默认下一步</span><br><span class="line">--&gt;插件检测页面，若有不通过的，直接yum，或者百度，下一步</span><br><span class="line">--&gt;配置数据库，按照实际修改</span><br><span class="line">--&gt;配置zabbix_server，默认或者实际修改</span><br><span class="line">--&gt;install完，默认的账号密码为Admin/zabbix</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>svn迁移</title>
    <url>/rz168.io/2020/08/11/svn%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>记——&gt;svn迁移</p>
<a id="more"></a>
<p>由于把主要项目从svn迁移到git，现在需要把剩一些次要的项目迁移到其它服务器上，则记之<br>迁移流程：<br>    1）临时免密（因为需要传输文件）<br>    2）新服务器需要提前安装svn，建议直接yum<br>1、新服务器安装svn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure>
<p>2、创建相关目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/svn_dir</span><br></pre></td></tr></table></figure>
<p>3、原服务器svn导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/svn_dir/</span><br><span class="line">svnadmin dump sdksvn/ &gt;sdksvn.dump</span><br></pre></td></tr></table></figure>
<p>4、把导出来的文件传输到新服务器对应目录下（需要提前做好免密登陆）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp sdksvn.dump xxx.xxx.xxx.xxx:/data/svn_dir   <span class="comment">#此处xxx代表IP地址</span></span><br></pre></td></tr></table></figure>
<p>5、恢复svn数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/svn_dir</span><br><span class="line">svnadmin load /data/svn_dir/sdksvn &lt; sdksvn.dump</span><br></pre></td></tr></table></figure>
<p>6、这里需要注一个点就是：导出导入的只是数据，并不会把原来的用户及用户密码导进新服务器，<br>需要手动把conf里面的文件复制打包一份到新服务器对应项目下的文件夹</p>
<p>7、启动svn服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su svn -c <span class="string">"svnserve -d --listen-port 1167 -r /data/svn_dir/sdksvn/"</span>   <span class="comment">#指定端口的方式</span></span><br><span class="line">su svn -c <span class="string">"svnserve -d -r /data/svn_dir/sdksvn/"</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper-集群搭建</title>
    <url>/rz168.io/2020/06/22/zookeeper-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Zookeeper-集群搭建</p>
<a id="more"></a>
<p>服务器信息如下(注：以下信息需要配置在/etc/hosts里面):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.2      ch02    zk01</span><br><span class="line">192.168.1.3      ch03    zk02</span><br><span class="line">192.168.1.4      ch04    zk03</span><br></pre></td></tr></table></figure>
<p>###1、为什么zookeeper节点数为奇数？<br>容错率<br>　　首先从容错率来说明：（需要保证集群能够有半数进行投票）<br>　　2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉，但是相对于 单节点服务器，2台服务器还有两个单点故障，所以直接排除了。<br>　　3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉<br>　　4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉<br>　　5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉<br>防脑裂<br>    脑裂集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的leader节点，导致原有的集群出现多个leader节点的情况，这就是脑裂。<br>　　3台服务器，投票选举半数为1.5，一台服务裂开，和另外两台服务器无法通行，这时候2台服务器的集群（2票大于半数1.5票），所以可以选举出leader，而 1 台服务器的集群无法选举。<br>　　4台服务器，投票选举半数为2，可以分成 1,3两个集群或者2,2两个集群，对于 1,3集群，3集群可以选举；对于2,2集群，则不能选择，造成没有leader节点。<br>　　5台服务器，投票选举半数为2.5，可以分成1,4两个集群，或者2,3两集群，这两个集群分别都只能选举一个集群，满足zookeeper集群搭建数目。<br>　　以上分析，我们从容错率以及防止脑裂两方面说明了3台服务器是搭建集群的最少数目，4台发生脑裂时会造成没有leader节点的错误。<br>###2、下载zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">官网下载地址：http://mirror.bit.edu.cn/apache/zookeeper/</span><br></pre></td></tr></table></figure>
<p>###3、安装jdk<br>略<br>对应版本为以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ch03 ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">"1.8.0_252"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_252-b09)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><br></pre></td></tr></table></figure>
<p>###4、解压及初始化zookeeper数据目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf zookeeper-3.6.1-bin.tar.gz</span><br><span class="line">mv zookeeper-3.6.1-bin /usr/<span class="built_in">local</span>/zookeeper</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">mkdir /data/zookeeper  <span class="comment">#之后修改配置文件时会用到</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /data/zookeeper/myid <span class="comment">#每台服务器都要执行，但id要不一样，如：1 2 3</span></span><br></pre></td></tr></table></figure>
<p>###5、修改配置zookeeper配置文件zoo.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"><span class="comment">## Metrics Providers</span></span><br><span class="line"><span class="comment"># https://prometheus.io Metrics Exporter</span></span><br><span class="line"><span class="comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="comment">#metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="comment">#metricsProvider.exportJvmInfo=true</span></span><br><span class="line">server.1=zk01:2888:3888</span><br><span class="line">server.2=zk02:2888:3888</span><br><span class="line">server.3=zk03:2888:3888</span><br></pre></td></tr></table></figure>
<p>###6、现在已经配置好一台，其它两台可以直接复制过去（注：事先要做好免密登陆）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /usr/<span class="built_in">local</span>/zookeeper zk02:/usr/<span class="built_in">local</span>/</span><br><span class="line">scp -r /usr/<span class="built_in">local</span>/zookeeper zk03:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>
<p>###7、启动zookeeper服务（每台服务器都要执行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start</span><br><span class="line">出现以下代表为启动成功</span><br><span class="line">[root@ch03 ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh stop</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure>
<p>###8、查看zookeeper自身的身份可用以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ch03 ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh status</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<p>###9、登陆到zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkCli.sh -server</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>修改docker默认存储目录</title>
    <url>/rz168.io/2020/07/02/%E4%BF%AE%E6%94%B9docker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>修改docker默认存储目录</p>
<a id="more"></a>
<p>修改原docker存储目录/var/lib/docker<br>1.先停止在运行的容器，停docker服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps | awk <span class="string">'&#123;print $1&#125;'</span> |sed <span class="string">'1d'</span>)</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>2.移动docker原文件到新目录,一定要保留原权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /var/lib/docker /data/</span><br><span class="line">或者</span><br><span class="line">rsync -a /var/lib/docker /data/</span><br></pre></td></tr></table></figure>

<p>3.编辑docker配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"graph"</span>:<span class="string">"/data/docker"</span>,</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.重启docker服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

<p>5.启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start $(docker ps -a| awk <span class="string">'&#123;print $1&#125;'</span> |sed <span class="string">'1d'</span>)</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>安装docker-compose</title>
    <url>/rz168.io/2020/06/22/%E5%AE%89%E8%A3%85docker-compose/</url>
    <content><![CDATA[<p>Docker-compose环境安装</p>
<a id="more"></a>
<p>###1、docker-compose简介<br>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务。<br>###2、docker-compose三步过程<br>1.定义应用环境<br>2.定义应用程序服务<br>3.Run docker-compose up and compose启动运行整个应用程序<br>###3、docker-compose安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>###4、增加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/<span class="built_in">local</span>/docker-compose</span><br></pre></td></tr></table></figure>
<p>###5、查看docker-compose版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># docker-compose --version</span></span><br><span class="line">docker-compose version 1.26.0-rc3, build 46118bc5</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-4.2.8安装脚本</title>
    <url>/rz168.io/2020/07/23/MongoDB-install/</url>
    <content><![CDATA[<p>MongoDB-4.2.8安装脚本<br> <a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#install mongodb-4.2.8</span></span><br><span class="line"></span><br><span class="line">Download_PATH=/usr/<span class="built_in">local</span>/src/</span><br><span class="line">Version=4.2.8</span><br><span class="line">Mongodb_PATH=/usr/<span class="built_in">local</span>/mongodb-<span class="variable">$Version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装依赖软件</span></span><br><span class="line">yum install libcurl openssl libcurl-devel openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载mongodb压缩包</span></span><br><span class="line">wget -O <span class="variable">$Download_PATH</span>/mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"重新下载mongodb压缩包"</span></span><br><span class="line">    wget -O <span class="variable">$Download_PATH</span>/mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"下载mongodb压缩包失败，请更换下载源~"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$Download_PATH</span></span><br><span class="line">    tar -xf mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz &amp;&amp; mv mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span> ../mongodb-<span class="variable">$Version</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"解压mongodb压缩包失败，重新解压"</span></span><br><span class="line">        tar -xf mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span>.tgz &amp;&amp; mv mongodb-linux-x86_64-rhel70-<span class="variable">$Version</span> ../mongodb-<span class="variable">$Version</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"解压mongodb压缩包失败，请手动执行~"</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment">#设置mongoDB环境变量</span></span><br><span class="line">    <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mongodb-<span class="variable">$Version</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">source</span> /etc/profile</span><br><span class="line">    mkdir -p /data/mongodb/Data</span><br><span class="line">    mkdir -p /data/mongodb/Log</span><br><span class="line">    touch /data/mongodb/Log/mongodb.log</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动mongoDB服务 </span></span><br><span class="line">    mongod -f <span class="variable">$Mongodb_PATH</span>/bin/mongodb.conf  --dbpath=/data/mongodb/Data/</span><br><span class="line">    <span class="comment">#关闭mongoDB服务</span></span><br><span class="line">    mongod --shutdown --dbpath=/data/mongodb/Data/</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>配置文件需要自己复制到$Mongodb_PATH下新建一个mongodb.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi  <span class="variable">$Mongodb_PATH</span>/bin/mongodb.conf</span><br><span class="line">        <span class="comment"># 数据文件位置</span></span><br><span class="line">        dbpath = /data/mongodb/Data</span><br><span class="line">        <span class="comment"># 日志文件位置</span></span><br><span class="line">        logpath = /data/mongodb/Log/mongodb.log</span><br><span class="line">        <span class="comment"># 以追加方式写入日志，true为追加。false是覆盖</span></span><br><span class="line">        logappend = <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 日志输出都发送到主机的syslog系统，而不是标准输出到logpath指定日志文件。syslog和logpath不能一起用，会报错：Cant use both a logpath and syslog</span></span><br><span class="line">        <span class="comment"># syslog = true</span></span><br><span class="line">        <span class="comment">#绑定地址。默认127.0.0.1，只能通过本地连接。进程绑定和监听来自这个地址上的应用连接。要是需要给其他服务器连接，则需要注释掉这个或则 把IP改成本机地址，</span></span><br><span class="line">        <span class="comment"># 如192.168.200.201[其他服务器用 mongo --host=192.168.200.201 连接] ，可以用一个逗号分隔的列表绑定多个IP地址。</span></span><br><span class="line">        <span class="comment"># bind_ip = 127.0.0.1</span></span><br><span class="line">        <span class="comment"># 默认端口27017</span></span><br><span class="line">        port = 27017</span><br><span class="line">        <span class="comment"># 是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false。</span></span><br><span class="line">        fork = <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 安静模式。这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line">        quiet = <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 启用日志文件，默认启用</span></span><br><span class="line">        journal = <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 刷写提交机制，默认是30ms或则100ms。较低的值，会更消耗磁盘的性能。此选项接受2和300毫秒之间的值：</span></span><br><span class="line">        <span class="comment"># 如果单块设备提供日志和数据文件，默认的日记提交时间间隔为100毫秒。如果不同的块设备提供的日志和数据文件，默认的日记提交的时间间隔为30毫秒。</span></span><br><span class="line">        <span class="comment"># journalCommitInterval=100</span></span><br><span class="line">        <span class="comment"># 启用定期记录CPU利用率和 I/O 等待，设置为true会强制mongodb每4s报告cpu利用率和io等待，把日志信息写到标准输出或日志文件。</span></span><br><span class="line">        <span class="comment"># 默认为false。开启日志会出现：1.Mon Jun 10 10:21:42.241 [snapshotthread] cpu: elapsed:4000 writelock: 0%</span></span><br><span class="line">        <span class="comment"># cpu = true</span></span><br><span class="line">        <span class="comment"># 用户认证，默认false。不需要认证。当设置为true时候，进入数据库需要auth验证，当数据库里没有用户，则不需要验证也可以操作。直到创建了第一个用户，之后操作都需要验证。</span></span><br><span class="line">        <span class="comment"># noauth = true</span></span><br><span class="line">        <span class="comment"># auth = true</span></span><br><span class="line">        <span class="comment"># 详细记录输出</span></span><br><span class="line">        <span class="comment"># verbose = true</span></span><br><span class="line">        <span class="comment"># 设置oplog记录等级 0=off (default) 1=W 2=R 3=both 7=W+some reads</span></span><br><span class="line">        <span class="comment"># diaglog = 0</span></span><br><span class="line">        <span class="comment"># 动态调试项</span></span><br><span class="line">        <span class="comment"># nocursors = true</span></span><br><span class="line">        <span class="comment"># 忽略查询提示</span></span><br><span class="line">        <span class="comment"># nohints = true</span></span><br><span class="line">        <span class="comment"># 指定的复制操作日志（OPLOG）的最大大小。mongod创建一个OPLOG的大小基于最大可用空间量。对于64位系统，OPLOG通常是5％的可用磁盘空间。</span></span><br><span class="line">        <span class="comment"># 一旦mongod第一次创建OPLOG，改变oplogSize将不会影响OPLOG的大小。</span></span><br><span class="line">        <span class="comment"># oplogSize = 1024</span></span><br><span class="line">        <span class="comment"># 指定存储身份验证信息的密钥文件的路径，默认缺省</span></span><br><span class="line">        <span class="comment"># keyFile = /path/to/keyfile</span></span><br><span class="line">        <span class="comment"># 最大连接数。默认值：取决于系统（即的ulimit和文件描述符）限制。MongoDB中不会限制其自身的连接。当设置大于系统的限制，则无效，以系统限制为准。这对于客户端创建很多“表”，</span></span><br><span class="line">        <span class="comment"># 允许连接超时而不关闭“表”的时候很有用。设置该值的高于连接池和总连接数的大小，以防止尖峰时 候的连接。注意：不能设置该值大于20000。</span></span><br><span class="line">        <span class="comment"># maxConns = 100</span></span><br><span class="line">        <span class="comment"># 强制验证客户端请求。2.4的默认设置为objcheck成为true，在早期版本objcheck默认为false。因为它强制验证客户端请求，确保客户端绝不插入无效文件到数据库中。</span></span><br><span class="line">        <span class="comment"># 对于嵌套文档的对象，会有一点性能影响。设置noobjcheck 关闭。</span></span><br><span class="line">        <span class="comment"># objcheck = true</span></span><br><span class="line">        <span class="comment"># 同上，默认false</span></span><br><span class="line">        <span class="comment"># noobjcheck = false</span></span><br><span class="line">        <span class="comment"># 进程ID，没有指定则启动时候就没有PID文件。默认缺省。</span></span><br><span class="line">        <span class="comment"># pidfilepath = /var/run/mongo.pid</span></span><br><span class="line">        <span class="comment"># 套接字文件，默认为false，有生成socket文件。当设置为true时，不会生成socket文件</span></span><br><span class="line">        <span class="comment"># nounixsocket = false</span></span><br><span class="line">        <span class="comment"># 套接字文件路径，默认/tmp</span></span><br><span class="line">        <span class="comment"># unixSocketPrefix = /tmp</span></span><br><span class="line">        <span class="comment"># 设置为true，修改数据目录存储模式，每个数据库的文件存储在DBPATH指定目录的不同的文件夹中。使用此选项，可以配置的MongoDB将数据存储在不同的磁盘设备上，以提高写入吞吐量或磁盘容量。默认为false。</span></span><br><span class="line">        <span class="comment"># 注意：要是在运行一段时间的数据库中，开启该参数，会导致原始的数据都会消失（注释参数则会回来）。因为数据目录都不同了，除非迁移现有的数据文件到directoryperdb产生的数据库目录中</span></span><br><span class="line">        <span class="comment"># directoryperdb = false</span></span><br><span class="line">        <span class="comment"># 是否支持ipv6，默认false</span></span><br><span class="line">        <span class="comment"># ipv6 = false</span></span><br><span class="line">        <span class="comment"># 是否允许JSONP访问通过一个HTTP接口，默认false。</span></span><br><span class="line">        <span class="comment"># jsonp = false</span></span><br><span class="line">        <span class="comment"># 是否禁止http接口，即28017 端口开启的服务。默认false，支持</span></span><br><span class="line">        <span class="comment"># nohttpinterface = false</span></span><br><span class="line">        <span class="comment"># 预分配方式。默认false：使用预分配方式来保证写入性能的稳定，预分配在后台进行，并且每个预分配的文件都用0进行填充。这会让MongoDB始终保持额外的空间和空余的数据文件，</span></span><br><span class="line">        <span class="comment"># 从而避免了数据增长过快而带来的分配磁盘空间引起的阻塞。设置noprealloc= true来禁用预分配的数据文件，会缩短启动时间，但在正常操作过程中，可能会导致性能显著下降。</span></span><br><span class="line">        <span class="comment"># noprealloc = false</span></span><br><span class="line">        <span class="comment"># 是否禁止脚本引擎。默认是false：不禁止。ture：禁止。</span></span><br><span class="line">        <span class="comment"># 要是设置成true：运行一些脚本的时候会出现：JavaScript execution failed: group command failed: &#123; "ok" : 0, "errmsg" : "server-side JavaScript execution is disabled" &#125;</span></span><br><span class="line">        <span class="comment"># noscripting = false</span></span><br><span class="line">        <span class="comment"># 是否禁止表扫描操作。默认false：不禁止，ture：禁止</span></span><br><span class="line">        <span class="comment"># 禁止要是执行表扫描会出现：error: &#123; "$err" : "table scans not allowed:test.emp", "code" : 10111 &#125;</span></span><br><span class="line">        <span class="comment"># notablescan = false</span></span><br><span class="line">        <span class="comment"># 命名空间的文件（即NS）的默认大小，默认16M，最大2G。所有新创建的默认大小命名空间的文件（即NS）。</span></span><br><span class="line">        <span class="comment"># 此选项不会影响现有的命名空间的文件的大小。默认值是16M字节，最大大小为2 GB。让小数据库不让浪费太多的磁盘空间，同时让大数据在磁盘上有连续的空间。</span></span><br><span class="line">        <span class="comment"># nssize = 16</span></span><br><span class="line">        <span class="comment"># 数据库分析等级设置。记录一些操作性能到标准输出或则指定的logpath的日志文件中，默认0:关闭。</span></span><br><span class="line">        <span class="comment"># 数据库分析可以影响数据库的性能，因为分析器必须记录和处理所有的数据库操作。所以在需要的时候用动态修改就可以了</span></span><br><span class="line">        <span class="comment"># 0：关，无分析。 1：开，仅包括慢操作。 2：开，包括所有操作。</span></span><br><span class="line">        <span class="comment"># 控制 Profiling  的开关和级别：2种</span></span><br><span class="line">        <span class="comment"># 第一种是直接在启动参数里直接进行设置或则启动MongoDB时加上–profile=级别，其信息保存在 生成的system.profile 中。</span></span><br><span class="line">        <span class="comment"># profile = 0</span></span><br><span class="line">        <span class="comment"># 记录profile分析的慢查询的时间，默认是100毫秒</span></span><br><span class="line">        <span class="comment"># slowms = 100</span></span><br><span class="line">        <span class="comment"># 配额，默认false。是否开启配置每个数据库的最多文件数的限制。当为true则用quotaFiles来配置最多文件的数量。</span></span><br><span class="line">        <span class="comment"># quota = false</span></span><br><span class="line">        <span class="comment"># 配额数量。每个数据库的数据文件数量的限制。此选项需要quota为true。默认为8</span></span><br><span class="line">        <span class="comment"># quotaFiles = 8</span></span><br><span class="line">        <span class="comment"># 使一个简单的 REST API，默认false，设置为true。</span></span><br><span class="line">        <span class="comment"># rest = true</span></span><br><span class="line">        <span class="comment"># 修复数据库操作，默认是false。设置为true时，启动后修复所有数据库，设置这个选项最好在命令行上，而不是在配置文件或控制脚本。</span></span><br><span class="line">        <span class="comment"># repair = true</span></span><br><span class="line">        <span class="comment"># 修复路径，默认是在dbpath路径下的_tmp 目录。</span></span><br><span class="line">        <span class="comment"># repairpath</span></span><br><span class="line">        <span class="comment"># 是否使用较小的默认文件。默认为false，不使用。设置为true，使用较小的默认数据文件大小。smallfiles减少数据文件的初始大小，并限制他们到512M，</span></span><br><span class="line">        <span class="comment"># 也减少了日志文件的大小，并限制他们到128M。如果数据库很大，各持有少量的数据，会导致mongodb创建很多文件，会影响性能。</span></span><br><span class="line">        <span class="comment"># smallfiles = true</span></span><br><span class="line">        <span class="comment"># 刷写数据到日志的频率，通过fsync操作数据。默认60秒。</span></span><br><span class="line">        <span class="comment"># 警告：如果设置为0，SYNCDELAY 不会同步到磁盘的内存映射文件。在生产系统上，不要设置这个值。</span></span><br><span class="line">        <span class="comment"># syncdelay = 60</span></span><br><span class="line">        <span class="comment"># 系统信息，默认false。设置为true，mongod会诊断系统有关的页面大小，数量的物理页面，可用物理??页面的数量输出到标准输出。</span></span><br><span class="line">        <span class="comment"># 当开启sysinfo参数的时候，只会打印信息，不会启动mongodb的程序。所以要关闭该参数，才能开启mongodb。</span></span><br><span class="line">        <span class="comment"># sysinfo = false</span></span><br><span class="line">        <span class="comment"># 升级。默认为false。当设置为true，指定DBPATH，升级磁盘上的数据格式的文件到最新版本。会影响数据库操作，更新元数据。大部分情况下，不需要设置该值。</span></span><br><span class="line">        <span class="comment"># upgrade = false</span></span><br><span class="line">        <span class="comment"># 是否使用内部诊断。默认false。</span></span><br><span class="line">        <span class="comment"># traceExceptions = false</span></span><br><span class="line">        <span class="comment"># 2.4的新参数，指定启动选项配置。想设置多个选项则用一个setParameter选项指定，可以setParameter的参数请见这里。</span></span><br><span class="line">        <span class="comment"># 声明setParameter设置在这个文件中，使用下面的格式：setParameter = &lt;parameter&gt;=&lt;value&gt;</span></span><br><span class="line">        <span class="comment"># 例如： setParameter = syncdelay= 55,notablescan = true,journalCommitInterval = 50,traceExceptions = true</span></span><br><span class="line">        <span class="comment"># setParameter = </span></span><br><span class="line">        <span class="comment"># 使用此设置来配置复制副本集。指定一个副本集名称作为参数，所有主机都必须有相同的名称作为同一个副本集。</span></span><br><span class="line">        <span class="comment"># replSet = </span></span><br><span class="line">        <span class="comment"># 默认为false。在副本集下，设置为true，从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步，</span></span><br><span class="line">        <span class="comment"># 否则的mongod将尝试执行初始同步。注意：如果数据不完全同步，mongod指定fastsync开启，secondary或slave与主永久不同步，这可能会导致显着的一致性问题。</span></span><br><span class="line">        <span class="comment"># fastsync = </span></span><br><span class="line">        <span class="comment"># 2.2版本出现的新参数，默认是all。可以设置的值有：all, none, and _id_only。只能在副本集（replSet）中使用。默认情况下，</span></span><br><span class="line">        <span class="comment"># secondary副本集的成员将加载所有索引到内存中（从OPLOG之前的操作有关的）。您可以修改此行为，使secondary只会加载_id索引。指定id或none，防止mongod的任何索引加载到内存。</span></span><br><span class="line">        <span class="comment"># replIndexPrefetch = </span></span><br><span class="line">        <span class="comment"># 主从复制的相关设置</span></span><br><span class="line">        <span class="comment"># master：默认为false，当设置为true，则配置当前实例作为主实例。</span></span><br><span class="line">        <span class="comment"># master = false</span></span><br><span class="line">        <span class="comment"># slave：默认为false，当设置为true，则配置当前实例作为从实例。</span></span><br><span class="line">        <span class="comment"># slave = true</span></span><br><span class="line">        <span class="comment"># 设置从库同步主库的延迟时间，用于从设置，默认为0。</span></span><br><span class="line">        <span class="comment"># slavedelay = 0</span></span><br><span class="line">        <span class="comment"># 是否自动重新同步.默认为false，用于从设置。设置为true，如果落后主超过10秒，会强制从自动重新同步。</span></span><br><span class="line">        <span class="comment"># 如果oplogSize太小，此设置可能有问题。如果OPLOG大小不足以存储主的变化状态和从的状态变化之间的差异，这种情况下强制重新同步是不必要的。</span></span><br><span class="line">        <span class="comment"># 当设置autoresync选项设置为false，10分钟内从不会进行大于1次的自动重新同步。</span></span><br><span class="line">        <span class="comment"># autoresync = false</span></span><br><span class="line">        <span class="comment"># 默认为空，格式为：&lt;host&gt;&lt;:port&gt;。用于从实例的复制：设置从的时候指定该选项会让从复制指定主的实例</span></span><br><span class="line">        <span class="comment"># source = 127.0.0.1:30001</span></span><br><span class="line">        <span class="comment"># 默认为空，用于从选项，指定一个数据库进行复制。</span></span><br><span class="line">        <span class="comment"># only =</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</title>
    <url>/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>配置elasticsearch集群访问权限+Kibana设置账号密码登陆配置</p>
<a id="more"></a>
<p>1、本文基于上两篇文章进行配置（elasticsearch集群部署和kibana服务安装）<br>2、服务器配置信息及软件版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  服务器IP   | hostname  | 对应软件版本  | </span><br><span class="line">|  ----  | ----  | ----  | </span><br><span class="line">|192.168.0.12|es01|es 7.9.3|</span><br><span class="line">|192.168.0.13|es01|es 7.9.3|</span><br><span class="line">|192.168.0.17|es01|es 7.9.3|</span><br><span class="line">|192.168.0.17|es01|kibana 7.9.3|</span><br></pre></td></tr></table></figure>
<p>3、停止现在运行的elk环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /tmp/elasticsearch_pid | xargs kill -9 </span><br><span class="line">pkill kibana</span><br></pre></td></tr></table></figure>
<p>4、开启xpack配置<br>修改作为主节点的elasticsearch配置文件，添加如下命令开启x-pack</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>5、生成安全秘钥，执行以下命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-certutil ca -out config/elastic-certificates.p12 -pass <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>6、执行上面命令后，在config文件夹多出了文件elastic-certificates.p12，此时需要继续配置es配置文件，添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elasticsearch-7.9.3/config/elasticsearch.yml</span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure>
<p>7、然后启动当前服务器的es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/su - es -c <span class="string">'/usr/local/elasticsearch-7.9.3/bin/elasticsearch -p /tmp/elasticsearch_pid -d'</span></span><br></pre></td></tr></table></figure>
<p>8、配置初始账号密码（这里有两种配置方式）<br>1）自动生成密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords auto</span><br></pre></td></tr></table></figure>
<p>2）手动配置指定密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch-7.9.3/bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>
<p>然后会对应生成elastic账号，谨记所设置的密码，因为下面配置会用到<br>9、验证elasticsearch，浏览器输入对应的IP:9200提示下图，则配置成功</p>
<img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass01.png" class title="This is an jenkins image">
<p>10、配置剩下两台集群机器<br>这里需要把主节点生成的elastic-certificates.p12分别复制到相关节点的config下<br>同时各自的elasticsearch.yml文件新增以下配置,再执行启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure>
<p>11、配置kibana权限<br>修改Kibana配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line">elasticsearch.hosts: ["http://127.0.0.1:9200"]</span><br><span class="line">kibana.index: ".kibana"</span><br><span class="line">i18n.locale: "zh-CN"</span><br><span class="line"><span class="meta">#</span><span class="bash">新增配置</span></span><br><span class="line">elasticsearch.username: "elastic"</span><br><span class="line">elasticsearch.password: "123456"</span><br><span class="line">xpack.security.enabled: true</span><br></pre></td></tr></table></figure>
<p>12、启动kibana，并访问kibana界面，测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su es -c '/usr/local/kibana-7.9.3/bin/kibana &amp; '</span><br></pre></td></tr></table></figure>
<p>浏览器键入：192.168.0.12:5601</p>
<img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass02.png" class title="This is an jenkins image">
<p>13、登陆成功界面以及配置用户权限界面</p>
<img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass03.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/11/03/Kibana%E8%AE%BE%E7%BD%AE%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86%E9%85%8D%E7%BD%AE/pass04.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch集群部署</title>
    <url>/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Elasticsearch集群部署</p>
<a id="more"></a>
<p>1、服务器信息及软件版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  服务器IP   | 系统版本  |  hostname  | 对应软件版本  | </span><br><span class="line">|  ----  | ----  | ----  | ----  | </span><br><span class="line">|192.168.0.12|centos 7|es01|es 7.9.3|</span><br><span class="line">|192.168.0.13|centos 7|es01|es 7.9.3|</span><br><span class="line">|192.168.0.17|centos 7|es01|es 7.9.3|</span><br></pre></td></tr></table></figure>
<p>2、Elasticsearch介绍<br>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p>
<p>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。<br>实时分析的分布式搜索引擎。<br>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。<br><a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">Elasticsearch官网链接</a><br>3、由于部署三台服务器，一步步操作比较麻烦，则这边使用到批量部署工具ansible，则下面为ansible-playbook配置<br>有需要的可以自行查看本人的<a href="https://github.com/Piouscc/dev">github</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: esnode</span><br><span class="line">  remote_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;下载es7.9版本压缩包&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        date ;</span><br><span class="line">        Downloads_dir&#x3D;&#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">        wget -O $Downloads_dir&#x2F;elasticsearch-7.9.3-linux-x86_64.tar.gz https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-7.9.3-linux-x86_64.tar.gz &gt;&#x2F;dev&#x2F;null</span><br><span class="line">    - name: &quot;解压es压缩包&quot;</span><br><span class="line">      shell: cd &#x2F;usr&#x2F;local&#x2F;src &amp;&amp; tar -xf elasticsearch-7.9.3-linux-x86_64.tar.gz &amp;&amp; mv elasticsearch-7.9.3 ..&#x2F;elasticsearch-7.9.3</span><br><span class="line">    - name: &quot;复制es配置文件到es服务器&quot;</span><br><span class="line">      template: src&#x3D;elasticsearch.yml dest&#x3D;&#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3&#x2F;config&#x2F;</span><br><span class="line">    - name: &quot;复制修改配置文件脚本&quot;</span><br><span class="line">      template: src&#x3D;chage.sh dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line">    - name: &quot;修改es配置文件&quot;</span><br><span class="line">      shell: sh -x &#x2F;usr&#x2F;local&#x2F;src&#x2F;chage.sh</span><br><span class="line">    - name: &quot;创建es数据及log目录&quot;</span><br><span class="line">      shell: mkdir -p &#x2F;data&#x2F;elasticsearch&#x2F;&#123;log,data&#125;</span><br><span class="line">    - name: create es user</span><br><span class="line">      user:</span><br><span class="line">        name: esuser</span><br><span class="line">        state: present</span><br><span class="line">    - name: &quot;配置用户及组权限&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        chown esuser.esuser -R &#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3</span><br><span class="line">        chown esuser.esuser -R &#x2F;data&#x2F;elasticsearch</span><br><span class="line">    - name: &quot;修改系统配置&quot;</span><br><span class="line">      shell: |-</span><br><span class="line">        echo &quot;vm.max_map_count&#x3D;262144&quot;  &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">        sysctl -p </span><br><span class="line">        echo &quot;* soft memlock unlimited&quot; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf </span><br><span class="line">        echo &quot;* hard memlock unlimited&quot; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf </span><br><span class="line">    - name: &quot;分别启动es&quot;</span><br><span class="line">      shell: &#x2F;usr&#x2F;bin&#x2F;su - esuser -c &#39;&#x2F;usr&#x2F;local&#x2F;elasticsearch-7.9.3&#x2F;bin&#x2F;elasticsearch -p &#x2F;tmp&#x2F;elasticsearch_pid -d&#39;</span><br></pre></td></tr></table></figure>
<p>4、执行ansible-playbook安装elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook -v elasticsearch.yml</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es01.png" class title="This is an jenkins image">
<p>5、因为安装方式选择了ansible批量的形式，则安装完就会自动启动，则直接查看elasticsearch进程</p>
<img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es02.png" class title="This is an jenkins image">
<p>6、查看节点</p>
<img src="/rz168.io/2020/11/02/Elasticsearch%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/es03.png" class title="This is an jenkins image">
<p>显示上面，则es集群就已经搭建完成了</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana服务安装</title>
    <url>/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Kibana服务安装</p>
<a id="more"></a>
<p>1、kibana简介<br>Kibana 是一个免费且开放的用户界面，能够让您对 Elasticsearch 数据进行可视化，并让您在 Elastic Stack 中进行导航。您可以进行各种操作，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。</p>
<p>Kibana是ElasticSearch的一个工具，用来分析ES中的数据并以各种图形界面显示出来<br>可以作为ElasticSearch的一个客户端，在Kibana中可以很轻松的调用ES的RESTful接口<br>2、部署kibana，这里用的方法是通过ansible-playbook，如下<br>有需要的可以自行查看本人的<a href="https://github.com/Piouscc/dev">github</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: kibana</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="string">"下载 kibana-7.9版本"</span></span><br><span class="line">      shell: |-</span><br><span class="line">        date ;</span><br><span class="line">        Downloads_dir=/usr/<span class="built_in">local</span>/src</span><br><span class="line">        wget -O <span class="variable">$Downloads_dir</span>/kibana-7.9.3-linux-x86_64.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-7.10.0-linux-x86_64.tar.gz &gt; /dev/null</span><br><span class="line">    - name: <span class="string">"解压kibana"</span></span><br><span class="line">      shell: <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; tar -xf kibana-7.9.3-linux-x86_64.tar.gz &amp;&amp; mv kibana-7.9.3-linux-x86_64 ../kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"复制kibana配置文件"</span></span><br><span class="line">      template: src=kibana.yml dest=/usr/<span class="built_in">local</span>/kibana-7.9.3/config/</span><br><span class="line">    - name: <span class="string">"修改目录用户及组"</span></span><br><span class="line">      shell: chown esuser.www -R /usr/<span class="built_in">local</span>/kibana-7.9.3</span><br><span class="line">    - name: <span class="string">"启动kibana"</span></span><br><span class="line">      shell: su esuser -c <span class="string">'/usr/local/kibana-7.9.3/bin/kibana &amp; '</span></span><br></pre></td></tr></table></figure>
<p>3、执行安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook -v kibana.yml</span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki01.png" class title="This is an jenkins image">
<p>4、查看kibana服务进程及端口，默认端口为5601</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node02 config]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:5601            0.0.0.0:*               LISTEN      3797/node           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      963/sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1132/master         </span><br><span class="line">tcp6       0      0 192.168.0.17:9200       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 192.168.0.17:9300       :::*                    LISTEN      1722/java           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      963/sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1132/master         </span><br><span class="line">[root@node02 config]<span class="comment"># ps -ef |grep kibana</span></span><br><span class="line">esuser     3797      1 87 15:26 ?        00:01:01 /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../node/bin/node /usr/<span class="built_in">local</span>/kibana-7.9.3/bin/../src/cli</span><br><span class="line">root       3868   2072  1 15:27 pts/1    00:00:00 grep --color=auto kibana</span><br><span class="line">[root@node02 config]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki02.png" class title="This is an jenkins image">
<p>5、访问kibana web界面</p>
<img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki03.png" class title="This is an jenkins image">
<img src="/rz168.io/2020/11/03/Kibana%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/ki04.png" class title="This is an jenkins image">]]></content>
      <tags>
        <tag>linux</tag>
        <tag>elk</tag>
      </tags>
  </entry>
</search>
